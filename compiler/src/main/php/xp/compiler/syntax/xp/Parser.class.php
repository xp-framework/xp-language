<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          7,     8,     8,    11,    11,    10,    10,    10,     4,     4, 
          4,    15,     3,    19,     3,    21,     3,    16,    16,    17, 
         17,    22,    22,    24,    24,    18,    18,    25,    25,    25, 
         20,    20,    20,    29,    29,    31,    30,    32,    30,    26, 
         26,    26,    36,    36,    37,    37,    40,    40,    35,    35, 
         42,    27,    45,    27,    47,    27,    49,    27,    13,    13, 
         50,    50,    52,    52,    52,    53,    53,    53,    54,    54, 
         55,    55,    44,    44,    44,    41,    41,    41,    46,    46, 
         56,    56,    39,    39,    39,    57,    57,    43,    43,    48, 
         48,    48,    48,    48,    48,    28,    28,    58,    58,    61, 
         59,    62,    59,    65,    59,    67,    59,    69,    59,    70, 
         59,    71,    59,    73,    59,    74,    59,    75,    59,    76, 
         59,    59,    59,    59,    78,    78,    80,    80,    79,    79, 
         81,    68,    68,    72,    72,    82,    82,    84,    83,    85, 
         83,    63,    63,    64,    86,    64,    77,    77,    87,    87, 
         91,    90,    92,    92,    88,    88,    93,    89,    66,    66, 
         94,    94,    60,    60,    95,    95,    95,    99,    99,    99, 
         99,   101,    33,    33,   102,    33,   103,    33,   104,    33, 
         33,    33,    33,    33,    33,    33,    33,    33,    33,    33, 
         33,   112,    33,    33,   111,   111,   110,   110,   113,   113, 
        114,   114,    38,   116,    38,    38,    38,    38,    38,    38, 
        115,   115,    98,    98,   117,   117,   119,   119,   118,   118, 
        105,   105,   105,   105,   105,   105,   105,   105,   105,   105, 
        105,   105,   106,   106,   106,   106,   106,   106,   106,   106, 
        107,   107,   107,   107,   107,   107,   107,   107,   107,   107, 
        107,   108,   108,   108,   108,   108,   108,   109,   109,   100, 
        100,   120,   120,   122,   121,   121,   124,   121,   125,   121, 
        123,   123,    12,    12,    12,    34,    34,    34,    14,    14, 
         96,    97,   126,   126,   127,   127,    23,    23,    51,    51, 
        128,   128,   129,   129,   129,   129,   129,   129,   129,   129, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          6,     0,     1,     1,     1,     1,     1,     3,     1,     3, 
          3,     0,     9,     0,     9,     0,     8,     0,     2,     0, 
          2,     0,     2,     0,     3,     2,     0,     1,     1,     4, 
          3,     1,     0,     1,     3,     0,     3,     0,     6,     5, 
          6,     6,     1,     4,     1,     2,     2,     4,     0,     2, 
          0,     9,     0,     9,     0,     8,     0,    10,     4,     1, 
          1,     3,     2,     5,     5,     3,     3,     1,     1,     3, 
          3,     3,     1,     3,     3,     0,     2,     1,     0,     1, 
          1,     3,     3,     3,     4,     1,     2,     0,     2,     1, 
          1,     1,     1,     1,     1,     0,     1,     1,     2,     0, 
          4,     0,     7,     0,    10,     0,     8,     0,     6,     0, 
          8,     0,     8,     0,     3,     0,     3,     0,     4,     0, 
          6,     7,     7,     2,     1,     3,     1,     3,     1,     3, 
          3,     1,     3,     0,     1,     1,     2,     0,     5,     0, 
          4,     1,     3,     0,     0,     3,     2,     1,     1,     2, 
          0,     9,     1,     3,     0,     1,     0,     5,     0,     1, 
          1,     3,     0,     1,     5,     4,     4,     1,     4,     1, 
          1,     0,     3,     2,     0,     4,     0,     5,     0,     6, 
          2,     3,     1,     1,     1,     1,     1,     5,     3,     3, 
          3,     0,     8,     4,     1,     3,     0,     1,     1,     3, 
          1,     2,     1,     0,     4,     1,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     3,     0,     1,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          4,     4,     3,     3,     3,     3,     3,     3,     4,     4, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     4, 
          4,     2,     2,     2,     2,     2,     2,     2,     2,     0, 
          1,     1,     2,     0,     4,     2,     0,     6,     0,     5, 
          1,     1,     1,     1,     1,     1,     1,     1,     1,     4, 
          3,     4,     1,     3,     1,     3,     1,     3,     0,     1, 
          1,     2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,     0,     0,     0,   303,   305,   304,   307,   309,   308, 
        310,   306,     1,     0,    70,     0,   301,     8,     0,     0, 
          4,     0,    13,     0,     0,     0,    71,    22,    26,    24, 
        302,    20,    21,     0,     0,     0,     0,    78,     0,     0, 
          0,     0,     0,     0,    15,   283,   285,   284,     0,    14, 
          0,     0,     0,     0,    72,    69,     0,     0,     0,     0, 
         11,    17,     0,     0,    76,    77,   214,     0,   220,   216, 
        219,   217,   218,     0,     0,     0,    79,     0,     0,     0, 
          0,     0,     0,     0,    10,     0,     0,     0,    74,     0, 
         75,     0,     0,   286,     0,   287,   288,     0,   293,    29, 
          0,     0,     0,    33,    37,     0,    18,   223,     0,     0, 
          0,     0,     0,     0,   185,     0,     0,     0,   182,     0, 
          0,     0,     0,     0,   221,     0,   222,   193,   194,   195, 
        196,   197,     0,     0,   225,   213,    81,    82,     0,    80, 
          0,     0,     0,     0,   290,    31,    37,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   191,     0, 
        189,     0,     0,     0,     0,   187,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   268,   269,     0,   274,   282, 
        281,   184,   271,     0,     0,     0,   215,     0,   296,     0, 
        291,   294,     0,   298,     0,     0,    27,     0,    36,    38, 
         39,     0,     0,     0,    44,     0,     0,     0,     0,     0, 
          0,     0,     0,   183,     0,   211,     0,     0,     0,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   201,     0,     0,   192,     0, 
        273,   279,     0,   172,     0,     0,   228,   226,   292,    23, 
          0,     0,     0,     0,     0,     0,     0,    25,     0,    37, 
          0,   186,     0,     0,     0,   204,   212,     0,     0,     0, 
        181,   178,     0,     0,     0,     0,     0,     0,     0,     0, 
         97,     0,     0,   277,   110,     0,   128,   114,   118,   120, 
        116,   124,   126,   112,   122,     0,     0,     0,     0,   108, 
          0,    65,     0,     0,     0,     0,     0,     0,    37,    47, 
          0,    45,     0,     0,     0,     0,     0,     0,     0,     0, 
        210,     0,   188,     0,   275,     0,     0,     0,   130,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         40,   134,   109,     0,     0,    63,    61,   100,   101,   102, 
        103,   104,   105,     0,     0,     0,     0,     0,     0,     0, 
          0,   176,   177,   190,     0,   202,     0,   280,     0,     0, 
          0,     0,     0,   135,     0,     0,     0,     0,   152,     0, 
          0,   125,   127,     0,     0,     0,     0,   139,     0,     0, 
         91,     0,     0,     0,     0,     0,    67,     0,     0,    50, 
          0,     0,    55,    35,     0,   175,   206,     0,   179,   278, 
        111,     0,     0,     0,     0,   129,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    52,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    54,    57, 
          0,    51,    56,    49,   203,     0,     0,   136,     0,     0, 
          0,   153,     0,     0,     0,     0,     0,     0,   140,     0, 
          0,     0,     0,    92,    94,    93,     0,     0,     0,     0, 
          0,   161,   167,   131,     0,   158,   159,     0,     0,   119, 
          0,   143,     0,     0,     0,     0,    95,    99,     0,    83, 
          0,    66,     0,     0,     0,    58,     0,     0,   157,   166, 
        160,   132,     0,     0,     0,   155,   113,   148,   150,     0, 
          0,   146,   133,     0,     0,    64,    62,     0,     0,     0, 
          0,   121,   117,     0,     0,     0,   123,   147,    85,    84, 
         68,   163,     0,     0,     0,   156,     0,     0,     0,     0, 
        168,   115,     0,   151,   164,     0,   149,     0,     0,   162, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    23,   132,     4,     7,     8,    34,    13,    74, 
         59,    60,   228,   104,    52,    90,   112,   159,    54,   233, 
         53,    92,   114,   360,   229,   230,   231,   347,   234,   235, 
        306,   307,   348,   288,   407,   358,   452,   134,   441,   453, 
        485,   446,   513,   542,   445,   442,   395,   404,   488,    36, 
         25,    37,    49,    86,    87,   443,   444,   349,   350,   265, 
        378,   388,   430,   557,   382,   135,   385,   472,   383,   384, 
        389,   560,   386,   387,   381,   421,   524,   423,   437,   424, 
        438,   561,   562,   575,   576,   574,   525,   549,   526,   527, 
        547,   583,   548,   136,   238,   106,   107,   137,   323,   212, 
        173,   168,   251,   242,   138,   139,   140,   141,   142,   248, 
        370,   458,   249,   250,   143,    96,   144,   145,   298,   213, 
        214,   290,   215,   377,   333,   108,   109,    26,    27, 
    );
    protected static $yySindex = array(         -257,
          0,     0,  -247,  -200,  -193,   852,  -247,     0,    64,    89, 
         84,  -200,  -185,   128,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   227,     0,   912,     0,     0,  -200,  -200, 
          0,  -207,     0,   -48,  -187,    98,     0,     0,     0,     0, 
          0,     0,     0,     1,   229,   242,   225,     0,   258,   128, 
        912,  -200,  -200,  -200,     0,     0,     0,     0,   253,     0, 
         14,  -200,  -200,    42,     0,     0,   267,    44,    68,    44, 
          0,     0,   358,   353,     0,     0,     0,   368,     0,     0, 
          0,     0,     0,   383,   412,   326,     0,    49,  -200,   148, 
       -200,   342,   148,    14,     0,  1107,   308,   308,     0,  -232, 
          0,   165,   434,     0,   406,     0,     0,    61,     0,     0, 
       -200,   393,   477,     0,     0,   415,     0,     0,  4436,  4436, 
       4436,  4436,  4436,  4436,     0,  4436,     5,   485,     0,  4436, 
        422,   142,  3455,   -44,     0,   510,     0,     0,     0,     0, 
          0,     0,   463,   515,     0,     0,     0,     0,   368,     0, 
       -200,   -80,   470,    49,     0,     0,     0,  -200,   672,   306, 
         -2,   -51,   -51,    69,   -51,   -51,   -51,   -80,     0,  4436, 
          0,  4436,   -44,  2315,   -78,     0,  4436,  4436,  4436,  4436, 
       4436,  4436,  4436,  4436,  4436,  4436,  4436,  4436,  4436,  4436, 
       4436,  4436,  4322,  4333,  4189,  4436,  4313,  4436,  4436,  4436, 
       4436,  4436,  4436,  -200,  4436,     0,     0,   -80,     0,     0, 
          0,     0,     0,   -44,   -30,  4436,     0,   162,     0,   414, 
          0,     0,   922,     0,   444,   314,     0,   -67,     0,     0, 
          0,     0,   450,   124,     0,   536,   406,   -44,   454,   457, 
       3455,  4436,  3455,     0,   -44,     0,   -61,   325,   544,     0, 
       -133,  3497,  3620,  3620,  3620,  3620,  3620,  3620,  3620,  3620, 
       3620,  3620,  3620,  3455,   535,   431,  2602,    46,  4436,  2257, 
       4436,  2257,  4436,  4436,  1394,  1394,  4436,  4436,  1394,  1394, 
        184,   184,    69,    69,    69,     0,   -51,   354,     0,  4436, 
          0,     0,   558,     0,   541,   485,     0,     0,     0,     0, 
        620,   340,   298,   341,   202,   479,   563,     0,   306,     0, 
       4436,     0,  4436,    57,   564,     0,     0,  4377,   -78,   566, 
          0,     0,   -44,  4436,  3620,  3620,  1394,  1394,  1394,  1394, 
          0,   514,  4436,     0,     0,    -7,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   576,   492,  2343,   620,     0, 
        557,     0,   584,   585,   737,   537,   565,   508,     0,     0, 
       4436,     0,  1210,   593,   516,   519,   -44,   620,  3455,   523, 
          0,  4436,     0,  1215,     0,   608,  4436,  4436,     0,   310, 
       4436,   614,   616,   506,   617,   599,   603,   626,   627,   328, 
          0,     0,     0,   308,   -76,     0,     0,     0,     0,     0, 
          0,     0,     0,   631,   -76,  4436,   613,   416,  1632,  2486, 
        479,     0,     0,     0,   552,     0,   637,     0,   640,   628, 
        620,   630,   365,     0,  2544,  4436,  4436,   620,     0,   337, 
        360,     0,     0,  4436,  4436,   643,   380,     0,   642,   668, 
          0,   681,   685,  -143,   264,   264,     0,   638,  3455,     0, 
        -47,  -104,     0,     0,   479,     0,     0,   -44,     0,     0, 
          0,   605,  4436,   310,   609,     0,   674,  2641,   619,   694, 
        698,   386,  2739,  2782,  4436,   328,   629,     0,   491,   436, 
        -76,   420,   565,   -76,   720,   685,   723,   -76,     0,     0, 
        620,     0,     0,     0,     0,   192,  3455,     0,   620,  4436, 
        506,     0,  4436,   425,  4436,   506,   649,  3455,     0,   620, 
        565,  -200,    63,     0,     0,     0,   685,   436,   436,   732, 
        650,     0,     0,     0,   192,     0,     0,   651,   722,     0, 
       2817,     0,  2937,   417,   174,   658,     0,     0,  4436,     0, 
        620,     0,    63,    63,   436,     0,   746,   664,     0,     0, 
          0,     0,  4436,   734,   506,     0,     0,     0,     0,   669, 
        174,     0,     0,  2973,   670,     0,     0,    63,  -200,   620, 
        755,     0,     0,   506,  4436,   740,     0,     0,     0,     0, 
          0,     0,  -117,   675,   506,     0,  3200,   620,  -200,   758, 
          0,     0,   620,     0,     0,   678,     0,   620,   677,     0, 
    );
    protected static $yyRindex= array(         1812,
          0,     0,  1143,     0,   -98,   231,  2064,     0,  1293,     0, 
          0,     0,   546,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   373,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   125,     0,     0,   108,     0, 
        453,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  1474,  -109,   691,  -109, 
          0,     0,   756,     0,     0,     0,     0,   776,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   695, 
          0,     0,   695,     0,     0,   727,     0,     0,     0,     0, 
          0,     0,     0,     0,   155,     0,     0,     0,     0,     0, 
          0,     0,    66,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  1063,  1176,     0,     0, 
          0,     0,   794,  1620,     0,    33,     0,     0,     0,     0, 
          0,     0,     0,   218,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -64,   697, 
        665,  1775,  1920,  3042,  2017,  2102,  2160,     0,     0,     0, 
          0,     0,  1620,     0,   573,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   765,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  1717,     0,   820,     0,   -27,     0,     0, 
          0,     0,   -64,     0,  1955,     0,     0,     0,     0,     0, 
          0,   458,     0,   711,     0,   748,     0,  1620,   749,   750, 
        312,   796,   318,     0,  1620,     0,     0,     0,   587,     0, 
          0,   170,    11,    20,    36,    73,    80,   228,   232,   255, 
        305,   520,   935,   853,     0,  4026,  1445,  2432,     0,  4080, 
          0,  4137,     0,     0,   -22,   278,     0,     0,   906,  2044, 
       3657,  3694,  3237,  3358,  3426,     0,  2218,  1593,     0,   752, 
          0,     0,   766,     0,     0,     0,     0,     0,     0,     0, 
        725,     0,    99,     0,     0,    38,     0,     0,     0,     0, 
        796,     0,   726,     0,     0,     0,     0,     0,     0,   879, 
          0,     0,  1620,     0,   966,   968,  3753,  3879,  3905,  3921, 
          0,     0,   796,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,  -107,     0, 
          0,     0,     0,   731,     0,     0,   797,     0,     0,     0, 
          0,     0,  -116,     0,     0,     0,  1620,   725,   730,     0, 
          0,   796,     0,  4153,     0,     0,   796,   799,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   821,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -64,     0, 
        995,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        725,   442,     0,     0,     0,   806,     0,   725,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   832,     0,   833,   833,     0,     0,   426,     0, 
          0,     0,     0,     0,    38,     0,     0,  1620,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        511,     0,     0,     0,     0,     0,     0,     0,     0,    90, 
          0,     0,   116,     0,     0,   836,     0,   821,     0,     0, 
        725,     0,     0,     0,     0,     0,   462,     0,   725,   806, 
          0,     0,     0,     0,     0,     0,     0,   482,     0,   725, 
        116,     0,     0,     0,     0,     0,   845,    90,    90,     0, 
          0,     0,     0,     0,   249,     0,     0,     0,     0,     0, 
          0,     0,     0,   375,   763,     0,     0,     0,     0,     0, 
        725,     0,     0,     0,    90,     0,     0,     0,     0,     0, 
          0,     0,   796,     0,     0,     0,     0,     0,     0,     0, 
        768,     0,     0,     0,     0,     0,     0,     0,     0,   725, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   -96,     0,     0, 
          0,     0,   -96,     0,     0,     0,     0,   725,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   888,     0,     0,   802, 
          0,   683,   893,   -49,     0,   831,   809,   -29,     0,     0, 
          0,     0,  -105,  -388,     0,     0,     0,  3761,     0,   594, 
          0,     0,    55,   -34,   -55,     0,     0,   -63,  -385,   452, 
        459,     0,  -158,   -89,     0,   419,     0,     0,     0,     0, 
        859,   864,     0,     0,   815,   -32,   710,     0,   315,   -70, 
          0,     0,  -474,     0,     0,   127,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   464, 
        451,     0,   369,     0,     0,     0,     0,     0,   404,   407, 
          0,     0,     0,     0,     0,   780,   781,   644,     0,  -108, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   612,     0,     0,     0,   733,     0,   754, 
          0,     0,     0,     0,     0,     0,   817,     0,   948, 
    );
    protected static $yyTable = array(11,
         85,   211,    68,    69,    70,   156,   589,    32,    41,   292, 
        103,   490,   103,    28,   103,   243,   227,   107,   243,   448, 
        492,   243,   456,   103,    42,    43,   530,   149,   106,   153, 
         48,   534,   380,   147,   148,   243,   243,   171,   243,   110, 
        243,   113,    55,    29,   171,     1,   209,    67,    67,    67, 
         29,   200,   224,   105,   200,    72,     5,    75,    76,     9, 
        231,   113,   170,   231,   244,   227,   494,    84,   200,   200, 
        243,   243,    46,   170,   205,   491,   232,   231,   231,   232, 
        573,    34,   203,    67,    67,    10,    67,   201,   199,    12, 
        200,   170,   202,   232,   232,   514,    34,   227,    10,   586, 
         33,   243,   243,   200,   154,   195,    67,   197,   113,    29, 
        592,   102,   231,   233,   118,   379,   233,   220,   236,   105, 
        234,   540,   155,   234,   297,   170,   320,   223,   232,   312, 
        233,   233,    77,   237,    30,   200,   316,   234,   234,   103, 
        247,    50,    31,   299,   231,   294,   219,    67,    98,    67, 
        133,    73,    47,    67,   286,   451,    59,   170,    19,    59, 
        232,     9,    34,    67,    19,   233,   321,   309,    19,   299, 
         67,   205,   234,   162,   163,   164,   165,   166,   167,     9, 
        169,     9,   310,     9,   174,   541,   482,     9,   297,    19, 
         51,    35,   303,   305,   205,   299,   483,   233,   295,    67, 
         73,    28,    44,    67,   234,    10,   322,    10,    59,    10, 
        199,    45,    98,   199,   373,   299,   295,    19,    10,   332, 
        203,   299,   590,    67,   241,   201,   243,   199,   199,    56, 
        202,   252,   253,   254,   255,   256,   257,   258,   259,   260, 
        261,   262,   263,   264,   266,   267,   268,   270,   272,   275, 
        276,   279,   280,   281,   282,   283,   284,   285,   414,   287, 
         56,   246,   199,   440,   304,   107,   107,   299,   235,    57, 
        264,   235,   237,    73,    61,   237,   106,   106,   317,   208, 
        363,   165,    63,   165,   247,   235,   235,    29,   165,   237, 
        237,   165,   153,   165,   199,   236,   133,    64,   236,    62, 
         57,    78,    79,    80,    81,    82,    83,   420,     9,   205, 
        224,    71,   236,   236,    67,   245,   295,   296,   245,   539, 
        235,   245,   297,   325,   237,   326,    88,   327,   328,   409, 
        439,   329,   330,    58,    10,   245,   245,   352,   245,   165, 
        245,    84,   224,    29,   264,   238,    98,   236,   238,   495, 
        206,   207,   235,    89,   103,   229,   237,   204,    19,   543, 
        544,   230,   238,   238,    58,   133,   101,   133,   315,   100, 
        245,   245,   369,   165,   165,   210,   208,    91,   374,   236, 
        204,   243,   243,   243,   243,   243,   568,   133,   243,   243, 
         67,   243,   243,   243,   243,   243,   243,   238,    77,   208, 
         67,   245,   245,    94,   229,   465,   538,   154,   464,   154, 
        230,    95,   486,   486,   154,   410,   331,   154,    19,   154, 
        477,   295,   296,   476,   200,   200,   133,   516,    97,   238, 
         19,   133,   264,   231,   231,   425,   229,   364,    19,   365, 
         67,    67,   230,    98,   153,   198,   196,   206,   207,   232, 
        232,   517,    99,   566,   567,   537,   193,   194,   111,   376, 
        449,   354,   113,   300,   115,   154,    60,   203,   192,    60, 
        206,   207,   201,   199,   151,   200,    67,   202,   581,    67, 
        133,   468,   137,    67,    60,   137,   233,   233,   473,   474, 
        195,   152,   197,   234,   234,   204,   153,    48,   417,   154, 
        154,    46,   138,   419,   153,   138,   299,    67,   165,   165, 
        165,   165,   165,   165,   208,   157,    46,   497,    60,   582, 
        158,   355,   141,     9,   191,   141,    38,    39,    40,   508, 
        299,   299,   299,   356,   165,   522,   523,   160,   121,   595, 
        131,   357,   172,   299,   175,   130,   558,   559,   119,    10, 
        120,   176,   467,   216,   133,   217,   205,   531,   218,   533, 
        239,   165,   221,   239,    67,   232,   301,   146,    79,    80, 
         81,    82,    83,   302,   308,   311,   313,   239,   239,   314, 
         46,   318,    46,   199,    67,   206,   207,   319,   165,   165, 
        165,   165,   324,   564,   165,   484,    77,   334,   170,   351, 
        353,   359,   361,   440,   367,   372,   375,   133,   165,   165, 
        165,   165,   239,   165,   165,   390,   391,   394,   165,   165, 
        165,   165,   165,   396,   397,   406,   529,   405,   428,   587, 
        408,   122,   300,   411,   154,   154,   154,   154,   154,   154, 
        412,   235,   235,   413,   239,   237,   237,   416,   418,   422, 
        165,   165,   121,   426,   131,   427,   431,   432,   300,   130, 
        154,   433,   119,   393,   120,   434,   435,   436,   236,   236, 
        447,   450,   300,   300,   300,   451,   457,   459,   165,   571, 
        460,   245,   245,   245,   245,   245,   461,   154,   245,   245, 
        463,   245,   245,   245,   245,   245,   245,   470,   429,   471, 
        478,   213,   213,   475,   300,   213,   213,   213,   213,   213, 
         77,   213,   299,   479,   154,   154,   154,   154,   238,   238, 
        154,   480,   213,   213,   213,   213,   213,   213,   481,   496, 
        489,   499,   500,   503,   154,   154,   154,   154,   299,   154, 
        154,   504,   204,   502,   154,   122,   154,   154,   154,   505, 
        511,   510,   299,   299,   299,   213,   512,   213,   213,   515, 
        518,   208,    14,   519,   532,   161,    79,    80,    81,    82, 
         83,   535,   545,   402,   546,   552,   154,   154,   400,   398, 
        553,   399,   563,   401,   299,   569,   570,   556,   213,   213, 
        213,    10,   572,   577,   580,   585,   227,   588,   596,   591, 
        598,   600,   276,   276,   154,    12,   276,   276,   276,   276, 
        276,   276,   276,    32,    16,   429,   213,    30,   126,   169, 
        429,    43,   173,   276,   276,   276,   276,   276,   276,   207, 
        198,   196,   206,   207,   171,    42,   169,   171,   286,   287, 
        288,   193,   194,   208,   173,   129,   335,   336,   337,   106, 
        169,   125,   171,    53,   205,    59,   276,   173,   276,   276, 
        173,    89,   403,   173,   169,   338,   339,   340,   341,   429, 
        342,   343,    90,    86,   142,   344,    88,   345,   173,   161, 
         79,    80,    81,    82,    83,    87,   171,   144,   429,   276, 
        276,   276,   145,   174,    28,   117,   174,   293,    24,   429, 
         93,   116,   362,   493,   487,    10,   520,   123,   124,    66, 
        174,   174,   173,    65,   150,   180,   180,   289,   171,   180, 
        180,   180,   180,   180,   180,   180,   509,   498,   550,   578, 
        371,   551,   126,   239,   239,   346,   180,   180,   180,   180, 
        180,   180,    14,   244,   173,   174,   244,   239,   240,   244, 
        297,    15,    16,    17,   225,    19,    20,   366,    21,   129, 
        335,   336,   337,   244,   244,   125,   244,   291,   244,   180, 
        222,   180,   180,    41,    22,   240,   213,   174,   240,   338, 
        339,   340,   341,     0,   342,   343,     0,     0,     0,   344, 
          0,   345,   240,   240,     0,   213,     0,     0,   244,   244, 
          0,     0,   180,   180,   180,   226,   249,     0,   250,   249, 
          0,   250,    14,     0,     0,     0,     0,     0,     0,     0, 
          0,   123,   124,   249,   249,   250,   250,   240,     0,   244, 
        244,    34,    34,     0,     0,    34,    34,    34,    34,    34, 
         34,    34,     0,     0,     0,     0,   300,     0,     0,   346, 
          0,     0,    34,    34,    34,    34,    34,    34,   249,   240, 
        250,     0,     0,     0,   213,   213,   213,   213,   213,   213, 
        213,   213,   213,     0,    19,   213,   213,   276,   213,   213, 
        213,   213,   213,   213,   213,    34,     0,    34,    34,     0, 
        249,     0,   250,     0,     0,     0,   276,     0,     0,   213, 
        213,     0,     0,     0,   213,   213,   213,   213,     0,   213, 
          0,     0,     0,     0,     0,     0,     0,     0,    34,    34, 
         34,     0,   213,   213,   213,   213,     0,     0,     0,     0, 
          0,    15,    16,    17,    18,    19,    20,     0,    21,   121, 
          0,   131,     0,     0,     0,     0,   130,     0,     0,   119, 
          0,   120,     0,   213,    22,   213,   213,     0,     0,     0, 
          0,     0,     0,     0,   118,   276,   276,   276,   276,   276, 
        276,   276,   276,   276,     0,     0,   276,   276,     0,   276, 
        276,   276,   276,   276,   276,   276,   213,     0,   213,     0, 
        180,    15,    16,    17,    18,    19,    20,    77,    21,     0, 
          0,    15,    16,    17,   225,    19,    20,     0,    21,   180, 
          0,     0,   220,   220,    22,     0,     0,   220,   220,   220, 
        220,   220,   220,     0,    22,     0,     0,     0,     0,     0, 
          0,     0,   122,     5,     0,   220,   220,   220,   220,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   203,   192,     0,     0,   226,   201,   199,     0,   200, 
          0,   202,     0,     0,     0,     0,   220,     0,   220,   220, 
          0,     0,     0,     0,   195,     0,   197,     0,   180,   180, 
        180,   180,   180,   180,   180,   180,   180,     0,     0,   180, 
        180,     0,   180,   180,   180,   180,   180,   180,   180,   220, 
         14,   220,     0,     0,     0,     0,    34,     0,   191,   244, 
        244,   244,   244,   244,     0,     0,   244,   244,     0,   244, 
        244,   244,   244,   244,   244,    34,     0,     0,     0,    19, 
         19,     0,    19,    19,    19,    19,    19,    19,   190,    19, 
        205,     0,     0,     0,     0,     0,     0,     0,   240,   240, 
         19,    19,    19,    19,    19,    19,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   127,   128,    80,    81, 
         82,    83,     0,     0,   213,     0,     0,     0,     0,   249, 
        249,   250,   250,    19,     0,    19,    19,     0,     0,     0, 
          0,     0,    10,   213,    34,    34,    34,    34,    34,    34, 
         34,    34,    34,     0,     0,    34,    34,     0,    34,    34, 
         34,    34,    34,    34,    34,    19,    19,    19,    19,   126, 
          0,     0,     5,     5,     5,     5,     5,     5,     0,     5, 
        203,     0,     0,     0,     0,   201,   199,     0,   200,     0, 
        202,     0,     5,     5,     5,     5,   129,     0,     0,     0, 
          0,     0,   125,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   213,   213,   213,   213,   213,   213,   213,   213, 
        213,     0,    19,   213,   213,     0,   213,   213,   213,   213, 
        213,   213,   213,     0,     0,   259,     0,   220,   259,    15, 
         16,    17,   225,    19,    20,     0,    21,     0,     0,     0, 
          0,     0,   259,   259,     0,   259,   220,   259,   123,   124, 
        289,   289,    22,   289,   289,   289,   289,   289,   289,   205, 
        289,     0,     0,     0,     0,     0,   204,     0,     0,     0, 
          0,   289,   289,     0,   289,   289,   289,   259,   259,     0, 
          0,     0,     0,   226,     0,   208,     0,     0,     0,    19, 
          0,     0,    19,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   289,     0,   289,   289,   259,   259, 
          0,     0,     0,     0,     0,   220,   220,   220,   220,   220, 
        220,   220,   220,   220,     0,     0,   220,   220,     0,   220, 
        220,   220,   220,   220,   220,   220,   289,   289,   289,   289, 
          0,     0,    19,    19,    19,     0,     0,     0,     0,     0, 
          0,     0,    19,     0,   198,   196,   206,   207,     0,     0, 
          0,     0,    19,    19,    19,   193,   194,     0,     0,    96, 
         96,     0,    19,    96,    96,    96,    96,    96,     0,    96, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         96,    96,    96,    96,    96,     0,   270,   270,     0,     0, 
        270,   270,   270,   270,   270,     0,   270,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   270,   270,   270, 
        270,   270,   270,     0,     0,    96,    96,     0,     0,     0, 
          0,     0,    19,    19,    19,    19,    19,    19,    19,    19, 
         19,     0,    19,    19,    19,   204,    19,    19,    19,    19, 
         19,    19,   270,   270,     0,     0,    96,    96,    96,     0, 
          0,     0,    14,     0,   208,     0,     0,     0,     0,     0, 
        289,     0,     0,   289,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   270,   270,   270,     0,     0,     0,     0, 
          0,     0,     0,   272,   272,     0,   454,   272,   272,   272, 
        272,   272,     0,   272,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   272,   272,   272,   272,   272,   272, 
          0,     0,     0,   289,   289,   289,     0,     0,     0,     0, 
          0,     0,     0,   289,     0,   206,   207,     0,     0,     0, 
          0,     0,     0,   289,   289,   289,     0,     0,     0,   272, 
        272,   264,   264,   289,     0,   264,   264,   264,   264,   264, 
          0,   264,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   264,   264,   264,   264,   264,   264,     0,     0, 
        272,   272,   272,     0,     0,     0,     0,     0,   259,   259, 
        259,   259,   259,     0,     0,     0,     0,     0,   259,   259, 
        259,   259,   259,   259,     0,     0,     0,   264,   264,     0, 
          0,     0,     0,   289,   289,   289,   289,   289,   289,   289, 
        289,   289,     0,     0,   289,   289,     0,   289,   289,   289, 
        289,   289,   289,     0,     0,     0,     0,     0,   264,   264, 
          0,     0,     2,     0,    96,     0,     0,     0,     0,     0, 
          0,    15,    16,    17,   225,    19,    20,     0,    21,     0, 
          0,     0,    96,    96,     0,     0,     0,     0,     0,     0, 
          0,   270,    96,     0,    22,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        270,     0,     0,     0,     0,     0,   265,   265,     0,     0, 
        265,   265,   265,   265,   265,   226,   265,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   265,   265,   265, 
        265,   265,   265,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    96,    96,    96,    96,    96,    96,    96,    96, 
         96,     0,     0,    96,    96,     0,    96,    96,    96,    96, 
         96,    96,   265,   265,     0,     0,     0,     0,     0,   270, 
        270,   270,   270,   270,   270,   270,   270,   270,   272,     0, 
        270,   270,     0,   270,   270,   270,   270,   270,   270,     0, 
          0,     0,     0,   265,   265,   307,     0,   272,     0,     0, 
          0,     0,     0,   263,   263,     0,     0,   263,   263,   263, 
        263,   263,     0,   263,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   263,   263,   263,   263,   263,   263, 
          0,   246,     0,     0,   246,     0,   264,   246,     0,     0, 
          0,     2,     2,     2,     2,     2,     2,     0,     2,     0, 
          0,   246,   246,     0,   246,     0,   246,     0,     0,   263, 
        263,     2,     2,     2,     0,     2,   272,   272,   272,   272, 
        272,   272,   272,   272,   272,     0,     0,   272,   272,     0, 
        272,   272,   272,   272,   272,   272,   246,   246,   266,   266, 
        263,   263,   266,   266,   266,   266,   266,     0,   266,     0, 
          0,     0,     0,     0,     6,     0,     0,     0,     0,   266, 
        266,   266,   266,   266,   266,     0,     0,   246,   246,     0, 
          0,     0,     0,     0,   264,   264,     0,     0,   264,   264, 
        264,   264,   264,     0,     0,   264,   264,     0,   264,   264, 
        264,   264,   264,   264,   266,   266,   267,   267,     0,     0, 
        267,   267,   267,   267,   267,     0,   267,     0,     0,     0, 
          0,     0,     0,     0,   307,     0,     0,   267,   267,   267, 
        267,   267,   267,     0,     0,   266,   266,     0,     0,     0, 
          0,   265,     0,     0,   307,   307,   307,   307,   307,   307, 
        307,   307,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   267,   267,   256,   256,     0,   307,   256,   256, 
        256,   256,   256,     0,   256,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   256,   256,   256,   256,   256, 
        256,     0,     0,   267,   267,     0,   307,     0,     0,     0, 
          0,     0,     0,   203,     0,     0,     0,     0,   201,   199, 
          0,   200,     0,   202,     0,     0,     0,     0,     0,     0, 
        256,   256,     0,     0,     0,     0,   195,     0,   197,   265, 
        265,     0,     0,   265,   265,   265,   265,   265,   263,     0, 
        265,   265,     0,   265,   265,   265,   265,   265,   265,     0, 
          0,   256,   256,     6,     6,     6,     6,     6,     6,     0, 
          6,   203,   192,     0,     0,   245,   201,   199,     0,   200, 
          0,   202,     0,     6,     6,     6,     6,     0,     0,     0, 
          0,     0,     0,     0,   195,   179,   197,   189,     0,   203, 
        192,     0,   205,     0,   201,   199,     0,   200,     0,   202, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   392,   195,   179,   197,   189,     0,     0,   191,     0, 
          0,     0,     0,   266,     0,     0,   263,   263,     0,     0, 
        263,   263,   263,   263,   263,     0,     0,   263,   263,     0, 
        263,   263,   263,   263,   263,   263,   191,     0,   190,     0, 
        205,     0,     0,     0,     0,     0,     0,   246,   246,   246, 
        246,   246,     0,     0,   246,   246,     0,   246,   246,   246, 
        246,   246,   246,     0,     0,     0,   190,     0,   205,   258, 
          0,   267,   258,     0,     0,   258,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   258, 
        258,     0,   258,     0,   258,     0,     0,     0,     0,     0, 
          0,   266,   266,     0,     0,   266,   266,   266,   266,   266, 
          0,     0,   266,   266,     0,   266,   266,   266,   266,   266, 
        266,     0,   203,   192,   258,   258,   455,   201,   199,   256, 
        200,     0,   202,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   195,   179,   197,   189,     0, 
          0,     0,     0,     0,     0,   258,   258,     0,     0,   267, 
        267,     0,     0,   267,   267,   267,   267,   267,   204,     0, 
        267,   267,     0,   267,   267,   267,   267,   267,   267,   191, 
        203,   192,     0,     0,     0,   201,   199,   208,   200,     0, 
        202,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   466,   195,   179,   197,   189,     0,     0,   190, 
          0,   205,     0,     0,     0,     0,     0,   256,   256,     0, 
          0,   256,   256,   256,   256,   256,   204,     0,   256,   256, 
          0,   256,   256,   256,   256,   256,   256,   191,   203,   192, 
          0,     0,     0,   201,   199,   208,   200,     0,   202,     0, 
          0,     0,     0,     0,   204,     0,   198,   196,   206,   207, 
          0,   195,     0,   197,     0,     0,     0,   190,     0,   205, 
          0,     0,     0,   208,     0,     0,     0,   203,   192,     0, 
          0,   501,   201,   199,     0,   200,     0,   202,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        195,   179,   197,   189,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   198,   196,   206,   207,   180,   181, 
        182,   183,   185,     0,     0,   193,   194,   205,   177,   178, 
        184,   187,   186,   188,   191,     0,     0,     0,     0,     0, 
          0,     0,   198,   196,   206,   207,   180,   181,   182,   183, 
        185,     0,     0,   193,   194,     0,   177,   178,   184,   187, 
        186,   188,     0,     0,   190,     0,   205,     0,     0,     0, 
          0,     0,     0,     0,     0,   203,   192,     0,     0,   506, 
        201,   199,     0,   200,     0,   202,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   204,   195,   179, 
        197,   189,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   208,     0,   203,   192, 
          0,     0,   507,   201,   199,     0,   200,     0,   202,     0, 
          0,     0,   191,     0,     0,   258,   258,   258,   258,   258, 
          0,   195,   179,   197,   189,   258,   258,   258,   258,   258, 
        258,     0,     0,   203,   192,   204,     0,   554,   201,   199, 
          0,   200,   190,   202,   205,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   208,   191,   195,   179,   197,   189, 
          0,     0,     0,     0,     0,   198,   196,   206,   207,   180, 
        181,   182,   183,   185,     0,     0,   193,   194,     0,   177, 
        178,   184,   187,   186,   188,   190,     0,   205,     0,     0, 
        191,     0,     0,   204,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   208,     0,     0,     0,     0,     0,     0,     0, 
        190,     0,   205,   198,   196,   206,   207,   180,   181,   182, 
        183,   185,   204,     0,   193,   194,     0,   177,   178,   184, 
        187,   186,   188,     0,     0,     0,     0,     0,     0,     0, 
          0,   208,     0,   203,   192,     0,     0,   555,   201,   199, 
          0,   200,     0,   202,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   195,   179,   197,   189, 
          0,   198,   196,   206,   207,     0,     0,     0,     0,   203, 
        192,     0,   193,   194,   201,   199,     0,   200,     0,   202, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        191,   579,   195,   179,   197,   189,     0,     0,     0,     0, 
        198,   196,   206,   207,   180,   181,   182,   183,   185,     0, 
        204,   193,   194,     0,   177,   178,   184,   187,   186,   188, 
        190,     0,   205,     0,     0,     0,   191,     0,     0,   208, 
          0,     0,     0,     0,     0,     0,     0,     0,   262,   262, 
          0,     0,   262,   262,   262,   262,   262,     0,   262,     0, 
          0,     0,     0,   204,     0,     0,   190,     0,   205,   262, 
        262,   262,   262,   262,   262,     0,     0,     0,     0,     0, 
          0,     0,   208,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   204,     0, 
          0,     0,     0,     0,   262,   262,     0,     0,   198,   196, 
        206,   207,   180,   181,   182,   183,   185,   208,     0,   193, 
        194,     0,   177,   178,   184,   187,   186,   188,     0,     0, 
          0,     0,     0,     0,     0,   262,   262,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,   196,   206,   207,   180,   181,   182,   183,   185, 
          0,     0,   193,   194,     0,   177,   178,   184,   187,   186, 
        188,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   196,   206,   207, 
        180,   181,   182,   183,   185,     0,     0,   193,   194,     0, 
        177,   178,   184,   187,   186,   188,   203,   192,     0,     0, 
          0,   201,   199,     0,   200,     0,   202,     0,   204,     0, 
          0,     0,     0,     0,     0,     0,     0,   593,     0,   195, 
        179,   197,   189,     0,     0,     0,     0,   208,     0,     0, 
          0,     0,     0,   253,   253,     0,     0,   253,   253,   253, 
        253,   253,     0,   253,   204,     0,     0,     0,     0,     0, 
          0,     0,     0,   191,   253,   253,   253,   253,   253,   253, 
          0,     0,     0,   208,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   190,     0,   205,     0,     0,     0,   253, 
        253,     0,     0,     0,     0,     0,   198,   196,   206,   207, 
        180,   181,   182,   183,   185,     0,     0,   193,   194,     0, 
        177,   178,   184,   187,   186,   188,     0,     0,     0,     0, 
        253,   253,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   198,   196,   206,   207,   180,   181,   182,   183, 
        185,     0,     0,   193,   194,     0,   177,   178,   184,   187, 
        186,   188,     0,     0,   254,   254,     0,     0,   254,   254, 
        254,   254,   254,     0,   254,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   254,   254,   254,   254,   254, 
        254,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   262,   262,     0,     0,   262,   262,   262,   262,   262, 
        254,   254,   262,   262,     0,   262,   262,   262,   262,   262, 
        262,     0,   255,   255,     0,     0,   255,   255,   255,   255, 
        255,     0,   255,     0,     0,     0,     0,     0,     0,     0, 
          0,   254,   254,   255,   255,   255,   255,   255,   255,     0, 
          0,   203,   192,     0,     0,     0,   201,   199,     0,   200, 
          0,   202,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   204,     0,     0,   195,   179,   197,   189,   255,   255, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        208,     0,     0,   203,   192,     0,     0,     0,   201,   199, 
          0,   200,     0,   202,     0,     0,     0,     0,   191,   255, 
        255,     0,     0,     0,     0,     0,   195,   179,   197,   189, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   190,     0, 
        205,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        191,     0,     0,     0,     0,     0,     0,     0,     0,   198, 
        196,   206,   207,   180,   181,   182,   183,   185,     0,     0, 
        193,   194,     0,   177,   178,   184,   187,   186,   188,     0, 
        190,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   253,   253,     0,     0, 
        253,   253,   253,   253,   253,     0,     0,   253,   253,     0, 
        253,   253,   253,   253,   253,   253,   203,   192,     0,     0, 
          0,   201,   199,     0,   200,     0,   202,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   195, 
        179,   197,   189,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   251,     0,     0,   251,     0,   251, 
        251,   251,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   191,   251,   251,   251,   251,   251,   251, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   252,     0,     0,   252,     0,   252,   252,   252,     0, 
          0,     0,     0,   190,     0,   205,     0,     0,     0,   251, 
        251,   252,   252,   252,   252,   252,   252,   254,   254,     0, 
          0,   254,   254,   254,   254,   254,   204,     0,   254,   254, 
          0,   254,   254,   254,   254,   254,   254,     0,     0,     0, 
        251,   251,     0,     0,     0,   208,   252,   252,     0,     0, 
        261,     0,     0,   261,     0,     0,   261,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   204,     0, 
        261,   261,     0,   261,     0,   261,     0,   252,   252,     0, 
          0,     0,     0,     0,     0,   255,   255,   208,     0,   255, 
        255,   255,   255,   255,     0,     0,   255,   255,     0,   255, 
        255,   255,   255,   255,   255,   261,   261,     0,     0,     0, 
          0,     0,     0,     0,   198,   196,   206,   207,   180,   181, 
        182,   183,   185,     0,     0,   193,   194,     0,   177,   178, 
        184,   187,   186,   188,     0,     0,   261,   261,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   196,   206,   207, 
        180,   181,   182,   183,   185,     0,     0,   193,   194,     0, 
          0,   178,   184,   187,   186,   188,   242,     0,     0,   242, 
          0,     0,   242,     0,     0,     0,     0,     0,     0,     0, 
          0,   204,     0,     0,     0,     0,   242,   242,     0,   242, 
          0,   242,   260,     0,     0,   260,     0,     0,   260,     0, 
        208,     0,     0,     0,     0,     0,     0,     0,   241,     0, 
          0,   241,   260,   260,   241,   260,     0,   260,     0,     0, 
          0,   242,   242,     0,     0,     0,     0,     0,   241,   241, 
          0,   241,     0,   241,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   260,   260,     0, 
          0,     0,   242,   242,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   241,   241,     0,     0,     0,     0,   198, 
        196,   206,   207,   180,   181,   182,   183,   185,   260,   260, 
        193,   194,     0,     0,     0,   184,   187,   186,   188,     0, 
          0,     0,     0,     0,   241,   241,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   251,   251,     0,     0, 
        251,   251,   251,   251,   251,     0,   257,   251,   251,   257, 
        251,   251,   251,   251,   251,   251,     0,     0,     0,     0, 
          0,     0,     0,   257,   257,     0,   257,     0,   257,     0, 
          0,     0,     0,   252,   252,     0,     0,   252,   252,   252, 
        252,   252,     0,     0,   252,   252,     0,   252,   252,   252, 
        252,   252,   252,     0,     0,     0,     0,   247,   257,     0, 
        247,     0,     0,   247,     0,     0,     0,     0,   415,     0, 
          0,     0,     0,     0,     0,     0,     0,   247,   247,     0, 
        247,     0,   247,     0,     0,     0,     0,     0,     0,   257, 
        257,     0,     0,     0,     0,     0,   261,   261,   261,   261, 
        261,     0,     0,   261,   261,     0,   261,   261,   261,   261, 
        261,   261,   247,   247,   248,     0,     0,   248,     0,     0, 
        248,   462,     0,     0,     0,     0,     0,     0,   469,     0, 
          0,     0,     0,   198,   248,   248,   198,   248,     0,   248, 
          0,     0,     0,   247,   247,     0,     0,     0,     0,     0, 
        198,   198,     0,   198,     0,   198,     0,     0,     0,     0, 
          0,   121,     0,   131,     0,     0,     0,     0,   130,   248, 
        248,   119,     0,   120,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   198,     0,     0,   273,     0, 
          0,   521,     0,     0,     0,     0,     0,     0,     0,   528, 
        248,   248,     0,     0,     0,     0,     0,     0,     0,     0, 
        536,     0,     0,     0,     0,     0,     0,   198,     0,    77, 
          0,     0,   242,   242,   242,   242,   242,     0,     0,   242, 
        242,     0,   242,   242,   242,   242,   242,   242,     0,     0, 
          0,   565,     0,     0,     0,     0,     0,     0,   260,   260, 
        260,   260,   260,     0,   122,   260,   260,     0,   260,   260, 
        260,   260,   260,   260,   241,   241,   241,   241,   241,     0, 
        584,   241,   241,     0,   241,   241,   241,   241,   241,   241, 
          0,     0,     0,     0,     0,   121,     0,   131,   594,     0, 
          0,     0,   130,   597,   121,   119,   131,   120,   599,     0, 
          0,   130,     0,     0,   119,   121,   120,   131,     0,     0, 
          0,     0,   130,     0,   277,   119,     0,   120,     0,     0, 
          0,     0,   269,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   271,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    77,     0,     0,     0,     0,     0,   121, 
          0,   131,    77,     0,     0,     0,   130,     0,     0,   119, 
          0,   120,     0,    77,     0,     0,     0,     0,     0,   257, 
        257,   257,   257,   257,     0,     0,     0,     0,   122,   257, 
        257,   257,   257,   257,   257,     0,     0,   122,   161,    79, 
         80,    81,    82,    83,     0,     0,     0,     0,   122,     0, 
          0,     0,     0,     0,     0,     0,     0,    77,   121,     0, 
        131,     0,     0,     0,    10,   130,     0,     0,   119,     0, 
        120,     0,     0,   247,   247,   247,   247,   247,     0,     0, 
          0,     0,     0,   247,   247,   247,   247,   247,   247,   368, 
          0,   126,   122,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    77,     0,   129,     0, 
          0,     0,     0,     0,   125,     0,     0,     0,     0,     0, 
        248,   248,   248,   248,   248,     0,     0,     0,     0,     0, 
        248,   248,   248,   248,   248,   248,   198,   198,   198,   198, 
        198,   122,     0,     0,     0,     0,   198,   198,   198,   198, 
        198,   198,   161,    79,    80,    81,    82,    83,     0,     0, 
          0,   161,    79,    80,    81,    82,    83,     0,     0,   274, 
        123,   124,   161,    79,    80,    81,    82,    83,    10,     0, 
          0,     0,     0,     0,     0,     0,     0,    10,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    10,     0, 
          0,     0,     0,     0,     0,   126,     0,     0,     0,     0, 
          0,     0,     0,     0,   126,     0,   161,    79,    80,    81, 
         82,    83,     0,     0,     0,   126,     0,     0,     0,     0, 
          0,     0,   129,     0,     0,     0,     0,     0,   125,     0, 
          0,   129,    10,     0,     0,     0,     0,   125,     0,     0, 
          0,     0,   129,     0,     0,     0,     0,     0,   125,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   126, 
          0,     0,     0,     0,     0,   161,    79,    80,    81,    82, 
         83,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   278,     0,   123,   124,   129,     0,     0,     0, 
          0,    10,   125,   123,   124,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   123,   124,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   126,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   129,     0,     0,   123,   124, 
          0,   125,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   123,   124, 
    );
    protected static $yyCheck = array(4,
         64,    46,    52,    53,    54,   111,   124,    12,   125,    40, 
         91,    59,    91,   123,    91,    38,    44,   125,    41,   405, 
        125,    44,   411,    91,    29,    30,   501,   260,   125,    91, 
         35,   506,    40,    97,    98,    58,    59,    40,    61,    89, 
         63,    91,    42,    46,    40,   303,    91,    52,    53,    54, 
         46,    41,   158,    88,    44,    42,   304,    62,    63,   260, 
         41,   111,    58,    44,   173,    93,   455,   300,    58,    59, 
         93,    94,   260,    41,   126,   123,    41,    58,    59,    44, 
        555,    44,    37,    88,    89,   286,    91,    42,    43,   283, 
         45,    59,    47,    58,    59,   481,    59,   125,   286,   574, 
        286,   124,   125,    93,    44,    60,   111,    62,   158,    46, 
        585,    63,    93,    41,    58,   123,    44,   152,   168,   154, 
         41,    59,    62,    44,    59,    93,   260,   157,    93,   238, 
         58,    59,    91,   168,    46,   125,   245,    58,    59,    91, 
        175,    44,    59,   260,   125,   216,   151,   152,    59,   154, 
         96,    44,   340,   158,   204,   260,    41,   125,    60,    44, 
        125,   260,   125,   168,    40,    93,   300,    44,    44,   286, 
        175,   126,    93,   119,   120,   121,   122,   123,   124,   260, 
        126,   260,    59,   260,   130,   123,   330,   286,   123,    91, 
         93,    64,   260,   228,   126,   260,   340,   125,    44,   204, 
         93,   311,   410,   208,   125,   286,   340,   286,    93,   286, 
         41,   260,   123,    44,   323,   332,    62,    93,   286,   290, 
         37,   286,   340,   228,   170,    42,   172,    58,    59,   260, 
         47,   177,   178,   179,   180,   181,   182,   183,   184,   185, 
        186,   187,   188,   189,   190,   191,   192,   193,   194,   195, 
        196,   197,   198,   199,   200,   201,   202,   203,   367,   205, 
        260,   340,    93,   340,   332,   373,   374,   332,    41,   300, 
        216,    44,    41,   260,    46,    44,   373,   374,   340,   331, 
        310,    33,    58,    35,   319,    58,    59,    46,    40,    58, 
         59,    43,    91,    45,   125,    41,   242,    40,    44,    58, 
        300,   260,   261,   262,   263,   264,   265,   378,   260,   126, 
         93,    59,    58,    59,   319,    38,   260,   261,    41,   257, 
         93,    44,   257,   269,    93,   271,    60,   273,   274,   359, 
        394,   277,   278,   364,   286,    58,    59,    40,    61,    91, 
         63,   300,   125,    46,   290,    41,   257,    93,    44,   458, 
        402,   403,   125,   310,    91,    44,   125,   312,   260,   518, 
        519,    44,    58,    59,   364,   311,    41,   313,   242,    44, 
         93,    94,   318,   125,   126,   420,   331,   310,   324,   125, 
        312,   404,   405,   406,   407,   408,   545,   333,   411,   412, 
        395,   414,   415,   416,   417,   418,   419,    93,    91,   331, 
        405,   124,   125,    46,    93,    41,   512,    33,    44,    35, 
         93,    59,   445,   446,    40,   361,    63,    43,   320,    45, 
         41,   260,   261,    44,   414,   415,   372,   483,    61,   125, 
        332,   377,   378,   414,   415,   381,   125,   311,   340,   313, 
        445,   446,   125,    61,    91,   400,   401,   402,   403,   414, 
        415,   484,    41,   543,   544,   511,   411,   412,   311,   333, 
        406,   260,   512,    91,   123,    91,    41,    37,    38,    44, 
        402,   403,    42,    43,   310,    45,   481,    47,   568,   484, 
        426,   427,    41,   488,    59,    44,   414,   415,   434,   435, 
         60,    58,    62,   414,   415,   312,    91,    40,   372,   125, 
        126,    44,    41,   377,    91,    44,    93,   512,   260,   261, 
        262,   263,   264,   265,   331,   123,    59,   463,    93,   569, 
         44,   320,    41,   260,    94,    44,   300,   301,   302,   475, 
        300,   301,   302,   332,   286,   344,   345,   123,    33,   589, 
         35,   340,    58,    91,   123,    40,   373,   374,    43,   286, 
         45,   410,   426,    44,   500,    93,   126,   503,    44,   505, 
         41,   313,    93,    44,   569,   260,   123,   260,   261,   262, 
        263,   264,   265,   260,   125,    40,   123,    58,    59,   123, 
        123,   257,   125,   414,   589,   402,   403,    44,   340,   341, 
        342,   343,    58,   539,   346,   332,    91,    40,    58,   260, 
        260,   123,    40,   340,    41,    40,    93,   553,   360,   361, 
        362,   363,    93,   365,   366,    40,   125,    61,   370,   371, 
        372,   373,   374,    40,    40,    61,   500,    91,   123,   575, 
        123,   126,   260,    41,   260,   261,   262,   263,   264,   265, 
        125,   414,   415,   125,   125,   414,   415,   125,    41,   340, 
        402,   403,    33,    40,    35,    40,    40,    59,   286,    40, 
        286,    59,    43,   349,    45,    40,    40,   340,   414,   415, 
         40,    59,   300,   301,   302,   260,   125,    41,   430,   553, 
         41,   404,   405,   406,   407,   408,    59,   313,   411,   412, 
         61,   414,   415,   416,   417,   418,   419,   361,   384,   340, 
         59,    37,    38,    61,   332,    41,    42,    43,    44,    45, 
         91,    47,   260,    46,   340,   341,   342,   343,   414,   415, 
        346,    41,    58,    59,    60,    61,    62,    63,    44,   125, 
         93,   123,    59,    40,   360,   361,   362,   363,   286,   365, 
        366,    44,   312,   125,   370,   126,   372,   373,   374,   364, 
        260,   123,   300,   301,   302,    91,   321,    93,    94,   340, 
         41,   331,    91,    41,   340,   260,   261,   262,   263,   264, 
        265,   123,    41,    37,   125,   125,   402,   403,    42,    43, 
         59,    45,   125,    47,   332,    40,   123,   371,   124,   125, 
        126,   286,    59,   125,   125,    41,   125,    58,    41,   125, 
        123,   125,    37,    38,   430,   260,    41,    42,    43,    44, 
         45,    46,    47,   123,    59,   501,    41,   123,   313,    93, 
        506,   125,    58,    58,    59,    60,    61,    62,    63,   257, 
        400,   401,   402,   403,    41,   125,    41,    44,    91,    91, 
         91,   411,   412,   257,    93,   340,   341,   342,   343,   125, 
        125,   346,    59,   123,   125,    59,    91,    59,    93,    94, 
         41,    41,   126,    44,    59,   360,   361,   362,   363,   555, 
        365,   366,    41,    41,   364,   370,    41,   372,    59,   260, 
        261,   262,   263,   264,   265,    41,    93,   125,   574,   124, 
        125,   126,   125,    41,     7,    94,    44,   215,     6,   585, 
         70,    93,   309,   452,   446,   286,   488,   402,   403,    51, 
         58,    59,    93,    50,   100,    37,    38,   208,   125,    41, 
         42,    43,    44,    45,    46,    47,   476,   464,   525,   561, 
        319,   525,   313,   414,   415,   430,    58,    59,    60,    61, 
         62,    63,    91,    38,   125,    93,    41,   168,   168,    44, 
        218,   280,   281,   282,   283,   284,   285,   314,   287,   340, 
        341,   342,   343,    58,    59,   346,    61,   214,    63,    91, 
        154,    93,    94,    26,   303,    41,   312,   125,    44,   360, 
        361,   362,   363,    -1,   365,   366,    -1,    -1,    -1,   370, 
         -1,   372,    58,    59,    -1,   331,    -1,    -1,    93,    94, 
         -1,    -1,   124,   125,   126,   334,    41,    -1,    41,    44, 
         -1,    44,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    58,    59,    58,    59,    93,    -1,   124, 
        125,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         46,    47,    -1,    -1,    -1,    -1,   125,    -1,    -1,   430, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    93,   125, 
         93,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,   410,   411,   412,   312,   414,   415, 
        416,   417,   418,   419,   420,    91,    -1,    93,    94,    -1, 
        125,    -1,   125,    -1,    -1,    -1,   331,    -1,    -1,    37, 
         38,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125, 
        126,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    33, 
         -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    91,   303,    93,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   124,    -1,   126,    -1, 
        312,   280,   281,   282,   283,   284,   285,    91,   287,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,   331, 
         -1,    -1,    37,    38,   303,    -1,    -1,    42,    43,    44, 
         45,    46,    47,    -1,   303,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    91,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,   334,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    91,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    60,    -1,    62,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   420,   124, 
         91,   126,    -1,    -1,    -1,    -1,   312,    -1,    94,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   331,    -1,    -1,    -1,    37, 
         38,    -1,    40,    41,    42,    43,    44,    45,   124,    47, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   414,   415, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,   312,    -1,    -1,    -1,    -1,   414, 
        415,   414,   415,    91,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,   286,   331,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   420,   123,   124,   125,   126,   313, 
         -1,    -1,   280,   281,   282,   283,   284,   285,    -1,   287, 
         37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,   300,   301,   302,   303,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   420,    -1,    -1,    41,    -1,   312,    44,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,   331,    63,   402,   403, 
         37,    38,   303,    40,    41,    42,    43,    44,    45,   126, 
         47,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    62,    63,    93,    94,    -1, 
         -1,    -1,    -1,   334,    -1,   331,    -1,    -1,    -1,   257, 
         -1,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    93,    94,   124,   125, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   123,   124,   125,   126, 
         -1,    -1,   310,   311,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   320,    -1,   400,   401,   402,   403,    -1,    -1, 
         -1,    -1,   330,   331,   332,   411,   412,    -1,    -1,    37, 
         38,    -1,   340,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    -1,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,   312,   414,   415,   416,   417, 
        418,   419,    93,    94,    -1,    -1,   124,   125,   126,    -1, 
         -1,    -1,    91,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
        257,    -1,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,   125,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,   310,   311,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   320,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,   330,   331,   332,    -1,    -1,    -1,    93, 
         94,    37,    38,   340,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
        124,   125,   126,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,   124,   125, 
         -1,    -1,    91,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,   340,    -1,   303,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,   334,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    93,    94,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,   124,   125,    91,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    38,    -1,    -1,    41,    -1,   312,    44,    -1,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    93, 
         94,   300,   301,   302,    -1,   304,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    93,    94,    37,    38, 
        124,   125,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    93,    94,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   260,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,   280,   281,   282,   283,   284,   285, 
        286,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    37,    38,    -1,   303,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    -1,   124,   125,    -1,   332,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    60,    -1,    62,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,   124,   125,   280,   281,   282,   283,   284,   285,    -1, 
        287,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,   300,   301,   302,   303,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    37, 
         38,    -1,   126,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    94,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    94,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,   124,    -1,   126,    38, 
         -1,   312,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    37,    38,    93,    94,    41,    42,    43,   312, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    94, 
         37,    38,    -1,    -1,    -1,    42,    43,   331,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,   124, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    94,    37,    38, 
         -1,    -1,    -1,    42,    43,   331,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,   400,   401,   402,   403, 
         -1,    60,    -1,    62,    -1,    -1,    -1,   124,    -1,   126, 
         -1,    -1,    -1,   331,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   126,   414,   415, 
        416,   417,   418,   419,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    94,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    60,    61,    62,    63,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    37,    38,   312,    -1,    41,    42,    43, 
         -1,    45,   124,    47,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   331,    94,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   124,    -1,   126,    -1,    -1, 
         94,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,    -1,   126,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   312,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,   400,   401,   402,   403,    -1,    -1,    -1,    -1,    37, 
         38,    -1,   411,   412,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         94,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
        312,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        124,    -1,   126,    -1,    -1,    -1,    94,    -1,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,   124,    -1,   126,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   331,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    37,    38,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
        124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         93,    94,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    60,    61,    62,    63,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    94,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    37,    38,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    43, 
         44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    -1,    43,    44,    45,    -1, 
         -1,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    93, 
         94,    58,    59,    60,    61,    62,    63,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
        124,   125,    -1,    -1,    -1,   331,    93,    94,    -1,    -1, 
         38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   331,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    93,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,   124,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
         -1,   415,   416,   417,   418,   419,    38,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    38,    -1,    -1,    41,    -1,    -1,    44,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1, 
         -1,    41,    58,    59,    44,    61,    -1,    63,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   124,   125, 
        411,   412,    -1,    -1,    -1,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    41,   411,   412,    44, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    38,    93,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,   368,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   124, 
        125,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    93,    94,    38,    -1,    -1,    41,    -1,    -1, 
         44,   421,    -1,    -1,    -1,    -1,    -1,    -1,   428,    -1, 
         -1,    -1,    -1,    41,    58,    59,    44,    61,    -1,    63, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    35,    -1,    -1,    -1,    -1,    40,    93, 
         94,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    60,    -1, 
         -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   499, 
        124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        510,    -1,    -1,    -1,    -1,    -1,    -1,   125,    -1,    91, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,   541,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,   126,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   404,   405,   406,   407,   408,    -1, 
        570,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    35,   588,    -1, 
         -1,    -1,    40,   593,    33,    43,    35,    45,   598,    -1, 
         -1,    40,    -1,    -1,    43,    33,    45,    35,    -1,    -1, 
         -1,    -1,    40,    -1,    62,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    35,    91,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    91,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,   126,   414, 
        415,   416,   417,   418,   419,    -1,    -1,   126,   260,   261, 
        262,   263,   264,   265,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    33,    -1, 
         35,    -1,    -1,    -1,   286,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
         -1,    -1,    -1,   414,   415,   416,   417,   418,   419,   123, 
         -1,   313,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,   340,    -1, 
         -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1, 
        414,   415,   416,   417,   418,   419,   404,   405,   406,   407, 
        408,   126,    -1,    -1,    -1,    -1,   414,   415,   416,   417, 
        418,   419,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,    -1,    -1,   401, 
        402,   403,   260,   261,   262,   263,   264,   265,   286,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   313,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,   340,   286,    -1,    -1,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
        265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,    -1,   402,   403,   340,    -1,    -1,    -1, 
         -1,   286,   346,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,   402,   403, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 182 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 194 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 194 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 205 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 206 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 210 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 210 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 215 "grammar/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 12:  #line 221 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 13:  #line 222 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 18:  #line 233 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 238 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 21:  #line 239 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 22:  #line 245 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 23:  #line 245 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 254 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 25:  #line 254 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 26:  #line 263 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 27:  #line 263 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 28:  #line 274 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 29:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 279 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 31:  #line 280 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 284 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 285 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 34:  #line 289 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 290 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 36:  #line 294 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 37:  #line 295 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 38:  #line 299 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 39:  #line 300 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 40:  #line 301 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 41:  #line 305 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 42:  #line 306 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 43:  #line 307 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 44:  #line 311 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 45:  #line 312 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 46:  #line 316 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 316 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 319 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 49:  #line 319 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 50:  #line 329 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 51:  #line 336 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 52:  #line 343 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 53:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 54:  #line 350 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 55:  #line 354 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 56:  #line 355 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 57:  #line 359 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 58:  #line 360 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 59:  #line 364 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 60:  #line 365 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 61:  #line 371 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 371 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 382 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 64:  #line 382 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 65:  #line 393 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 66:  #line 393 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 67:  #line 418 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 68:  #line 418 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 69:  #line 431 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 70:  #line 432 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 71:  #line 436 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 72:  #line 437 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 73:  #line 441 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 74:  #line 444 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 75:  #line 448 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 76:  #line 455 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 460 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 78:  #line 465 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 79:  #line 472 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 80:  #line 473 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 81:  #line 477 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 82:  #line 478 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 83:  #line 482 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 483 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 85:  #line 484 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 86:  #line 488 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 87:  #line 489 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 88:  #line 490 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 89:  #line 494 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 90:  #line 495 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 91:  #line 499 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 92:  #line 500 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 93:  #line 504 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 505 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 95:  #line 506 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 96:  #line 510 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 97:  #line 511 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 98:  #line 515 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 99:  #line 516 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 106:  #line 535 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 108:  #line 540 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 109:  #line 541 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 110:  #line 545 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 111:  #line 545 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 548 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 113:  #line 548 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 114:  #line 553 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 115:  #line 553 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 116:  #line 563 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 117:  #line 563 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 568 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 119:  #line 568 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 572 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 121:  #line 572 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 122:  #line 576 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 123:  #line 576 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 124:  #line 580 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 126:  #line 581 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 128:  #line 582 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 129:  #line 582 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 130:  #line 585 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 131:  #line 585 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 132:  #line 590 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 133:  #line 593 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 135:  #line 600 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 136:  #line 601 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 137:  #line 605 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 138:  #line 608 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 139:  #line 615 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 140:  #line 616 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 141:  #line 620 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 142:  #line 626 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 143:  #line 627 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 144:  #line 631 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 146:  #line 636 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 147:  #line 637 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 148:  #line 641 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 149:  #line 641 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 645 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 151:  #line 645 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 152:  #line 651 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 153:  #line 652 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 154:  #line 656 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 155:  #line 657 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 156:  #line 657 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 157:  #line 662 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 158:  #line 663 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 159:  #line 667 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 160:  #line 668 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 161:  #line 672 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 162:  #line 672 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 163:  #line 686 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 164:  #line 687 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 165:  #line 691 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 167:  #line 696 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 168:  #line 696 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 169:  #line 704 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 171:  #line 709 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 172:  #line 710 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 173:  #line 714 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 719 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 176:  #line 725 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 177:  #line 730 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 178:  #line 738 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 179:  #line 741 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 180:  #line 744 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 181:  #line 747 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 182:  #line 753 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 183:  #line 753 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 184:  #line 759 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 185:  #line 765 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 186:  #line 765 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 187:  #line 774 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 188:  #line 774 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 189:  #line 784 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 190:  #line 784 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 191:  #line 793 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 192:  #line 796 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 193:  #line 799 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 802 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 195:  #line 805 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 196:  #line 808 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 197:  #line 811 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 198:  #line 815 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 199:  #line 821 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 200:  #line 827 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 201:  #line 833 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 202:  #line 838 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 203:  #line 838 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 204:  #line 844 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 205:  #line 855 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 206:  #line 858 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 207:  #line 864 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 209:  #line 869 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 210:  #line 870 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 211:  #line 874 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 212:  #line 875 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 213:  #line 879 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 214:  #line 885 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 215:  #line 885 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 216:  #line 886 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 887 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 888 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 219:  #line 889 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 220:  #line 890 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 221:  #line 894 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 222:  #line 897 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 223:  #line 903 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 225:  #line 908 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 226:  #line 909 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 227:  #line 913 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 229:  #line 918 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 230:  #line 919 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 231:  #line 923 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 924 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 925 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 926 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 927 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 928 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 929 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 930 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 931 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 240:  #line 932 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 241:  #line 933 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 242:  #line 934 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 243:  #line 938 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 939 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 940 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 941 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 942 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 248:  #line 943 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 249:  #line 944 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 250:  #line 945 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 251:  #line 949 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 950 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 951 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 955 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 956 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 259:  #line 957 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 260:  #line 958 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 261:  #line 959 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 262:  #line 963 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 964 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 965 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 966 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 967 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 267:  #line 968 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 268:  #line 972 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 269:  #line 973 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 270:  #line 978 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 272:  #line 983 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 273:  #line 984 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 274:  #line 988 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 275:  #line 988 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 276:  #line 991 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 277:  #line 994 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 278:  #line 994 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 279:  #line 997 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 280:  #line 997 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 281:  #line 1003 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 282:  #line 1004 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 289:  #line 1022 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 290:  #line 1023 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 291:  #line 1027 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 292:  #line 1031 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 293:  #line 1035 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 294:  #line 1036 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 296:  #line 1041 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 297:  #line 1045 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 298:  #line 1046 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 299:  #line 1052 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 300:  #line 1053 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 301:  #line 1057 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 302:  #line 1058 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 303:  #line 1062 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 304:  #line 1063 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 305:  #line 1064 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 306:  #line 1065 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 307:  #line 1066 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 308:  #line 1067 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 309:  #line 1068 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 310:  #line 1069 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2748 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
