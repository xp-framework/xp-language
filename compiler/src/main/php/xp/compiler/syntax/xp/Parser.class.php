<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     7,     7, 
          7,    10,    10,     9,     9,     4,     4,     4,    13,     3, 
         17,     3,    19,     3,    14,    14,    15,    15,    20,    20, 
         22,    22,    16,    16,    23,    23,    23,    18,    18,    18, 
         27,    27,    29,    28,    30,    28,    24,    24,    24,    34, 
         34,    35,    35,    38,    38,    33,    33,    40,    25,    43, 
         25,    45,    25,    47,    25,    11,    11,    48,    48,    50, 
         50,    50,    51,    51,    51,    52,    52,    53,    53,    42, 
         42,    42,    39,    39,    39,    44,    44,    54,    54,    37, 
         37,    37,    55,    55,    41,    41,    46,    46,    46,    46, 
         46,    46,    26,    26,    56,    56,    59,    57,    60,    57, 
         63,    57,    65,    57,    67,    57,    68,    57,    69,    57, 
         71,    57,    72,    57,    73,    57,    74,    57,    57,    57, 
         57,    76,    76,    78,    78,    77,    77,    79,    66,    66, 
         70,    70,    80,    80,    82,    81,    83,    81,    61,    61, 
         62,    84,    62,    75,    75,    85,    85,    89,    88,    90, 
         90,    86,    86,    91,    87,    64,    64,    92,    92,    58, 
         58,    93,    93,    93,    97,    97,    97,    97,    99,    31, 
         31,   100,    31,   101,    31,   102,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,   110,    31, 
         31,   109,   109,   108,   108,   111,   111,   112,   112,    36, 
        114,    36,    36,    36,    36,    36,    36,   113,   113,    96, 
         96,   115,   115,   117,   117,   116,   116,   103,   103,   103, 
        103,   103,   103,   103,   103,   103,   103,   103,   103,   104, 
        104,   104,   104,   104,   104,   104,   104,   105,   105,   105, 
        105,   105,   105,   105,   105,   105,   105,   105,   106,   106, 
        106,   106,   106,   106,   107,   107,    98,    98,   118,   118, 
        120,   119,   119,   122,   119,   123,   119,   121,   121,     8, 
          8,     8,    32,    32,    32,    12,    12,    94,    95,   124, 
        124,   125,   125,    21,    21,    49,    49,   126,   126,   127, 
        127,   127,   127,   127,   127,   127,   127, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     5,     6, 
          6,     1,     1,     1,     3,     1,     3,     3,     0,     9, 
          0,     9,     0,     8,     0,     2,     0,     2,     0,     2, 
          0,     3,     2,     0,     1,     1,     4,     3,     1,     0, 
          1,     3,     0,     3,     0,     6,     5,     6,     6,     1, 
          4,     1,     2,     2,     4,     0,     2,     0,     9,     0, 
          9,     0,     8,     0,    10,     4,     1,     1,     3,     2, 
          5,     5,     3,     3,     1,     1,     3,     3,     3,     1, 
          3,     3,     0,     2,     1,     0,     1,     1,     3,     3, 
          3,     4,     1,     2,     0,     2,     1,     1,     1,     1, 
          1,     1,     0,     1,     1,     2,     0,     4,     0,     7, 
          0,    10,     0,     8,     0,     6,     0,     8,     0,     8, 
          0,     3,     0,     3,     0,     4,     0,     6,     7,     7, 
          2,     1,     3,     1,     3,     1,     3,     3,     1,     3, 
          0,     1,     1,     2,     0,     5,     0,     4,     1,     3, 
          0,     0,     3,     2,     1,     1,     2,     0,     9,     1, 
          3,     0,     1,     0,     5,     0,     1,     1,     3,     0, 
          1,     5,     4,     4,     1,     4,     1,     1,     0,     3, 
          2,     0,     4,     0,     5,     0,     6,     2,     3,     1, 
          1,     1,     1,     1,     5,     3,     3,     3,     0,     8, 
          4,     1,     3,     0,     1,     1,     3,     1,     2,     1, 
          0,     4,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     3,     0,     1,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     4,     4,     3, 
          3,     3,     3,     3,     3,     4,     4,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     4,     4,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     1,     2, 
          0,     4,     2,     0,     6,     0,     5,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     4,     3,     4,     1, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,   280,     0,     0,   282,   281,     0,     0,   300,   302, 
        301,   304,   306,   305,   307,   303,     1,     0,    67,     0, 
        298,     8,     0,     0,     4,     0,     0,     0,     0,     0, 
         68,    19,    23,    21,   299,    17,    18,     0,     0,    13, 
         12,     0,    14,     0,     0,    75,     0,     0,     0,     0, 
          0,     0,     0,     0,     9,     0,     0,     0,     0,    69, 
         66,     0,     0,     0,     0,    11,    10,    15,    73,    74, 
        211,     0,   217,   213,   216,   214,   215,     0,     0,     0, 
         76,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         71,     0,    72,     0,     0,   283,     0,   284,   285,     0, 
        290,    26,     0,     0,     0,    30,    34,     0,   220,     0, 
          0,     0,     0,     0,     0,   182,     0,     0,     0,   179, 
          0,     0,     0,     0,     0,   218,     0,   219,   190,   191, 
        192,   193,   194,     0,     0,   222,   210,    78,    79,     0, 
         77,     0,     0,     0,     0,   287,    28,    34,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   188, 
          0,   186,     0,     0,     0,     0,   184,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   265,   266,     0,   271, 
        279,   278,   181,   268,     0,     0,     0,   212,     0,   293, 
          0,   288,   291,     0,   295,     0,     0,    24,     0,    33, 
         35,    36,     0,     0,     0,    41,     0,     0,     0,     0, 
          0,     0,     0,     0,   180,     0,   208,     0,     0,     0, 
        206,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,     0,     0,   189, 
          0,   270,   276,     0,   169,     0,     0,   225,   223,   289, 
         20,     0,     0,     0,     0,     0,     0,     0,    22,     0, 
         34,     0,   183,     0,     0,     0,   201,   209,     0,     0, 
          0,   178,   175,     0,     0,     0,     0,     0,     0,     0, 
          0,    94,     0,     0,   274,   107,     0,   125,   111,   115, 
        117,   113,   121,   123,   109,   119,     0,     0,     0,     0, 
        105,     0,    62,     0,     0,     0,     0,     0,     0,    34, 
         44,     0,    42,     0,     0,     0,     0,     0,     0,     0, 
          0,   207,     0,   185,     0,   272,     0,     0,     0,   127, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    37,   131,   106,     0,     0,    60,    58,    97,    98, 
         99,   100,   101,   102,     0,     0,     0,     0,     0,     0, 
          0,     0,   173,   174,   187,     0,   199,     0,   277,     0, 
          0,     0,     0,     0,   132,     0,     0,     0,     0,   149, 
          0,     0,   122,   124,     0,     0,     0,     0,   136,     0, 
          0,    88,     0,     0,     0,     0,     0,    64,     0,     0, 
         47,     0,     0,    52,    32,     0,   172,   203,     0,   176, 
        275,   108,     0,     0,     0,     0,   126,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    49,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    51, 
         54,     0,    48,    53,    46,   200,     0,     0,   133,     0, 
          0,     0,   150,     0,     0,     0,     0,     0,     0,   137, 
          0,     0,     0,     0,    89,    91,    90,     0,     0,     0, 
          0,     0,   158,   164,   128,     0,   155,   156,     0,     0, 
        116,     0,   140,     0,     0,     0,     0,    92,    96,     0, 
         80,     0,    63,     0,     0,     0,    55,     0,     0,   154, 
        163,   157,   129,     0,     0,     0,   152,   110,   145,   147, 
          0,     0,   143,   130,     0,     0,    61,    59,     0,     0, 
          0,     0,   118,   114,     0,     0,     0,   120,   144,    82, 
         81,    65,   160,     0,     0,     0,   153,     0,     0,     0, 
          0,   165,   112,     0,   148,   161,     0,   146,     0,     0, 
        159, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    27,   133,     4,     7,     8,    51,    52,    53, 
        229,   106,    60,    94,   114,   160,    62,   234,    61,    96, 
        116,   361,   230,   231,   232,   348,   235,   236,   307,   308, 
        349,   289,   408,   359,   453,   135,   442,   454,   486,   447, 
        514,   543,   446,   443,   396,   405,   489,    40,    29,    41, 
         57,    90,    91,   444,   445,   350,   351,   266,   379,   389, 
        431,   558,   383,   136,   386,   473,   384,   385,   390,   561, 
        387,   388,   382,   422,   525,   424,   438,   425,   439,   562, 
        563,   576,   577,   575,   526,   550,   527,   528,   548,   584, 
        549,   137,   239,   108,   109,   138,   324,   213,   174,   169, 
        252,   243,   139,   140,   141,   142,   143,   249,   371,   459, 
        250,   251,   144,    98,   145,   146,   299,   214,   215,   291, 
        216,   378,   334,   110,   111,    30,    31, 
    );
    protected static $yySindex = array(         -275,
          0,     0,  -260,    65,  -170,  1084,  -260,     0,     2,    41, 
         36,     0,    65,  -195,     0,     0,    91,    53,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   316,     0,   722, 
          0,     0,    65,    65,     0,  -254,   169,     1,   -75,    80, 
          0,     0,     0,     0,     0,     0,     0,     1,     1,     0, 
          0,   -32,     0,   295,   165,     0,   243,    53,   722,    65, 
         65,    65,   232,   297,     0,     1,    65,    65,   531,     0, 
          0,   242,    11,    63,    11,     0,     0,     0,     0,     0, 
          0,   251,     0,     0,     0,     0,     0,   302,   369,   423, 
          0,   222,    65,   144,    65,   327,   144,  4522,   613,   613, 
          0,  -239,     0,   141,   398,     0,   371,     0,     0,   109, 
          0,     0,    65,   337,   431,     0,     0,   363,     0,  4640, 
       4640,  4640,  4640,  4640,  4640,     0,  4640,   314,   440,     0, 
       4640,   367,   105,  3112,   -40,     0,   470,     0,     0,     0, 
          0,     0,     0,   429,   490,     0,     0,     0,     0,   251, 
          0,    65,   -72,   443,   222,     0,     0,     0,    65,   287, 
        284,   306,  -113,  -113,  -115,  -113,  -113,  -113,   -72,     0, 
       4640,     0,  4640,   -40,   277,   -69,     0,  4640,  4640,  4640, 
       4640,  4640,  4640,  4640,  4640,  4640,  4640,  4640,  4640,  4640, 
       4640,  4640,  4640,  4533,  4542,  2512,  4640,  4212,  4640,  4640, 
       4640,  4640,  4640,  4640,    65,  4640,     0,     0,   -72,     0, 
          0,     0,     0,     0,   -40,   -28,  4640,     0,    50,     0, 
        176,     0,     0,   917,     0,   414,   289,     0,    47,     0, 
          0,     0,     0,   428,    70,     0,   516,   371,   -40,   438, 
        442,  3112,  4640,  3112,     0,   -40,     0,   -42,   319,   519, 
          0,   -74,  3410,  3519,  3519,  3519,  3519,  3519,  3519,  3519, 
       3519,  3519,  3519,  3519,  3112,   527,  1393,  3982,  4130,  4640, 
       2488,  4640,  2488,  4640,  4640,   505,   505,  4640,  4640,   505, 
        505,   156,   156,  -115,  -115,  -115,     0,  -113,   104,     0, 
       4640,     0,     0,   548,     0,   534,   440,     0,     0,     0, 
          0,   619,   333,   336,   359,    37,   477,   580,     0,   284, 
          0,  4640,     0,  4640,   -51,   583,     0,     0,  4629,   -69, 
        585,     0,     0,   -40,  4640,  3519,  3519,   505,   505,   505, 
        505,     0,   535,  4640,     0,     0,    13,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   587,   508,  2173,   619, 
          0,   569,     0,   605,   606,   802,   556,   592,   532,     0, 
          0,  4640,     0,   810,   615,   533,   540,   -40,   619,  3112, 
        541,     0,  4640,     0,  4420,     0,   616,  4640,  4640,     0, 
        328,  4640,   627,   629,   500,   630,   614,   617,   632,   634, 
        335,     0,     0,     0,   613,    10,     0,     0,     0,     0, 
          0,     0,     0,     0,   646,    10,  4640,   631,   437,  1213, 
       2251,   477,     0,     0,     0,   574,     0,   671,     0,   672, 
        660,   619,   667,   425,     0,  2634,  4640,  4640,   619,     0, 
        360,   389,     0,     0,  4640,  4640,   669,   432,     0,   673, 
        685,     0,   697,   698,  -148,   140,   140,     0,   648,  3112, 
          0,    35,  -100,     0,     0,   477,     0,     0,   -40,     0, 
          0,     0,   618,  4640,   328,   626,     0,   691,  2661,   628, 
        711,   710,   392,  2688,  2785,  4640,   335,   643,     0,   507, 
        464,    10,   447,   592,    10,   756,   698,   757,    10,     0, 
          0,   619,     0,     0,     0,     0,    71,  3112,     0,   619, 
       4640,   500,     0,  4640,   459,  4640,   500,   677,  3112,     0, 
        619,   592,    65,   -49,     0,     0,     0,   698,   464,   464, 
        760,   689,     0,     0,     0,    71,     0,     0,   693,   763, 
          0,  2812,     0,  2840,   458,    72,   705,     0,     0,  4640, 
          0,   619,     0,   -49,   -49,   464,     0,   792,   712,     0, 
          0,     0,     0,  4640,   778,   500,     0,     0,     0,     0, 
        713,    72,     0,     0,  2961,   723,     0,     0,   -49,    65, 
        619,   809,     0,     0,   500,  4640,   793,     0,     0,     0, 
          0,     0,     0,  -119,   727,   500,     0,  3084,   619,    65, 
        812,     0,     0,   619,     0,     0,   731,     0,   619,   732, 
          0, 
    );
    protected static $yyRindex= array(         1240,
          0,     0,  1452,     0,     0,   340,  1476,     0,  1292,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   473, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   318,     0,     0,   126,     0,   892,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  1470,   -99,   741,   -99,     0,     0,     0,     0,     0, 
          0,   814,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   744,     0,     0,   744,   794,     0,     0, 
          0,     0,     0,     0,     0,     0,   362,     0,     0,     0, 
          0,     0,     0,     0,    22,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  1062,  1172,     0, 
          0,     0,     0,   453,  1619,     0,    39,     0,     0,     0, 
          0,     0,     0,     0,    75,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   161, 
        746,   664,  1919,  2004,  3223,  2031,  2072,  2101,     0,     0, 
          0,     0,     0,  1619,     0,   635,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   827, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  1770,     0,   659,     0,    64,     0, 
          0,     0,     0,   161,     0,   730,     0,     0,     0,     0, 
          0,     0,   305,     0,   761,     0,   805,     0,  1619,   806, 
        807,    97,   852,   426,     0,  1619,     0,     0,     0,   647, 
          0,     0,    27,   -26,    18,    25,    34,    38,    81,   103, 
        234,   236,   480,   775,  1070,     0,  4223,   364,   -21,     0, 
       4202,     0,  4239,     0,     0,  3804,  3820,     0,     0,  3938, 
       3954,  3556,  3699,  3260,  3297,  3369,     0,  2215,  1592,     0, 
        813,     0,     0,   765,     0,     0,     0,     0,     0,     0, 
          0,   784,     0,   139,     0,     0,   -18,     0,     0,     0, 
          0,   852,     0,   786,     0,     0,     0,     0,     0,     0, 
        875,     0,     0,  1619,     0,   905,   934,  3995,  4032,  4089, 
       4105,     0,     0,   852,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   -70, 
          0,     0,     0,     0,   791,     0,     0,   856,     0,     0, 
          0,     0,     0,    88,     0,     0,     0,  1619,   784,   798, 
          0,     0,   852,     0,   536,     0,     0,   852,   865,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   884,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   161, 
          0,   994,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   784,   433,     0,     0,     0,   867,     0,   784,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   886,     0,   888,   888,     0,     0,   482, 
          0,     0,     0,     0,     0,   -18,     0,     0,  1619,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   567,     0,     0,     0,     0,     0,     0,     0,     0, 
         43,     0,     0,    82,     0,     0,   898,     0,   884,     0, 
          0,   784,     0,     0,     0,     0,     0,   466,     0,   784, 
        867,     0,     0,     0,     0,     0,     0,     0,   472,     0, 
        784,    82,     0,     0,     0,     0,     0,   904,    43,    43, 
          0,     0,     0,     0,     0,   241,     0,     0,     0,     0, 
          0,     0,     0,     0,   374,   822,     0,     0,     0,     0, 
          0,   784,     0,     0,     0,    43,     0,     0,     0,     0, 
          0,     0,     0,   852,     0,     0,     0,     0,     0,     0, 
          0,   823,     0,     0,     0,     0,     0,     0,     0,     0, 
        784,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -65,     0, 
          0,     0,     0,   -65,     0,     0,     0,     0,   784,     0, 
          0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   949,   107,   908,   365, 
        952,   -59,     0,   895,   870,  -127,     0,     0,     0,     0, 
       -109,  -404,     0,     0,     0,   729,     0,   662,     0,     0, 
         56,   818,  -378,     0,     0,   -53,  -367,   521,   530,     0, 
          9,  -108,     0,   497,     0,     0,     0,     0,   929,   938, 
          0,     0,   916,  -141,   788,     0,   313,  -172,     0,     0, 
         23,     0,     0,  -110,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   554,   543,     0, 
        461,     0,     0,     0,     0,     0,   498,   502,     0,     0, 
          0,     0,     0,   857,   860,   719,     0,  -104,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   724,     0,     0,     0,   824,     0,   830,     0,     0, 
          0,     0,     0,     0,   891,     0,  1018, 
    );
    protected static $yyTable = array(11,
         73,    74,    75,   157,   590,   212,   119,   457,    36,   541, 
        206,   293,   206,    66,   197,    89,   255,   197,   105,   255, 
        150,   105,   255,    25,   493,    31,    65,     1,    46,    47, 
        224,   197,   197,   112,    56,   115,   255,   255,   449,   255, 
         31,   255,    50,     5,   295,   148,   149,    33,   154,   225, 
        210,   495,   381,   115,   104,    72,    72,    72,   228,   103, 
         88,   228,    79,    80,    12,   229,   197,   196,   229,   245, 
        196,   255,   255,   542,   230,   228,   228,   230,   231,   167, 
        294,   231,   229,   229,   196,   196,    34,    72,    72,    12, 
         72,   230,   230,   491,    35,   231,   231,   167,   197,   115, 
        105,    95,   255,   255,    15,   517,    31,   224,    72,   237, 
        228,    17,    13,   310,   515,    14,    39,   229,   333,   196, 
         37,   232,    56,    58,   232,    56,   230,   154,   311,    15, 
        231,   167,   316,   538,   313,   380,    38,   105,   232,   232, 
        226,   317,   228,   234,   294,   287,   234,   220,    72,   229, 
         72,   196,   155,   134,    72,    48,   224,   492,   230,   452, 
        234,   234,   231,   167,    72,    95,   332,   221,    16,    70, 
        156,    72,    59,   232,    56,   163,   164,   165,   166,   167, 
        168,   483,   170,   364,    54,   321,   175,     9,   224,   226, 
          9,   484,   204,    16,   154,   234,   205,   202,    16,   221, 
         72,   365,   203,   366,    72,   232,   421,   540,   296,   297, 
         10,    25,    38,    10,    49,   209,    10,   209,    70,   374, 
        591,   226,    68,   377,    72,   322,   242,   234,   244,    16, 
        105,    12,   410,   253,   254,   255,   256,   257,   258,   259, 
        260,   261,   262,   263,   264,   265,   267,   268,   269,   271, 
        273,   276,   277,   280,   281,   282,   283,   284,   285,   286, 
         12,   288,   418,   415,    55,   323,   154,   420,   300,     9, 
        247,    15,   265,   162,   233,   162,   235,   233,   294,   235, 
        162,   206,    69,   162,   104,   162,   207,   208,   207,   208, 
         76,   233,   233,   235,   235,    10,   355,   318,   134,    95, 
         15,    92,   104,   104,   487,   487,   304,   103,   103,   296, 
        297,    99,   105,   204,   193,    72,   468,   246,   202,   200, 
         93,   201,   294,   203,     9,   326,   233,   327,   235,   328, 
        329,   162,    10,   330,   331,    16,   196,   180,   198,   190, 
         33,   440,    66,   518,    45,   172,   265,   296,    43,   441, 
         10,    33,    67,   172,   496,    77,   356,    16,   233,    33, 
        235,    16,   100,    43,    16,   162,   162,   134,   357,   134, 
        192,   171,    95,   296,   370,   353,   358,    18,   305,   211, 
        375,    33,   255,   255,   255,   255,   255,   197,   197,   134, 
        530,    72,   255,   255,   255,   255,   255,   255,    16,     9, 
        191,    72,   206,   539,   256,   292,   151,   256,   151,   101, 
         16,   228,    63,   151,   523,   524,   151,   411,   151,   296, 
        296,   256,   256,   292,   256,    10,   256,    43,   134,    43, 
         78,   228,   228,   134,   265,   567,   568,   426,   229,   229, 
        196,    72,    72,   572,   559,   560,   296,   230,   230,   117, 
        152,   231,   231,   115,   113,   153,   256,   256,    16,   158, 
        582,   154,   450,   103,   151,   466,   102,   205,   465,   227, 
         16,   485,   478,   134,   159,   477,   134,    72,    16,   441, 
         72,     9,   134,   469,    72,   161,   209,   256,   256,   176, 
        474,   475,   296,   168,   232,   232,   168,   173,   151,   151, 
        162,   162,   162,   162,   162,   162,   135,    10,    72,   135, 
        583,   168,   138,   217,   177,   138,   234,   234,   227,   498, 
        236,   218,    57,   236,   531,    57,   162,   544,   545,   535, 
        596,   509,   122,   219,   132,   222,   302,   236,   236,   131, 
         57,   204,   120,   233,   121,   168,   202,   200,   303,   201, 
        227,   203,   309,   162,   569,   312,   134,   207,   208,   532, 
        314,   534,   320,   297,   315,    72,    19,    20,    21,   226, 
         23,    24,   236,    25,    57,   319,   195,   168,   574,   195, 
        162,   162,   162,   162,   325,    72,   162,   335,   205,    26, 
         81,   171,   352,   195,   195,   565,   195,   587,   195,   360, 
        162,   162,   162,   162,   236,   162,   162,   209,   593,   134, 
        162,   162,   162,   162,   162,    42,    43,    44,   354,   362, 
        227,    81,   429,   368,   373,   123,   391,   376,   195,   395, 
        206,   588,   392,   151,   151,   151,   151,   151,   151,   296, 
        296,   296,   162,   162,   397,   398,   406,   233,   233,   235, 
        235,   122,   407,   132,   409,   412,   419,   413,   131,   151, 
        195,   120,   394,   121,   414,   417,   427,   423,   428,   432, 
        162,   435,   433,   436,   437,   434,   199,   197,   207,   208, 
        181,   182,   183,   184,   186,   448,   151,   194,   195,   451, 
        178,   179,   185,   188,   187,   189,   452,   430,   458,   170, 
        210,   210,   170,    81,   210,   210,   210,   210,   210,    81, 
        210,   460,   461,   151,   151,   151,   151,   170,   462,   151, 
        471,   210,   210,   210,   210,   210,   210,   464,   472,   476, 
        480,   479,   297,   151,   151,   151,   151,   481,   151,   151, 
        490,   482,   497,   151,   123,   151,   151,   151,   500,   501, 
        504,   170,   503,   505,   210,   506,   210,   210,   297,   162, 
         83,    84,    85,    86,    87,   511,   512,   256,   256,   256, 
        256,   256,   297,   297,   297,   151,   151,   256,   256,   256, 
        256,   256,   256,   170,   513,    10,   516,   210,   210,   210, 
         82,    83,    84,    85,    86,    87,   519,   520,   533,   536, 
        546,   273,   273,   151,   297,   273,   273,   273,   273,   273, 
        273,   273,   127,   547,   430,   237,   205,   553,   237,   430, 
        304,   554,   273,   273,   273,   273,   273,   273,   557,   564, 
         88,   570,   237,   237,   571,   209,   573,   578,   403,   130, 
        336,   337,   338,   401,   399,   126,   400,   581,   402,   586, 
        589,   592,   597,   599,   210,   273,   601,   273,   273,   339, 
        340,   341,   342,    29,   343,   344,    27,   237,   430,   345, 
         40,   346,   147,    83,    84,    85,    86,    87,   162,    83, 
         84,    85,    86,    87,   170,    39,   166,   430,   273,   273, 
        273,   204,   166,   236,   236,   283,   284,   285,   430,   237, 
         18,   124,   125,   205,    10,   170,   207,   208,   103,   107, 
        166,   177,   177,    50,    56,   177,   177,   177,   177,   177, 
        177,   177,   202,   170,    86,   166,    87,   404,    83,   347, 
        139,   127,   177,   177,   177,   177,   177,   177,    85,   195, 
        195,   195,   195,   195,    84,   246,   141,   142,   246,   195, 
        195,   195,   195,   195,   195,    32,    64,    28,   130,   336, 
        337,   338,   246,   246,   126,   177,   118,   177,   177,    97, 
        221,   363,   107,   494,   247,   210,   488,   247,   339,   340, 
        341,   342,   296,   343,   344,   521,   238,    71,   345,   304, 
        346,   247,   247,   248,   210,    70,   290,   246,   177,   177, 
        177,    19,    20,    21,    22,    23,    24,    18,    25,   304, 
        304,   304,   304,   304,   304,   304,   304,   151,   499,   510, 
        124,   125,   579,   551,    26,   240,   247,   552,   241,   246, 
         31,    31,   304,   367,    31,    31,    31,    31,    31,    31, 
         31,   301,   298,   372,   292,   223,   306,    45,   347,     0, 
          0,    31,    31,    31,    31,    31,    31,     0,   247,     0, 
          0,   304,     0,   210,   210,   210,   210,   210,   210,   210, 
        210,   210,     0,    16,   210,   210,   273,   210,   210,   210, 
        210,   210,   210,   210,    31,     0,    31,    31,     0,    19, 
         20,    21,   226,    23,    24,   273,    25,   416,   210,   210, 
          0,     0,     0,   210,   210,   210,   210,     0,   210,     0, 
        171,     0,    26,   171,     0,     0,     0,    31,    31,    31, 
          0,   210,   210,   210,   210,     0,     0,   171,   171,     0, 
          0,     0,     0,     0,     0,     0,     0,   248,     0,     0, 
          0,     0,     0,   227,     0,     0,     0,     0,     0,     0, 
        463,   296,   210,     0,   210,   210,     0,   470,     0,     0, 
          0,     0,   171,     0,   273,   273,   273,   273,   273,   273, 
        273,   273,   273,     0,    18,   273,   273,   296,   273,   273, 
        273,   273,   273,   273,   273,   210,   177,   210,   237,   237, 
          0,   296,   296,   296,   171,     0,    19,    20,    21,   226, 
         23,    24,     0,    25,     0,   177,     0,     0,   217,   217, 
          0,     0,     0,   217,   217,   217,   217,   217,   217,    26, 
        522,     0,     0,   296,     0,     0,     0,     0,   529,     0, 
          0,   217,   217,   217,   217,     0,     0,     0,     0,   537, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        227,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   217,     0,   217,   217,     0,     0,     0,     0, 
        566,     0,     0,     0,   177,   177,   177,   177,   177,   177, 
        177,   177,   177,     0,     0,   177,   177,     0,   177,   177, 
        177,   177,   177,   177,   177,   217,     0,   217,     0,   585, 
          0,     0,     0,    18,     0,    31,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   595,   246,   246, 
          0,     0,   598,     0,    31,     0,     0,   600,    16,    16, 
          2,    16,    16,    16,    16,    16,    16,   455,    16,     0, 
          0,     0,     0,     0,     0,     0,     0,   247,   247,    16, 
         16,    16,    16,    16,    16,     0,     0,     0,     0,     0, 
          0,     0,     0,    19,    20,    21,    22,    23,    24,     0, 
         25,     0,     0,   210,     0,     0,     0,     0,     0,     0, 
          0,     0,    16,     0,    16,    16,    26,     0,     0,     0, 
          0,     0,   210,    31,    31,    31,    31,    31,    31,    31, 
         31,    31,     0,     0,    31,    31,     0,    31,    31,    31, 
         31,    31,    31,    31,    16,    16,    16,    16,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   204, 
        193,     0,     0,     0,   202,   200,     0,   201,     0,   203, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   196,     0,   198,     0,     0,     0,     0,     0, 
          0,   210,   210,   210,   210,   210,   210,   210,   210,   210, 
          0,    16,   210,   210,     0,   210,   210,   210,   210,   210, 
        210,   210,     0,   217,     0,     0,   192,     0,     0,     0, 
          0,     0,    19,    20,    21,   226,    23,    24,     0,    25, 
          0,     0,   217,     0,     0,     0,   286,   286,     0,   286, 
        286,   286,   286,   286,   286,    26,   286,     0,   206,     2, 
          2,     2,     2,     2,     2,     0,     2,   286,   286,     0, 
        286,   286,   286,     0,     0,     0,     0,     0,     0,     2, 
          2,     2,     5,     2,     0,     0,   227,     0,    16,     0, 
          0,    16,     0,     0,     0,     0,     0,     0,     0,     0, 
        286,     0,   286,   286,     0,     0,     6,     0,     0,     0, 
          0,   217,   217,   217,   217,   217,   217,   217,   217,   217, 
          0,     0,   217,   217,     0,   217,   217,   217,   217,   217, 
        217,   217,   286,   286,   286,   286,     0,     0,     0,     0, 
          0,    16,    16,    16,     0,     0,     0,     0,     0,     0, 
          0,    16,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    16,    16,    16,     0,     0,     0,     0,    93,    93, 
          0,    16,    93,    93,    93,    93,    93,     0,    93,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    93, 
         93,    93,    93,    93,     0,   267,   267,     0,     0,   267, 
        267,   267,   267,   267,     0,   267,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   267,   267,   267,   267, 
        267,   267,     0,     0,    93,    93,     0,     0,     0,     0, 
          0,    16,    16,    16,    16,    16,    16,    16,    16,    16, 
          0,    16,    16,    16,   205,    16,    16,    16,    16,    16, 
         16,   267,   267,     0,     0,    93,    93,    93,     0,     0, 
          0,     0,     0,   209,     0,     0,   286,     0,     0,   286, 
          0,     5,     5,     5,     5,     5,     5,     0,     5,     0, 
          0,     0,   267,   267,   267,     0,     0,     0,     0,     0, 
          0,     5,     5,     5,     5,     6,     6,     6,     6,     6, 
          6,     0,     6,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     6,     6,     6,     6,   286, 
        286,   286,     0,     0,     0,     0,     0,     0,     0,   286, 
          0,     0,   199,   197,   207,   208,     0,     0,     0,   286, 
        286,   286,     0,   194,   195,     0,   269,   269,     0,   286, 
        269,   269,   269,   269,   269,     0,   269,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   269,   269,   269, 
        269,   269,   269,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   269,   269,     0,     0,     0,     0,     0,   286, 
        286,   286,   286,   286,   286,   286,   286,   286,     0,     0, 
        286,   286,     0,   286,   286,   286,   286,   286,   286,     0, 
          0,     0,     0,   269,   269,   269,     0,     0,     0,     0, 
          0,     0,     0,    93,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    93,    93,     0,     0,     0,     0,     0,     0,     0, 
        267,    93,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   267, 
          0,     0,     0,     0,     0,   261,   261,     0,     0,   261, 
        261,   261,   261,   261,     0,   261,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   261,   261,   261,   261, 
        261,   261,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    93,    93,    93,    93,    93,    93,    93,    93,    93, 
          0,     0,    93,    93,     0,    93,    93,    93,    93,    93, 
         93,   261,   261,     0,     0,     0,     0,     0,   267,   267, 
        267,   267,   267,   267,   267,   267,   267,     0,     0,   267, 
        267,     0,   267,   267,   267,   267,   267,   267,     0,     0, 
        262,   262,   261,   261,   262,   262,   262,   262,   262,     0, 
        262,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   262,   262,   262,   262,   262,   262,   260,   260,     0, 
          0,   260,   260,   260,   260,   260,     0,   260,     0,     0, 
          0,   269,     0,     0,     0,     0,     0,     0,   260,   260, 
        260,   260,   260,   260,     0,     0,   262,   262,     0,     0, 
        269,     0,     0,     0,     0,     0,     0,     0,   263,   263, 
          0,     0,   263,   263,   263,   263,   263,     0,   263,     0, 
          0,     0,     0,   260,   260,     0,     0,   262,   262,   263, 
        263,   263,   263,   263,   263,     0,     0,   264,   264,     0, 
          0,   264,   264,   264,   264,   264,     0,   264,     0,     0, 
          0,     0,     0,     0,   260,   260,     0,     0,   264,   264, 
        264,   264,   264,   264,   263,   263,     0,     0,     0,   269, 
        269,   269,   269,   269,   269,   269,   269,   269,     0,     0, 
        269,   269,     0,   269,   269,   269,   269,   269,   269,     0, 
          0,     0,     0,   264,   264,   263,   263,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   204, 
        193,     0,     0,     0,   202,   200,     0,   201,     0,   203, 
          0,     0,     0,     0,   264,   264,     0,     0,     0,     0, 
        261,   393,   196,   180,   198,   190,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   253,   253,     0,     0,   253,   253,   253,   253,   253, 
          0,   253,     0,     0,     0,     0,   192,     0,     0,     0, 
          0,     0,   253,   253,   253,   253,   253,   253,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   204,   193,     0, 
          0,   456,   202,   200,     0,   201,   191,   203,   206,     0, 
          0,     0,     0,     0,     0,     0,     0,   253,   253,     0, 
        196,   180,   198,   190,     0,   262,     0,     0,   261,   261, 
          0,     0,   261,   261,   261,   261,   261,     0,     0,   261, 
        261,     0,   261,   261,   261,   261,   261,   261,   253,   253, 
          0,     0,   260,     0,   192,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   191,     0,   206,     0,     0,     0, 
          0,     0,     0,   263,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   262,   262,     0,     0,   262,   262,   262, 
        262,   262,   264,     0,   262,   262,     0,   262,   262,   262, 
        262,   262,   262,     0,     0,     0,     0,     0,     0,     0, 
        260,   260,     0,     0,   260,   260,   260,   260,   260,     0, 
          0,   260,   260,     0,   260,   260,   260,   260,   260,   260, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   263,   263,     0,     0,   263,   263,   263,   263,   263, 
          0,     0,   263,   263,   205,   263,   263,   263,   263,   263, 
        263,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        264,   264,     0,   209,   264,   264,   264,   264,   264,     0, 
          0,   264,   264,     0,   264,   264,   264,   264,   264,   264, 
          0,     0,     0,     0,   204,     0,   253,     0,     0,   202, 
        200,     0,   201,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   122,     0,   132,   196,     0,   198, 
          0,   131,     0,     0,   120,     0,   121,     0,     0,     0, 
          0,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,   274,   199,   197,   207,   208,   181,   182,   183,   184, 
        186,   209,     0,   194,   195,     0,   178,   179,   185,   188, 
        187,   189,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    81,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   206,   253,   253,     0,     0,   253,   253, 
        253,   253,   253,     0,     0,   253,   253,     0,   253,   253, 
        253,   253,   253,   253,     0,     0,     0,   123,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        199,   197,   207,   208,   181,   182,   183,   184,   186,     0, 
          0,   194,   195,     0,   178,   179,   185,   188,   187,   189, 
        204,   193,     0,     0,     0,   202,   200,     0,   201,     0, 
        203,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   467,   196,   180,   198,   190,   204,   193,     0, 
          0,   502,   202,   200,     0,   201,     0,   203,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        196,   180,   198,   190,   204,   193,     0,   192,   507,   202, 
        200,     0,   201,     0,   203,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   196,   180,   198, 
        190,     0,     0,     0,   192,     0,     0,   191,     0,   206, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   162,    83,    84,    85,    86,    87,     0,     0,     0, 
          0,   192,     0,     0,   191,     0,   206,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    10,     0,   205, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   191,     0,   206,     0,     0,     0,     0,   209,     0, 
          0,   204,   193,     0,   127,   508,   202,   200,     0,   201, 
          0,   203,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   196,   180,   198,   190,   204,   193, 
          0,   130,   555,   202,   200,     0,   201,   126,   203,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   196,   180,   198,   190,     0,   204,   193,   192,     0, 
        556,   202,   200,     0,   201,     0,   203,   199,   197,   207, 
        208,     0,     0,     0,     0,     0,     0,     0,     0,   196, 
        180,   198,   190,     0,     0,   192,     0,     0,   191,     0, 
        206,     0,   275,   124,   125,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   192,     0,   191,     0,   206,     0,     0, 
          0,     0,     0,     0,     0,   205,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   191,   209,   206,     0,     0,     0,     0, 
          0,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   209,     0,     0,     0,     0,     0,   204,   193,   205, 
          0,     0,   202,   200,     0,   201,     0,   203,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   209,   580, 
        196,   180,   198,   190,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   199,   197,   207,   208,   181,   182,   183, 
        184,   186,     0,     0,   194,   195,     0,   178,   179,   185, 
        188,   187,   189,     0,   192,     0,     0,     0,     0,     0, 
        199,   197,   207,   208,   181,   182,   183,   184,   186,     0, 
          0,   194,   195,     0,   178,   179,   185,   188,   187,   189, 
          0,     0,     0,     0,   191,     0,   206,   199,   197,   207, 
        208,   181,   182,   183,   184,   186,   205,     0,   194,   195, 
          0,   178,   179,   185,   188,   187,   189,     0,     0,     0, 
          0,     0,     0,     0,     0,   209,     0,     0,     0,     0, 
        204,   193,     0,   205,     0,   202,   200,     0,   201,     0, 
        203,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   594,   209,   196,   180,   198,   190,     0,   204,   193, 
          0,   205,     0,   202,   200,     0,   201,     0,   203,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        209,   196,   180,   198,   190,     0,     0,   192,     0,     0, 
          0,     0,     0,     0,   199,   197,   207,   208,   181,   182, 
        183,   184,   186,     0,     0,   194,   195,     0,   178,   179, 
        185,   188,   187,   189,     0,   192,     0,   191,     0,   206, 
          0,   199,   197,   207,   208,   181,   182,   183,   184,   186, 
          0,     0,   194,   195,     0,   178,   179,   185,   188,   187, 
        189,     0,     0,     0,     0,   191,     0,   206,     0,   199, 
        197,   207,   208,   181,   182,   183,   184,   186,     0,     0, 
        194,   195,     0,   178,   179,   185,   188,   187,   189,   259, 
        259,     0,     0,   259,   259,   259,   259,   259,     0,   259, 
          0,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
        259,   259,   259,   259,   259,   259,     0,     0,     0,     0, 
          0,   209,     0,     0,     0,     0,   250,   250,     0,     0, 
        250,   250,   250,   250,   250,     0,   250,     0,     0,     0, 
          0,     0,     0,     0,     0,   259,   259,   250,   250,   250, 
        250,   250,   250,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   251,   251,     0,     0,   251,   251,   251, 
        251,   251,     0,   251,     0,     0,   259,   259,     0,     0, 
          0,     0,   250,   250,   251,   251,   251,   251,   251,   251, 
        199,   197,   207,   208,   181,   182,   183,   184,   186,     0, 
          0,   194,   195,     0,   178,   179,   185,   188,   187,   189, 
          0,     0,     0,   250,   250,     0,     0,     0,     0,   251, 
        251,     0,     0,     0,     0,   205,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   252,   252,     0,     0,   252, 
        252,   252,   252,   252,   209,   252,     0,     0,     0,     0, 
        251,   251,     0,   205,     0,     0,   252,   252,   252,   252, 
        252,   252,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   209,     0,     0,     0,   204,   193,     0,     0, 
          0,   202,   200,     0,   201,     0,   203,     0,     0,     0, 
          0,   252,   252,     0,     0,     0,     0,     0,     0,   196, 
        180,   198,   190,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   199,   197,   207,   208,   181,   182,   183, 
        184,   186,   252,   252,   194,   195,     0,   178,   179,   185, 
        188,   187,   189,   192,     0,     0,     0,     0,     0,     0, 
          0,   199,   197,   207,   208,   181,   182,   183,   184,   186, 
          0,     0,   194,   195,     0,   178,   179,   185,   188,   187, 
        189,     0,     0,   191,     0,   206,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   204,   193,     0,     0,     0, 
        202,   200,     0,   201,     0,   203,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   196,   180, 
        198,   190,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   248,     0,     0,   248,     0,   248,   248, 
        248,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   192,   248,   248,   248,   248,   248,   248,     0, 
          0,     0,   259,   259,     0,     0,   259,   259,   259,   259, 
        259,     0,     0,   259,   259,     0,   259,   259,   259,   259, 
        259,   259,   191,     0,   206,     0,     0,     0,   248,   248, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   250, 
        250,     0,     0,   250,   250,   250,   250,   250,     0,     0, 
        250,   250,     0,   250,   250,   250,   250,   250,   250,   248, 
        248,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   251,   251,     0,     0, 
        251,   251,   251,   251,   251,     0,     0,   251,   251,     0, 
        251,   251,   251,   251,   251,   251,     0,     0,     0,     0, 
          0,   205,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   249,     0,     0,   249, 
        209,   249,   249,   249,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   249,   249,   249,   249, 
        249,   249,     0,     0,     0,     0,     0,     0,   252,   252, 
          0,     0,   252,   252,   252,   252,   252,     0,     0,   252, 
        252,     0,   252,   252,   252,   252,   252,   252,     0,     0, 
          0,   249,   249,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   199, 
        197,   207,   208,   181,   182,   183,   184,   186,     0,     0, 
        194,   195,   249,   249,   179,   185,   188,   187,   189,     0, 
        205,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   240,     0,     0,   240,     0,     0,   240,     0,   209, 
          0,     0,     0,     0,     0,     0,     0,   242,     0,     0, 
        242,   240,   240,   242,   240,     0,   240,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   242,   242,     0, 
        242,     0,   242,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   240,   240,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   242,   242,     0,     0,     0,     0,   199,   197, 
        207,   208,   181,   182,   183,   184,   186,   240,   240,   194, 
        195,     0,     0,     0,   185,   188,   187,   189,     0,     0, 
          0,     0,     0,   242,   242,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   248,   248,     0,     0,   248, 
        248,   248,   248,   248,     0,     0,   248,   248,     0,   248, 
        248,   248,   248,   248,   248,   241,     0,     0,   241,     0, 
          0,   241,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   243,     0,     0,   243,   241,   241,   243,   241,     0, 
        241,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   243,   243,     0,   243,     0,   243,     0,   204,   193, 
          0,     0,     0,   202,   200,     0,   201,     0,   203,     0, 
        241,   241,   258,     0,     0,   258,     0,     0,   258,     0, 
          0,   196,     0,   198,     0,     0,   243,   243,     0,     0, 
          0,     0,   258,   258,     0,   258,     0,   258,     0,     0, 
          0,   241,   241,     0,     0,     0,     0,     0,     0,   239, 
          0,     0,   239,     0,     0,   239,     0,   243,   243,     0, 
          0,     0,     0,     0,     0,     0,     0,   258,   258,   239, 
        239,     0,   239,     0,   239,     0,     0,     0,   249,   249, 
          0,     0,   249,   249,   249,   249,   249,   206,     0,   249, 
        249,     0,   249,   249,   249,   249,   249,   249,   258,   258, 
          0,     0,     0,     0,   239,   239,   257,     0,     0,   257, 
          0,     0,   257,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   238,     0,     0,   238,   257,   257,   238,   257, 
          0,   257,     0,     0,     0,   239,   239,     0,     0,     0, 
          0,     0,   238,   238,     0,   238,   204,   238,     0,     0, 
          0,   202,   200,     0,   201,     0,   203,     0,     0,     0, 
          0,   257,   257,     0,     0,     0,     0,     0,     0,   196, 
          0,   198,     0,     0,     0,     0,     0,   238,   238,     0, 
          0,     0,     0,     0,     0,     0,     0,   240,   240,   240, 
        240,   240,   257,   257,   240,   240,     0,   240,   240,   240, 
        240,   240,   240,   242,   242,   242,   242,   242,   238,   238, 
        242,   242,     0,   242,   242,   242,   242,   242,   242,   244, 
          0,     0,   244,     0,   122,   244,   132,     0,     0,     0, 
          0,   131,     0,     0,   120,   206,   121,     0,     0,   244, 
        244,     0,   244,   254,   244,     0,   254,     0,     0,     0, 
          0,     0,     0,   278,     0,     0,   245,     0,     0,   245, 
        254,   254,   245,   254,     0,   254,     0,     0,     0,     0, 
          0,     0,     0,   205,   244,   244,   245,   245,     0,   245, 
          0,   245,    81,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   209,     0,     0,   254,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   244,   244,     0,     0,     0, 
          0,   245,   245,     0,     0,     0,     0,   123,     0,     0, 
          0,   241,   241,   241,   241,   241,   254,   254,   241,   241, 
          0,   241,   241,   241,   241,   241,   241,   243,   243,   243, 
        243,   243,   245,   245,   243,   243,     0,   243,   243,   243, 
        243,   243,   243,     0,     0,     0,     0,     0,     0,     0, 
          0,   199,   197,   207,   208,     0,     0,     0,     0,     0, 
          0,     0,   194,   195,     0,     0,     0,     0,   258,   258, 
        258,   258,   258,     0,     0,   258,   258,     0,   258,   258, 
        258,   258,   258,   258,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   239,   239,   239,   239,   239, 
          0,   205,   239,   239,     0,   239,   239,   239,   239,   239, 
        239,     0,     0,     0,     0,     0,   204,   193,     0,     0, 
        209,   202,   200,     0,   201,     0,   203,     0,     0,     0, 
          0,   162,    83,    84,    85,    86,    87,     0,     0,   196, 
          0,   198,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   257,   257,   257,   257,   257,    10,     0,   257, 
        257,     0,   257,   257,   257,   257,   257,   257,   238,   238, 
        238,   238,   238,   192,     0,   238,   238,     0,   238,   238, 
        238,   238,   238,   238,   127,     0,     0,     0,     0,   199, 
        197,   207,   208,     0,     0,     0,     0,     0,     0,     0, 
        194,   195,     0,   191,     0,   206,     0,     0,     0,     0, 
          0,   130,     0,     0,   122,     0,   132,   126,     0,     0, 
          0,   131,     0,     0,   120,   122,   121,   132,     0,     0, 
          0,     0,   131,     0,   122,   120,   132,   121,     0,   119, 
          0,   131,     0,     0,   120,     0,   121,     0,     0,     0, 
          0,     0,     0,   270,     0,     0,     0,     0,     0,     0, 
          0,     0,   272,     0,     0,   244,   244,   244,   244,   244, 
          0,   279,    81,   124,   125,   244,   244,   244,   244,   244, 
        244,     0,     0,    81,     0,     0,   254,   254,   254,   254, 
        254,     0,    81,     0,     0,     0,   254,   254,   254,   254, 
        254,   254,   245,   245,   245,   245,   245,   123,     0,     0, 
          0,     0,   245,   245,   245,   245,   245,   245,   123,     0, 
          0,   122,     0,   132,     0,     0,     0,   123,   131,     0, 
          0,   120,   122,   121,   132,     0,     0,     0,     0,   131, 
          0,     0,   120,     0,   121,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    81, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         81,   205,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        209,   369,     0,     0,   123,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   123,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   128,   129,    84,    85,    86,    87,     0,     0,     0, 
          0,     0,   162,    83,    84,    85,    86,    87,     0,     0, 
          0,   162,    83,    84,    85,    86,    87,    10,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    10,   199, 
        197,   207,   208,     0,     0,     0,     0,    10,     0,     0, 
        194,   195,     0,     0,   127,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   127,     0,     0,     0,     0, 
          0,     0,     0,     0,   127,     0,     0,     0,     0,     0, 
          0,   130,     0,     0,     0,     0,     0,   126,     0,     0, 
          0,     0,   130,     0,     0,     0,     0,     0,   126,     0, 
          0,   130,     0,     0,     0,     0,     0,   126,   162,    83, 
         84,    85,    86,    87,     0,     0,     0,     0,     0,   162, 
         83,    84,    85,    86,    87,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    10,     0,     0,     0,     0,     0, 
          0,     0,     0,   124,   125,    10,     0,     0,     0,     0, 
          0,     0,     0,     0,   124,   125,     0,     0,     0,     0, 
          0,   127,     0,   124,   125,     0,     0,     0,     0,     0, 
          0,     0,   127,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   130,     0, 
          0,     0,     0,     0,   126,     0,     0,     0,     0,   130, 
          0,     0,     0,     0,     0,   126,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        124,   125,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   124,   125, 
    );
    protected static $yyCheck = array(4,
         60,    61,    62,   113,   124,    46,    58,   412,    13,    59, 
        126,    40,   126,    46,    41,    69,    38,    44,    91,    41, 
        260,    91,    44,   123,   125,    44,    59,   303,    33,    34, 
        158,    58,    59,    93,    39,    95,    58,    59,   406,    61, 
         59,    63,    42,   304,   217,    99,   100,    46,    91,   159, 
         91,   456,    40,   113,   125,    60,    61,    62,    41,   125, 
        300,    44,    67,    68,   260,    41,    93,    41,    44,   174, 
         44,    93,    94,   123,    41,    58,    59,    44,    41,    41, 
         59,    44,    58,    59,    58,    59,    46,    92,    93,   260, 
         95,    58,    59,    59,    59,    58,    59,    59,   125,   159, 
         91,    59,   124,   125,   300,   484,   125,    44,   113,   169, 
         93,     5,   283,    44,   482,   286,    64,    93,   291,    93, 
         14,    41,    41,    44,    44,    44,    93,    91,    59,   300, 
         93,    93,   243,   512,   239,   123,    46,    91,    58,    59, 
         44,   246,   125,    41,   123,   205,    44,   152,   153,   125, 
        155,   125,    44,    98,   159,   410,    93,   123,   125,   260, 
         58,    59,   125,   125,   169,   123,    63,    93,   364,    44, 
         62,   176,    93,    93,    93,   120,   121,   122,   123,   124, 
        125,   330,   127,   311,   260,   260,   131,   260,   125,    93, 
        260,   340,    37,   364,    91,    93,   312,    42,    60,   125, 
        205,   312,    47,   314,   209,   125,   379,   257,   260,   261, 
        286,   311,   125,   286,    46,   331,   286,   331,    93,   324, 
        340,   125,    58,   334,   229,   300,   171,   125,   173,    91, 
         91,   260,   360,   178,   179,   180,   181,   182,   183,   184, 
        185,   186,   187,   188,   189,   190,   191,   192,   193,   194, 
        195,   196,   197,   198,   199,   200,   201,   202,   203,   204, 
        260,   206,   373,   368,   340,   340,    91,   378,    93,   260, 
        340,   300,   217,    33,    41,    35,    41,    44,   257,    44, 
         40,   126,    40,    43,    63,    45,   402,   403,   402,   403, 
         59,    58,    59,    58,    59,   286,   260,   340,   243,   257, 
        300,    60,   373,   374,   446,   447,   260,   373,   374,   260, 
        261,    61,    91,    37,    38,   320,   427,    41,    42,    43, 
        310,    45,   216,    47,   260,   270,    93,   272,    93,   274, 
        275,    91,   286,   278,   279,   364,    60,    61,    62,    63, 
         46,   395,    46,   485,    40,    40,   291,   260,    44,   340, 
        286,    46,    58,    40,   459,    59,   320,    40,   125,    46, 
        125,    44,    61,    59,   364,   125,   126,   312,   332,   314, 
         94,    58,   310,   286,   319,    40,   340,    91,   332,   420, 
        325,    46,   404,   405,   406,   407,   408,   414,   415,   334, 
        501,   396,   414,   415,   416,   417,   418,   419,   260,   260, 
        124,   406,   126,   513,    41,    44,    33,    44,    35,    41, 
         93,   125,    48,    40,   344,   345,    43,   362,    45,   332, 
        260,    58,    59,    62,    61,   286,    63,   123,   373,   125, 
         66,   414,   415,   378,   379,   544,   545,   382,   414,   415, 
        414,   446,   447,   554,   373,   374,   286,   414,   415,   123, 
        310,   414,   415,   513,   311,    58,    93,    94,   320,   123, 
        569,    91,   407,    41,    91,    41,    44,   312,    44,    44, 
        332,   332,    41,    41,    44,    44,    44,   482,   340,   340, 
        485,   260,   427,   428,   489,   123,   331,   124,   125,   123, 
        435,   436,   332,    41,   414,   415,    44,    58,   125,   126, 
        260,   261,   262,   263,   264,   265,    41,   286,   513,    44, 
        570,    59,    41,    44,   410,    44,   414,   415,    93,   464, 
         41,    93,    41,    44,   502,    44,   286,   519,   520,   507, 
        590,   476,    33,    44,    35,    93,   123,    58,    59,    40, 
         59,    37,    43,   260,    45,    93,    42,    43,   260,    45, 
        125,    47,   125,   313,   546,    40,   501,   402,   403,   504, 
        123,   506,    44,    91,   123,   570,   280,   281,   282,   283, 
        284,   285,    93,   287,    93,   257,    41,   125,   556,    44, 
        340,   341,   342,   343,    58,   590,   346,    40,   312,   303, 
         91,    58,   260,    58,    59,   540,    61,   575,    63,   123, 
        360,   361,   362,   363,   125,   365,   366,   331,   586,   554, 
        370,   371,   372,   373,   374,   300,   301,   302,   260,    40, 
        334,    91,   123,    41,    40,   126,    40,    93,    93,    61, 
        126,   576,   125,   260,   261,   262,   263,   264,   265,   300, 
        301,   302,   402,   403,    40,    40,    91,   414,   415,   414, 
        415,    33,    61,    35,   123,    41,    41,   125,    40,   286, 
        125,    43,   350,    45,   125,   125,    40,   340,    40,    40, 
        430,    40,    59,    40,   340,    59,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    40,   313,   411,   412,    59, 
        414,   415,   416,   417,   418,   419,   260,   385,   125,    41, 
         37,    38,    44,    91,    41,    42,    43,    44,    45,    91, 
         47,    41,    41,   340,   341,   342,   343,    59,    59,   346, 
        361,    58,    59,    60,    61,    62,    63,    61,   340,    61, 
         46,    59,   260,   360,   361,   362,   363,    41,   365,   366, 
         93,    44,   125,   370,   126,   372,   373,   374,   123,    59, 
         40,    93,   125,    44,    91,   364,    93,    94,   286,   260, 
        261,   262,   263,   264,   265,   123,   260,   404,   405,   406, 
        407,   408,   300,   301,   302,   402,   403,   414,   415,   416, 
        417,   418,   419,   125,   321,   286,   340,   124,   125,   126, 
        260,   261,   262,   263,   264,   265,    41,    41,   340,   123, 
         41,    37,    38,   430,   332,    41,    42,    43,    44,    45, 
         46,    47,   313,   125,   502,    41,   312,   125,    44,   507, 
         91,    59,    58,    59,    60,    61,    62,    63,   371,   125, 
        300,    40,    58,    59,   123,   331,    59,   125,    37,   340, 
        341,   342,   343,    42,    43,   346,    45,   125,    47,    41, 
         58,   125,    41,   123,    41,    91,   125,    93,    94,   360, 
        361,   362,   363,   123,   365,   366,   123,    93,   556,   370, 
        125,   372,   260,   261,   262,   263,   264,   265,   260,   261, 
        262,   263,   264,   265,    58,   125,    93,   575,   124,   125, 
        126,   257,    41,   414,   415,    91,    91,    91,   586,   125, 
         91,   402,   403,   257,   286,    93,   402,   403,   125,    92, 
        125,    37,    38,   123,    59,    41,    42,    43,    44,    45, 
         46,    47,   125,    59,    41,    59,    41,   126,    41,   430, 
        364,   313,    58,    59,    60,    61,    62,    63,    41,   404, 
        405,   406,   407,   408,    41,    41,   125,   125,    44,   414, 
        415,   416,   417,   418,   419,     7,    49,     6,   340,   341, 
        342,   343,    58,    59,   346,    91,    97,    93,    94,    75, 
        153,   310,   155,   453,    41,   312,   447,    44,   360,   361, 
        362,   363,    91,   365,   366,   489,   169,    59,   370,   260, 
        372,    58,    59,   176,   331,    58,   209,    93,   124,   125, 
        126,   280,   281,   282,   283,   284,   285,    91,   287,   280, 
        281,   282,   283,   284,   285,   286,   287,   102,   465,   477, 
        402,   403,   562,   526,   303,   169,    93,   526,   169,   125, 
         37,    38,   303,   315,    41,    42,    43,    44,    45,    46, 
         47,   125,   219,   320,   215,   155,   229,    30,   430,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,   125,    -1, 
         -1,   332,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,   312,   414,   415,   416, 
        417,   418,   419,   420,    91,    -1,    93,    94,    -1,   280, 
        281,   282,   283,   284,   285,   331,   287,   369,    37,    38, 
         -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    -1, 
         41,    -1,   303,    44,    -1,    -1,    -1,   124,   125,   126, 
         -1,    60,    61,    62,    63,    -1,    -1,    58,    59,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1, 
         -1,    -1,    -1,   334,    -1,    -1,    -1,    -1,    -1,    -1, 
        422,   260,    91,    -1,    93,    94,    -1,   429,    -1,    -1, 
         -1,    -1,    93,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    91,   411,   412,   286,   414,   415, 
        416,   417,   418,   419,   420,   124,   312,   126,   414,   415, 
         -1,   300,   301,   302,   125,    -1,   280,   281,   282,   283, 
        284,   285,    -1,   287,    -1,   331,    -1,    -1,    37,    38, 
         -1,    -1,    -1,    42,    43,    44,    45,    46,    47,   303, 
        492,    -1,    -1,   332,    -1,    -1,    -1,    -1,   500,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,   511, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    93,    94,    -1,    -1,    -1,    -1, 
        542,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   420,   124,    -1,   126,    -1,   571, 
         -1,    -1,    -1,    91,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   589,   414,   415, 
         -1,    -1,   594,    -1,   331,    -1,    -1,   599,    37,    38, 
         91,    40,    41,    42,    43,    44,    45,   125,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   414,   415,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   280,   281,   282,   283,   284,   285,    -1, 
        287,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    93,    94,   303,    -1,    -1,    -1, 
         -1,    -1,   331,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,   123,   124,   125,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    -1,    62,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   410,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   420,    -1,   312,    -1,    -1,    94,    -1,    -1,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,    -1,   287, 
         -1,    -1,   331,    -1,    -1,    -1,    37,    38,    -1,    40, 
         41,    42,    43,    44,    45,   303,    47,    -1,   126,   280, 
        281,   282,   283,   284,   285,    -1,   287,    58,    59,    -1, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   300, 
        301,   302,    91,   304,    -1,    -1,   334,    -1,   257,    -1, 
         -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    93,    94,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   420,   123,   124,   125,   126,    -1,    -1,    -1,    -1, 
         -1,   310,   311,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   320,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   330,   331,   332,    -1,    -1,    -1,    -1,    37,    38, 
         -1,   340,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    60,    61,    62,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   410,   411,   412,   312,   414,   415,   416,   417,   418, 
        419,    93,    94,    -1,    -1,   124,   125,   126,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    -1,   257,    -1,    -1,   260, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,   300,   301,   302,   303,   280,   281,   282,   283,   284, 
        285,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   300,   301,   302,   303,   310, 
        311,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   320, 
         -1,    -1,   400,   401,   402,   403,    -1,    -1,    -1,   330, 
        331,   332,    -1,   411,   412,    -1,    37,    38,    -1,   340, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,   340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    93,    94,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         37,    38,   124,   125,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    -1,    -1,    93,    94,    -1,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    93,    94,    -1,    -1,   124,   125,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    93,    94,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    93,    94,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
        312,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,   124,    47,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         60,    61,    62,    63,    -1,   312,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   124,   125, 
         -1,    -1,   312,    -1,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,   312,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,   312,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,   331,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    37,    -1,   312,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    33,    -1,    35,    60,    -1,    62, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   331,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         37,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    59,    60,    61,    62,    63,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    37,    38,    -1,    94,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    94,    -1,    -1,   124,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,    -1,    -1,    -1, 
         -1,    94,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,    -1,   126,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    37,    38,    -1,   313,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    37,    38, 
         -1,   340,    41,    42,    43,    -1,    45,   346,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    37,    38,    94,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,   400,   401,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    94,    -1,    -1,   124,    -1, 
        126,    -1,   401,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    -1,   124,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,   331,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    -1,    37,    38,   312, 
         -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    59, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    94,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,   124,    -1,   126,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         37,    38,    -1,   312,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,   331,    60,    61,    62,    63,    -1,    37,    38, 
         -1,   312,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    60,    61,    62,    63,    -1,    -1,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    94,    -1,   124,    -1,   126, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,   124,    -1,   126,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    94,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,   124,   125,    -1,    -1, 
         -1,    -1,    93,    94,    58,    59,    60,    61,    62,    63, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,   331,    47,    -1,    -1,    -1,    -1, 
        124,   125,    -1,   312,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    37,    38,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    43,    44, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    94,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,   400,   401,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   124,    -1,   126,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41, 
        331,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,   124,   125,   415,   416,   417,   418,   419,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    58,    59,    44,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   124,   125,   411, 
        412,    -1,    -1,    -1,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         93,    94,    38,    -1,    -1,    41,    -1,    -1,    44,    -1, 
         -1,    60,    -1,    62,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,   126,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   124,   125, 
         -1,    -1,    -1,    -1,    93,    94,    38,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    38,    -1,    -1,    41,    58,    59,    44,    61, 
         -1,    63,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    37,    63,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         -1,    62,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   404,   405,   406,   407,   408,   124,   125, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    38, 
         -1,    -1,    41,    -1,    33,    44,    35,    -1,    -1,    -1, 
         -1,    40,    -1,    -1,    43,   126,    45,    -1,    -1,    58, 
         59,    -1,    61,    41,    63,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,    62,    -1,    -1,    38,    -1,    -1,    41, 
         58,    59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    93,    94,    58,    59,    -1,    61, 
         -1,    63,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    93,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,   124,   125,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   411,   412,    -1,    -1,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,   312,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1, 
        331,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,    -1,    -1,    60, 
         -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,   286,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   404,   405, 
        406,   407,   408,    94,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   313,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        411,   412,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    33,    -1,    35,   346,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    33,    45,    35,    -1,    -1, 
         -1,    -1,    40,    -1,    33,    43,    35,    45,    -1,    58, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1, 
         -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    61,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,   400,    91,   402,   403,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    91,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    91,    -1,    -1,    -1,   414,   415,   416,   417, 
        418,   419,   404,   405,   406,   407,   408,   126,    -1,    -1, 
         -1,    -1,   414,   415,   416,   417,   418,   419,   126,    -1, 
         -1,    33,    -1,    35,    -1,    -1,    -1,   126,    40,    -1, 
         -1,    43,    33,    45,    35,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,   286,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,   400, 
        401,   402,   403,    -1,    -1,    -1,    -1,   286,    -1,    -1, 
        411,   412,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,   346,   260,   261, 
        262,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   402,   403,   286,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,   313,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1, 
         -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 182 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 194 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 194 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 205 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 206 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 210 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 10:  #line 213 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new NativeImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 11:  #line 216 "grammar/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 15:  #line 228 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 17:  #line 233 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 240 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 20:  #line 240 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 21:  #line 249 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 22:  #line 249 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 23:  #line 258 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 24:  #line 258 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 25:  #line 269 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 26:  #line 270 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 27:  #line 274 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 28:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 29:  #line 279 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 30:  #line 280 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 31:  #line 284 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 32:  #line 285 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 33:  #line 289 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 34:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 35:  #line 294 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 36:  #line 295 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 296 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 38:  #line 300 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 39:  #line 301 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 40:  #line 302 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 41:  #line 306 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 42:  #line 307 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 43:  #line 311 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 44:  #line 311 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 45:  #line 314 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 46:  #line 314 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 47:  #line 324 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 48:  #line 331 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 49:  #line 338 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 50:  #line 344 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 51:  #line 345 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 52:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 53:  #line 350 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 54:  #line 354 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 55:  #line 355 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 56:  #line 359 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 57:  #line 360 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 58:  #line 366 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 59:  #line 366 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 60:  #line 377 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 61:  #line 377 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 62:  #line 388 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 63:  #line 388 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 64:  #line 413 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 65:  #line 413 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 66:  #line 426 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 67:  #line 427 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 68:  #line 431 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 69:  #line 432 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 70:  #line 436 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 71:  #line 439 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 72:  #line 443 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 450 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 74:  #line 455 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 460 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 467 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 77:  #line 468 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 78:  #line 472 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 79:  #line 473 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 477 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 81:  #line 478 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 82:  #line 479 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 83:  #line 483 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 84:  #line 484 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 85:  #line 485 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 86:  #line 489 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 87:  #line 490 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 88:  #line 494 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 89:  #line 495 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 90:  #line 499 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 91:  #line 500 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 92:  #line 501 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 93:  #line 505 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 94:  #line 506 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 95:  #line 510 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 96:  #line 511 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 103:  #line 530 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 105:  #line 535 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 106:  #line 536 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 107:  #line 540 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 108:  #line 540 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 109:  #line 543 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 110:  #line 543 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 111:  #line 548 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 112:  #line 548 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 113:  #line 558 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 114:  #line 558 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 115:  #line 563 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 116:  #line 563 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 117:  #line 567 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 118:  #line 567 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 119:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 120:  #line 571 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 121:  #line 575 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 123:  #line 576 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 125:  #line 577 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 126:  #line 577 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 127:  #line 580 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 128:  #line 580 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 129:  #line 585 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 130:  #line 588 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 132:  #line 595 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 133:  #line 596 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 134:  #line 600 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 135:  #line 603 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 136:  #line 610 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 137:  #line 611 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 138:  #line 615 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 139:  #line 621 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 140:  #line 622 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 141:  #line 626 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 143:  #line 631 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 144:  #line 632 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 145:  #line 636 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 146:  #line 636 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 147:  #line 640 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 148:  #line 640 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 149:  #line 646 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 150:  #line 647 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 151:  #line 651 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 152:  #line 652 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 153:  #line 652 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 154:  #line 657 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 155:  #line 658 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 156:  #line 662 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 157:  #line 663 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 158:  #line 667 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 159:  #line 667 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 160:  #line 681 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 161:  #line 682 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 162:  #line 686 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 164:  #line 691 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 165:  #line 691 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 166:  #line 699 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 168:  #line 704 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 169:  #line 705 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 170:  #line 709 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 172:  #line 714 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 173:  #line 720 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 174:  #line 725 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 175:  #line 733 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 176:  #line 736 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 177:  #line 739 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 178:  #line 742 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 179:  #line 748 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 180:  #line 748 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 181:  #line 754 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 182:  #line 760 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 183:  #line 760 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 184:  #line 769 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 185:  #line 769 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 186:  #line 779 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 187:  #line 779 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 188:  #line 788 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 189:  #line 791 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 190:  #line 794 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 191:  #line 797 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 192:  #line 800 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 193:  #line 803 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 806 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 195:  #line 810 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 196:  #line 816 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 197:  #line 822 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 198:  #line 828 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 199:  #line 833 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 200:  #line 833 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 201:  #line 839 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 202:  #line 850 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 203:  #line 853 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 204:  #line 859 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 206:  #line 864 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 207:  #line 865 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 208:  #line 869 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 209:  #line 870 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 210:  #line 874 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 211:  #line 880 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 212:  #line 880 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 213:  #line 881 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 214:  #line 882 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 215:  #line 883 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 216:  #line 884 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 885 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 889 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 219:  #line 892 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 220:  #line 898 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 222:  #line 903 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 223:  #line 904 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 224:  #line 908 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 226:  #line 913 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 227:  #line 914 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 918 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 229:  #line 919 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 230:  #line 920 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 231:  #line 921 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 922 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 923 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 924 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 925 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 926 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 927 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 928 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 239:  #line 929 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 240:  #line 933 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 241:  #line 934 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 935 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 936 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 937 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 938 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 939 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 247:  #line 940 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 248:  #line 944 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 249:  #line 945 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 250:  #line 946 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 947 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 948 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 949 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 950 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 951 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 258:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 259:  #line 958 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 260:  #line 959 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 960 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 961 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 962 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 963 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 967 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 266:  #line 968 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 267:  #line 973 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 269:  #line 978 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 270:  #line 979 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 271:  #line 983 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 272:  #line 983 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 273:  #line 986 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 274:  #line 989 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 275:  #line 989 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 276:  #line 992 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 277:  #line 992 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 278:  #line 998 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 279:  #line 999 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 286:  #line 1017 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 287:  #line 1018 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 288:  #line 1022 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 289:  #line 1026 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 290:  #line 1030 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 291:  #line 1031 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 293:  #line 1036 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 294:  #line 1040 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 295:  #line 1041 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 296:  #line 1047 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 297:  #line 1048 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 298:  #line 1052 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 299:  #line 1053 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 300:  #line 1057 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 301:  #line 1058 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 302:  #line 1059 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 303:  #line 1060 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 304:  #line 1061 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 305:  #line 1062 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 306:  #line 1063 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 307:  #line 1064 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2787 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
