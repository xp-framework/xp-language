<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     7,     7, 
          7,     7,     9,     9,     8,     8,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    52,    52,    53,    53, 
         42,    42,    42,    39,    39,    39,    44,    44,    54,    54, 
         37,    37,    37,    55,    55,    41,    41,    46,    46,    46, 
         46,    46,    46,    26,    26,    56,    56,    59,    57,    60, 
         57,    63,    57,    65,    57,    67,    57,    68,    57,    69, 
         57,    71,    57,    72,    57,    73,    57,    74,    57,    57, 
         57,    57,    76,    76,    78,    78,    77,    77,    79,    66, 
         66,    70,    70,    80,    80,    82,    81,    83,    81,    61, 
         61,    62,    84,    62,    75,    75,    85,    85,    89,    88, 
         90,    90,    86,    86,    91,    87,    64,    64,    92,    92, 
         58,    58,    93,    93,    93,    97,    97,    97,    97,    99, 
         31,    31,   100,    31,   101,    31,   102,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,   110, 
         31,    31,   109,   109,   108,   108,   111,   111,   112,   112, 
         36,   114,    36,    36,    36,    36,    36,    36,   113,   113, 
         96,    96,   115,   115,   117,   117,   116,   116,   103,   103, 
        103,   103,   103,   103,   103,   103,   103,   103,   103,   103, 
        104,   104,   104,   104,   104,   104,   104,   104,   105,   105, 
        105,   105,   105,   105,   105,   105,   105,   105,   105,   106, 
        106,   106,   106,   106,   106,   107,   107,    98,    98,   118, 
        118,   120,   119,   119,   122,   119,   123,   119,   121,   121, 
         10,    10,    10,    32,    32,    32,    12,    12,    94,    95, 
        124,   124,   125,   125,    21,    21,    49,    49,   126,   126, 
        127,   127,   127,   127,   127,   127,   127,   127, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     5,     6, 
          6,     6,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     3,     3,     0,     2,     1,     0,     1,     1,     3, 
          3,     3,     4,     1,     2,     0,     2,     1,     1,     1, 
          1,     1,     1,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     8,     0, 
          8,     0,     3,     0,     3,     0,     4,     0,     6,     7, 
          7,     2,     1,     3,     1,     3,     1,     3,     3,     1, 
          3,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          1,     3,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     4,     4,     1,     4,     1,     1,     0, 
          3,     2,     0,     4,     0,     5,     0,     6,     2,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     3,     0, 
          8,     4,     1,     3,     0,     1,     1,     3,     1,     2, 
          1,     0,     4,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     3,     0,     1,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     4,     4, 
          3,     3,     3,     3,     3,     3,     4,     4,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     4,     4,     2, 
          2,     2,     2,     2,     2,     2,     2,     0,     1,     1, 
          2,     0,     4,     2,     0,     6,     0,     5,     1,     1, 
          1,     1,     1,     1,     1,     1,     1,     4,     3,     4, 
          1,     3,     1,     3,     1,     3,     0,     1,     1,     2, 
          1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,   281,     0,     0,   283,   282,     0,    15,     0,   301, 
        303,   302,   305,   307,   306,   308,   304,     1,     0,    68, 
          0,   299,     8,     0,     0,     4,     0,     0,     0,     0, 
          0,    69,    20,    24,    22,   300,    18,    19,     0,     0, 
          0,    14,     0,     0,     0,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,    13,     0,     0,     9,     0,     0, 
          0,    70,    67,     0,     0,     0,     0,    11,    12,    10, 
         74,    75,   212,     0,   218,   214,   217,   215,   216,     0, 
          0,     0,    77,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    72,     0,    73,     0,     0,   284,     0,   285, 
        286,     0,   291,    27,     0,     0,     0,    31,    35,     0, 
        221,     0,     0,     0,     0,     0,     0,   183,     0,     0, 
          0,   180,     0,     0,     0,     0,     0,   219,     0,   220, 
        191,   192,   193,   194,   195,     0,     0,   223,   211,    79, 
         80,     0,    78,     0,     0,     0,     0,   288,    29,    35, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   189,     0,   187,     0,     0,     0,     0,   185,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   266,   267, 
          0,   272,   280,   279,   182,   269,     0,     0,     0,   213, 
          0,   294,     0,   289,   292,     0,   296,     0,     0,    25, 
          0,    34,    36,    37,     0,     0,     0,    42,     0,     0, 
          0,     0,     0,     0,     0,     0,   181,     0,   209,     0, 
          0,     0,   207,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   199,     0, 
          0,   190,     0,   271,   277,     0,   170,     0,     0,   226, 
        224,   290,    21,     0,     0,     0,     0,     0,     0,     0, 
         23,     0,    35,     0,   184,     0,     0,     0,   202,   210, 
          0,     0,     0,   179,   176,     0,     0,     0,     0,     0, 
          0,     0,     0,    95,     0,     0,   275,   108,     0,   126, 
        112,   116,   118,   114,   122,   124,   110,   120,     0,     0, 
          0,     0,   106,     0,    63,     0,     0,     0,     0,     0, 
          0,    35,    45,     0,    43,     0,     0,     0,     0,     0, 
          0,     0,     0,   208,     0,   186,     0,   273,     0,     0, 
          0,   128,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    38,   132,   107,     0,     0,    61,    59, 
         98,    99,   100,   101,   102,   103,     0,     0,     0,     0, 
          0,     0,     0,     0,   174,   175,   188,     0,   200,     0, 
        278,     0,     0,     0,     0,     0,   133,     0,     0,     0, 
          0,   150,     0,     0,   123,   125,     0,     0,     0,     0, 
        137,     0,     0,    89,     0,     0,     0,     0,     0,    65, 
          0,     0,    48,     0,     0,    53,    33,     0,   173,   204, 
          0,   177,   276,   109,     0,     0,     0,     0,   127,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         50,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    52,    55,     0,    49,    54,    47,   201,     0,     0, 
        134,     0,     0,     0,   151,     0,     0,     0,     0,     0, 
          0,   138,     0,     0,     0,     0,    90,    92,    91,     0, 
          0,     0,     0,     0,   159,   165,   129,     0,   156,   157, 
          0,     0,   117,     0,   141,     0,     0,     0,     0,    93, 
         97,     0,    81,     0,    64,     0,     0,     0,    56,     0, 
          0,   155,   164,   158,   130,     0,     0,     0,   153,   111, 
        146,   148,     0,     0,   144,   131,     0,     0,    62,    60, 
          0,     0,     0,     0,   119,   115,     0,     0,     0,   121, 
        145,    83,    82,    66,   161,     0,     0,     0,   154,     0, 
          0,     0,     0,   166,   113,     0,   149,   162,     0,   147, 
          0,     0,   160, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    28,   135,     4,     7,     8,    17,    53,    18, 
        231,   108,    61,    96,   116,   162,    63,   236,    62,    98, 
        118,   363,   232,   233,   234,   350,   237,   238,   309,   310, 
        351,   291,   410,   361,   455,   137,   444,   456,   488,   449, 
        516,   545,   448,   445,   398,   407,   491,    41,    30,    42, 
         58,    92,    93,   446,   447,   352,   353,   268,   381,   391, 
        433,   560,   385,   138,   388,   475,   386,   387,   392,   563, 
        389,   390,   384,   424,   527,   426,   440,   427,   441,   564, 
        565,   578,   579,   577,   528,   552,   529,   530,   550,   586, 
        551,   139,   241,   110,   111,   140,   326,   215,   176,   171, 
        254,   245,   141,   142,   143,   144,   145,   251,   373,   461, 
        252,   253,   146,   100,   147,   148,   301,   216,   217,   293, 
        218,   380,   336,   112,   113,    31,    32, 
    );
    protected static $yySindex = array(         -279,
          0,     0,  -108,    25,   253,  1167,  -108,     0,   163,   177, 
        124,     0,  -174,  -174,     0,     0,   187,     0,   201,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   140,     0, 
        871,     0,     0,    25,    25,     0,   -44,   260,     8,  -172, 
         40,     0,     0,     0,     0,     0,     0,     0,     8,     8, 
          8,     0,   251,     0,   255,   284,     0,   321,   201,   871, 
         25,    25,    25,   315,     0,   320,   322,     0,    25,    25, 
        739,     0,     0,   333,    89,   121,    89,     0,     0,     0, 
          0,     0,     0,   336,     0,     0,     0,     0,     0,   389, 
        381,   405,     0,    57,    25,   146,    25,   338,   146,  4296, 
        398,   398,     0,  -185,     0,   149,   413,     0,   372,     0, 
          0,   164,     0,     0,    25,   350,   452,     0,     0,   376, 
          0,  4687,  4687,  4687,  4687,  4687,  4687,     0,  4687,   498, 
        454,     0,  4687,   393,   113,  3277,   -42,     0,   486,     0, 
          0,     0,     0,     0,     0,   447,   497,     0,     0,     0, 
          0,   336,     0,    25,   -66,   458,    57,     0,     0,     0, 
         25,   427,   287,   305,  -109,  -109,  -115,  -109,  -109,  -109, 
        -66,     0,  4687,     0,  4687,   -42,  2122,   -54,     0,  4687, 
       4687,  4687,  4687,  4687,  4687,  4687,  4687,  4687,  4687,  4687, 
       4687,  4687,  4687,  4687,  4687,  4541,  4555,  4165,  4687,  4447, 
       4687,  4687,  4687,  4687,  4687,  4687,    25,  4687,     0,     0, 
        -66,     0,     0,     0,     0,     0,   -42,    23,  4687,     0, 
        -88,     0,   263,     0,     0,   737,     0,   432,   297,     0, 
        -68,     0,     0,     0,     0,   434,    11,     0,   533,   372, 
        -42,   446,   451,  3277,  4687,  3277,     0,   -42,     0,   -69, 
        323,   540,     0,  -171,  3306,  3403,  3403,  3403,  3403,  3403, 
       3403,  3403,  3403,  3403,  3403,  3403,  3277,   538,  4372,   277, 
         65,  4687,  1202,  4687,  1202,  4687,  4687,   808,   808,  4687, 
       4687,   808,   808,   529,   529,  -115,  -115,  -115,     0,  -109, 
         98,     0,  4687,     0,     0,   547,     0,   554,   454,     0, 
          0,     0,     0,   527,   349,   312,   353,   138,   499,   580, 
          0,   287,     0,  4687,     0,  4687,    73,   582,     0,     0, 
       4600,   -54,   581,     0,     0,   -42,  4687,  3403,  3403,   808, 
        808,   808,   808,     0,   535,  4687,     0,     0,    16,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   591,   507, 
       2159,   527,     0,   578,     0,   600,   601,   835,   553,   584, 
        519,     0,     0,  4687,     0,   691,   607,   524,   525,   -42, 
        527,  3277,   531,     0,  4687,     0,  4275,     0,   613,  4687, 
       4687,     0,   317,  4687,   624,   625,   455,   629,   615,   616, 
        641,   644,   342,     0,     0,     0,   398,    52,     0,     0, 
          0,     0,     0,     0,     0,     0,   645,    52,  4687,   638, 
        439,   861,  2296,   499,     0,     0,     0,   588,     0,   664, 
          0,   665,   675,   527,   676,   462,     0,  2323,  4687,  4687, 
        527,     0,   375,   399,     0,     0,  4687,  4687,   677,   466, 
          0,   681,   704,     0,   710,   715,  -258,   -65,   -65,     0, 
        670,  3277,     0,   203,  -120,     0,     0,   499,     0,     0, 
        -42,     0,     0,     0,   639,  4687,   317,   643,     0,   717, 
       2455,   658,   745,   742,   436,  2552,  2595,  4687,   342,   680, 
          0,   546,   502,    52,   467,   584,    52,   770,   715,   771, 
         52,     0,     0,   527,     0,     0,     0,     0,   137,  3277, 
          0,   527,  4687,   455,     0,  4687,   479,  4687,   455,   699, 
       3277,     0,   527,   584,    25,    64,     0,     0,     0,   715, 
        502,   502,   783,   701,     0,     0,     0,   137,     0,     0, 
        713,   780,     0,  2708,     0,  2751,   472,    32,   719,     0, 
          0,  4687,     0,   527,     0,    64,    64,   502,     0,   812, 
        733,     0,     0,     0,     0,  4687,   800,   455,     0,     0, 
          0,     0,   736,    32,     0,     0,  2849,   738,     0,     0, 
         64,    25,   527,   825,     0,     0,   455,  4687,   813,     0, 
          0,     0,     0,     0,     0,  -121,   749,   455,     0,  2980, 
        527,    25,   838,     0,     0,   527,     0,     0,   761,     0, 
        527,   766,     0, 
    );
    protected static $yyRindex= array(          763,
          0,     0,  1082,     0,     0,   298,  1110,     0,  1314,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        890,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -30,   131,     0,     0,   112,     0,   897, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  1424,   -77,   772,   -77,     0,     0,     0, 
          0,     0,     0,   845,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   773,     0,     0,   773,   801, 
          0,     0,     0,     0,     0,     0,     0,     0,   254,     0, 
          0,     0,     0,     0,     0,     0,    87,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  1014, 
       1124,     0,     0,     0,     0,   642,  1569,     0,   106,     0, 
          0,     0,     0,     0,     0,     0,   -84,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   147,   775,   684,  1724,  1854,  3007,  1899,  1997,  2024, 
          0,     0,     0,     0,     0,  1569,     0,   657,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   840,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,  1614,     0,   788,     0, 
         35,     0,     0,     0,     0,   147,     0,   751,     0,     0, 
          0,     0,     0,     0,    77,     0,   776,     0,   826,     0, 
       1569,   827,   828,    61,   875,   235,     0,  1569,     0,     0, 
          0,   663,     0,     0,   -26,   -31,    -6,    37,    39,   100, 
        232,   237,   309,   379,   450,   461,   790,     0,  4129,  4113, 
         10,     0,  1162,     0,  3989,     0,     0,  3688,  3704,     0, 
          0,  3730,  3812,  3430,  3562,  3134,  3176,  3235,     0,  2051, 
       1461,     0,   829,     0,     0,   711,     0,     0,     0,     0, 
          0,     0,     0,   796,     0,   -48,     0,     0,   -25,     0, 
          0,     0,     0,   875,     0,   810,     0,     0,     0,     0, 
          0,     0,   865,     0,     0,  1569,     0,   490,   721,  3828, 
       3866,  3944,  3960,     0,     0,   875,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -104,     0,     0,     0,     0,   814,     0,     0,   874, 
          0,     0,     0,     0,     0,    17,     0,     0,     0,  1569, 
        796,   811,     0,     0,   875,     0,  4245,     0,     0,   875, 
        879,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   898,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   147,     0,   904,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   796,   491,     0,     0,     0,   881,     0, 
        796,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   902,     0,   903,   903,     0, 
          0,   740,     0,     0,     0,     0,     0,   -25,     0,     0, 
       1569,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   589,     0,     0,     0,     0,     0,     0, 
          0,     0,    90,     0,     0,   122,     0,     0,   913,     0, 
        898,     0,     0,   796,     0,     0,     0,     0,     0,   501, 
          0,   796,   881,     0,     0,     0,     0,     0,     0,     0, 
        541,     0,   796,   122,     0,     0,     0,     0,     0,   914, 
         90,    90,     0,     0,     0,     0,     0,   264,     0,     0, 
          0,     0,     0,     0,     0,     0,   330,   843,     0,     0, 
          0,     0,     0,   796,     0,     0,     0,    90,     0,     0, 
          0,     0,     0,     0,     0,   875,     0,     0,     0,     0, 
          0,     0,     0,   844,     0,     0,     0,     0,     0,     0, 
          0,     0,   796,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         12,     0,     0,     0,     0,    12,     0,     0,     0,     0, 
        796,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   953,   551,   552,   361, 
        964,   -55,     0,   900,   880,   -96,     0,     0,     0,     0, 
       -114,  -340,     0,     0,     0,  2090,     0,   668,     0,     0, 
         55,   -33,  -310,     0,     0,   -57,  -299,   528,   536,     0, 
        -47,  -470,     0,   493,     0,     0,     0,     0,   922,   928, 
          0,     0,   888,    -1,   782,     0,   110,  -180,     0,     0, 
       -145,     0,     0,   -34,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   539,   526,     0, 
        443,     0,     0,     0,     0,     0,   480,   481,     0,     0, 
          0,     0,     0,   839,   841,   696,     0,  -156,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   692,     0,     0,     0,   795,     0,   809,     0,     0, 
          0,     0,     0,     0,   870,     0,  1010, 
    );
    protected static $yyTable = array(11,
        159,    50,   592,   214,   495,    75,    76,    77,   222,   198, 
        208,    17,   198,    91,   197,    16,   208,   197,    32,   247, 
        105,   156,   107,     1,   107,   107,   198,   198,    13,    47, 
         48,   197,   197,    32,   229,    57,   107,   229,   297,   114, 
        222,   117,    17,   150,   151,    26,   227,   256,   212,    52, 
        256,   229,   229,   256,   312,   383,    74,    74,    74,   117, 
        109,   198,   295,   226,    81,    82,   197,   256,   256,   313, 
        256,   485,   256,   459,   152,   569,   570,   230,   225,   231, 
        230,   486,   231,    59,   315,    12,   229,    55,   323,    74, 
         74,   319,    74,   198,   230,   230,   231,   231,   197,    32, 
        584,   206,   256,   256,   227,   117,   204,   202,   451,   203, 
         74,   205,   335,    10,    90,   239,    46,   497,   229,   106, 
         44,   223,   543,   109,   198,    15,   200,   225,   324,   230, 
        121,   231,    60,   256,   256,    44,   104,   240,   382,   454, 
        232,    39,   107,   232,   250,   295,   168,   107,    96,   222, 
         74,   289,    74,   227,   136,    71,    74,   232,   232,   225, 
        334,   230,    57,   231,   168,    57,    74,    56,   325,   376, 
         17,   298,   299,    74,    17,   519,   165,   166,   167,   168, 
        169,   170,    36,   172,   517,   227,   544,   177,   156,    16, 
        208,   306,   232,     9,     9,     5,   207,   308,   168,    44, 
        423,    44,    74,   540,    71,     9,    74,   157,    34,   295, 
        318,    17,    96,   417,    57,   211,   366,    10,   593,    10, 
         10,   211,    35,    17,   232,   158,    74,   244,   156,   246, 
        168,    10,    39,    26,   255,   256,   257,   258,   259,   260, 
        261,   262,   263,   264,   265,   266,   267,   269,   270,   271, 
        273,   275,   278,   279,   282,   283,   284,   285,   286,   287, 
        288,   493,   290,   307,    40,   412,   487,    12,   105,   105, 
        320,    17,   233,   267,   443,   233,   297,   235,   228,   367, 
        235,   368,    12,    17,     9,   249,   209,   210,   250,   233, 
        233,    17,   209,   210,   235,   235,   163,   293,   163,   136, 
         34,   379,   297,   163,   498,    51,   163,    15,   163,    68, 
         10,     9,    69,   206,   195,   293,     9,    74,   204,   202, 
        542,   203,    15,   205,   233,   494,   328,   228,   329,   235, 
        330,   331,   298,   299,   332,   333,   198,    10,   200,   442, 
        420,    70,    10,   295,   174,   422,    96,   267,   297,   234, 
         34,   355,   234,   156,   163,   302,   233,    34,   533,   228, 
         71,   235,   152,   537,   152,    49,   234,   234,   136,   152, 
        136,    16,   152,    78,   152,   372,   207,   213,    79,    16, 
         80,   377,   198,   198,   104,   104,    16,   197,   163,   163, 
        136,   443,    94,    74,   470,   211,   101,   357,    95,    54, 
        541,   234,   208,    74,   561,   562,   297,   229,   229,    65, 
         54,    54,   576,   256,   256,   256,   256,   256,   413,   236, 
        152,   103,   236,   256,   256,   256,   256,   256,   256,   136, 
         97,   589,   297,   234,   136,   267,   236,   236,   428,    43, 
         44,    45,   595,    74,    74,   105,   489,   489,   104,   102, 
        230,   230,   231,   231,   152,   152,   115,   358,   154,   117, 
        119,   396,   156,   452,   201,   199,   209,   210,   532,   359, 
        155,   236,   160,   546,   547,   196,   197,   360,   297,    74, 
        525,   526,    74,   136,   471,   520,    74,   124,    83,   134, 
        237,   476,   477,   237,   133,   161,   432,   122,   163,   123, 
        571,   238,   468,   236,   238,   467,   480,   237,   237,   479, 
         74,   175,    12,   232,   232,   178,   585,    19,   238,   238, 
        500,   574,   179,   163,   163,   163,   163,   163,   163,   219, 
        247,   135,   511,   247,   135,    13,   598,   174,    14,   220, 
        221,   136,   237,    34,   136,    83,   235,   247,   247,   163, 
        224,   230,    15,   238,   304,   173,   305,   136,   311,   124, 
        534,   134,   536,    37,    38,   206,   133,    74,   316,   122, 
        204,   123,   314,   317,   237,   205,   163,   431,   296,   321, 
        125,   139,   247,   322,   139,   238,   337,    74,   207,   152, 
        152,   152,   152,   152,   152,   327,   567,   297,   297,   297, 
         64,    66,    67,   163,   163,   163,   163,   211,   354,   163, 
        136,   173,   356,   432,   247,   152,    16,    83,   432,   364, 
        375,   362,   370,   163,   163,   163,   163,   378,   163,   163, 
        393,   394,   590,   163,   163,   163,   163,   163,   397,   399, 
        400,   411,   152,   408,   409,   233,   233,   414,   415,   416, 
        235,   235,   125,   421,   208,   419,   425,   149,    85,    86, 
         87,    88,    89,   429,   430,   163,   163,   432,   434,   152, 
        152,   152,   152,   435,   436,   152,   201,   199,   209,   210, 
        437,   439,   169,   438,   450,   169,   432,   196,   197,   152, 
        152,   152,   152,   163,   152,   152,   453,   432,   454,   152, 
        169,   152,   152,   152,   462,   463,    20,    21,    22,   228, 
         24,    25,   460,    26,   164,    85,    86,    87,    88,    89, 
        211,   211,   234,   234,   211,   211,   211,   211,   211,    27, 
        211,   152,   152,   464,   169,   473,   466,   478,   474,   481, 
         10,   211,   211,   211,   211,   211,   211,   274,   274,   482, 
        483,   274,   274,   274,   274,   274,   274,   274,   484,   152, 
        229,   248,   492,   499,   248,   502,   169,   129,   274,   274, 
        274,   274,   274,   274,   211,   503,   211,   211,   248,   248, 
         58,    19,   505,    58,   506,   507,   164,    85,    86,    87, 
         88,    89,   236,   236,   132,   338,   339,   340,    58,   508, 
        128,   274,   513,   274,   274,   514,   518,   211,   211,   211, 
        521,   522,    10,   248,   341,   342,   343,   344,   535,   345, 
        346,   538,   515,   548,   347,   549,   348,    19,   171,    83, 
        172,   171,    58,   172,   274,   274,   274,   555,   556,   129, 
        207,   305,   559,   566,   206,   248,   171,   172,   172,   204, 
        202,   572,   203,     2,   205,   573,   126,   127,   575,   211, 
        580,   303,   583,   237,   237,   588,   132,   338,   339,   340, 
        591,   405,   128,   594,   238,   238,   403,   401,   599,   402, 
        171,   404,   172,   601,   349,   211,   341,   342,   343,   344, 
        603,   345,   346,   167,    30,    28,   347,   171,   348,    41, 
         40,   178,   178,   247,   247,   178,   178,   178,   178,   178, 
        178,   178,   171,   205,   172,   167,   284,   285,   286,   206, 
        104,   171,   178,   178,   178,   178,   178,   178,   126,   127, 
        209,   210,    57,   208,   167,   203,    51,   171,    87,   167, 
         32,    32,    88,    84,    32,    32,    32,    32,    32,    32, 
         32,    19,   140,    86,    85,   178,   349,   178,   178,    33, 
        406,    32,    32,    32,    32,    32,    32,   142,   143,    29, 
         20,    21,    22,   228,    24,    25,    99,    26,   120,   365, 
        298,    73,   496,   523,   490,   457,    72,   297,   178,   178, 
        178,   153,   292,    27,    32,   211,    32,    32,    84,    85, 
         86,    87,    88,    89,   512,   501,   581,   553,   554,   242, 
        305,   243,   369,   374,   211,   300,    20,    21,    22,   228, 
         24,    25,   274,    26,   229,   294,   225,    32,    32,    32, 
        305,   305,   305,   305,   305,   305,   305,   305,    90,    27, 
         46,   274,     2,     2,     2,     2,     2,     2,     0,     2, 
        211,   211,     0,   305,     0,   211,   211,   211,   211,     0, 
        211,     0,     2,     2,     2,     0,     2,     0,     0,     0, 
        229,     0,     0,   211,   211,   211,   211,     0,     0,     0, 
          0,     0,   305,   211,   211,   211,   211,   211,   211,   211, 
        211,   211,     0,    17,   211,   211,     0,   211,   211,   211, 
        211,   211,   211,   211,   211,     0,   211,   211,     0,     0, 
        274,   274,   274,   274,   274,   274,   274,   274,   274,   207, 
          0,   274,   274,     0,   274,   274,   274,   274,   274,   274, 
        274,     0,     0,     0,   248,   248,     0,   211,   211,   211, 
         20,    21,    22,   228,    24,    25,     0,    26,     0,   298, 
         20,    21,    22,    23,    24,    25,   297,    26,     0,     0, 
        218,   218,     0,    27,     0,   218,   218,   218,   218,   218, 
        218,     0,     5,    27,     0,   298,   178,     0,     0,     0, 
          0,     0,   297,   218,   218,   218,   218,     0,     0,   298, 
        298,   298,     0,     0,   229,   178,   297,   297,   297,   245, 
          6,     0,   245,     0,     0,   245,     0,     0,     0,   209, 
        210,     0,     0,     0,   218,    32,   218,   218,     0,   245, 
        245,   298,   245,     0,   245,     0,     0,     0,   297,     0, 
          0,     0,     0,     0,    32,     0,     0,     0,   206,     0, 
          0,     0,     0,   204,   202,     0,   203,   218,   205,   218, 
          0,     0,     0,     0,   245,   245,     0,    19,     0,     0, 
          0,   198,     0,   200,   178,   178,   178,   178,   178,   178, 
        178,   178,   178,     0,     0,   178,   178,     0,   178,   178, 
        178,   178,   178,   178,   178,   245,   245,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    32,    32,    32,    32,    32,    32,    32, 
         32,    32,     0,     0,    32,    32,     0,    32,    32,    32, 
         32,    32,    32,    32,     0,   211,     0,   208,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   211,     0,     0,     0,     0,     0, 
         17,    17,     0,    17,    17,    17,    17,    17,    17,     0, 
         17,     5,     5,     5,     5,     5,     5,     0,     5,     0, 
          0,    17,    17,    17,    17,    17,    17,     0,     0,     0, 
          0,     5,     5,     5,     5,     0,     0,     0,     0,     6, 
          6,     6,     6,     6,     6,     0,     6,     0,     0,     0, 
          0,     0,     0,     0,    17,     0,    17,    17,     0,     6, 
          6,     6,     6,   211,   211,   211,   211,   211,   211,   211, 
        211,   211,     0,    17,   211,   211,     0,   211,   211,   211, 
        211,   211,   211,   211,     0,   218,    17,    17,    17,    17, 
          0,     0,     0,     0,     0,     0,    20,    21,    22,    23, 
         24,    25,     0,    26,   218,     0,     0,     0,     0,     0, 
        287,   287,     0,   287,   287,   287,   287,   287,   287,    27, 
        287,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   287,   287,     0,   287,   287,   287,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    94,    94,     0, 
          0,    94,    94,    94,    94,    94,     0,    94,     0,     0, 
          0,     0,     0,   207,   287,     0,   287,   287,    94,    94, 
         94,    94,    94,   218,   218,   218,   218,   218,   218,   218, 
        218,   218,   211,     0,   218,   218,     0,   218,   218,   218, 
        218,   218,   218,   218,     0,     0,   287,   287,   287,   287, 
          0,     0,     0,    94,    94,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   245,   245,   245,   245,   245, 
         17,     0,     0,    17,     0,   245,   245,   245,   245,   245, 
        245,     0,     0,     0,    94,    94,    94,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,   199,   209,   210,   268,   268,     0,     0,   268, 
        268,   268,   268,   268,     0,   268,     0,     0,     0,     0, 
          0,     0,     0,    17,    17,    17,   268,   268,   268,   268, 
        268,   268,     0,    17,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    17,    17,    17,     0,     0,     0,     0, 
        270,   270,     0,    17,   270,   270,   270,   270,   270,     0, 
        270,   268,   268,     0,     0,     0,     0,     0,     0,     0, 
          0,   270,   270,   270,   270,   270,   270,     0,     0,     0, 
        287,     0,     0,   287,     0,     0,     0,     0,     0,     0, 
          0,     0,   268,   268,   268,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   270,   270,     0,     0, 
          0,     0,     0,    17,    17,    17,    17,    17,    17,    17, 
         17,    17,     0,    17,    17,    17,     0,    17,    17,    17, 
         17,    17,    17,   287,   287,   287,     0,   270,   270,   270, 
          0,     0,     0,   287,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   287,   287,   287,     0,     0,     0,     0, 
        262,   262,     0,   287,   262,   262,   262,   262,   262,     0, 
        262,     0,    94,     0,     0,     0,     0,     0,     0,     0, 
          0,   262,   262,   262,   262,   262,   262,     0,     0,     0, 
         94,    94,     0,     0,     0,     0,     0,     0,     0,     0, 
         94,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   262,   262,     0,     0, 
          0,     0,     0,   287,   287,   287,   287,   287,   287,   287, 
        287,   287,     0,     0,   287,   287,     0,   287,   287,   287, 
        287,   287,   287,     0,     0,     0,     0,   262,   262,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         94,    94,    94,    94,    94,    94,    94,    94,    94,     0, 
          0,    94,    94,     0,    94,    94,    94,    94,    94,    94, 
        268,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        263,   263,     0,     0,   263,   263,   263,   263,   263,   268, 
        263,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   263,   263,   263,   263,   263,   263,     0,     0,     0, 
          0,     0,     0,     0,     0,   270,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   261,   261,     0,     0,   261, 
        261,   261,   261,   261,   270,   261,   263,   263,     0,     0, 
          0,     0,     0,     0,     0,     0,   261,   261,   261,   261, 
        261,   261,     0,     0,     0,     0,     0,     0,   268,   268, 
        268,   268,   268,   268,   268,   268,   268,   263,   263,   268, 
        268,     0,   268,   268,   268,   268,   268,   268,     0,     0, 
          0,   261,   261,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   270,   270,   270,   270,   270,   270,   270, 
        270,   270,   261,   261,   270,   270,     0,   270,   270,   270, 
        270,   270,   270,   264,   264,   262,     0,   264,   264,   264, 
        264,   264,     0,   264,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   264,   264,   264,   264,   264,   264, 
        265,   265,     0,     0,   265,   265,   265,   265,   265,     0, 
        265,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   265,   265,   265,   265,   265,   265,   254,   254,   264, 
        264,   254,   254,   254,   254,   254,     0,   254,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   254,   254, 
        254,   254,   254,   254,     0,     0,   265,   265,     0,     0, 
        264,   264,     0,   262,   262,     0,     0,   262,   262,   262, 
        262,   262,     0,     0,   262,   262,     0,   262,   262,   262, 
        262,   262,   262,   254,   254,     0,     0,   265,   265,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   206,   195, 
          0,     0,   248,   204,   202,   263,   203,     0,   205,     0, 
          0,     0,     0,     0,   254,   254,     0,     0,     0,     0, 
          0,   198,   182,   200,   192,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   206,   195,     0,     0,     0, 
        204,   202,     0,   203,     0,   205,     0,     0,     0,     0, 
        261,     0,     0,     0,     0,   194,     0,   395,   198,   182, 
        200,   192,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   193,     0,   208,     0,     0, 
          0,     0,   194,   263,   263,     0,     0,   263,   263,   263, 
        263,   263,     0,     0,   263,   263,     0,   263,   263,   263, 
        263,   263,   263,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   193,     0,   208,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   261,   261, 
          0,     0,   261,   261,   261,   261,   261,     0,   264,   261, 
        261,     0,   261,   261,   261,   261,   261,   261,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   206,   195,     0,   265,   458,   204,   202,     0, 
        203,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   198,   182,   200,   192,   206, 
        195,     0,   254,     0,   204,   202,     0,   203,     0,   205, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   469,   198,   182,   200,   192,     0,     0,     0,   194, 
          0,     0,     0,     0,     0,     0,   264,   264,     0,     0, 
        264,   264,   264,   264,   264,     0,     0,   264,   264,     0, 
        264,   264,   264,   264,   264,   264,   194,     0,     0,   193, 
          0,   208,     0,   265,   265,     0,     0,   265,   265,   265, 
        265,   265,     0,   207,   265,   265,     0,   265,   265,   265, 
        265,   265,   265,     0,     0,     0,   193,     0,   208,     0, 
        254,   254,   211,     0,   254,   254,   254,   254,   254,     0, 
        418,   254,   254,     0,   254,   254,   254,   254,   254,   254, 
        207,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   211, 
          0,   206,   195,     0,     0,   504,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   465,   198,   182,   200,   192,     0,     0, 
        472,   201,   199,   209,   210,   183,   184,   185,   186,   188, 
          0,     0,   196,   197,     0,   180,   181,   187,   190,   189, 
        191,     0,     0,     0,     0,     0,     0,     0,   194,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   201,   199, 
        209,   210,   183,   184,   185,   186,   188,     0,     0,   196, 
        197,     0,   180,   181,   187,   190,   189,   191,   193,     0, 
        208,     0,     0,   524,     0,     0,     0,     0,   206,   195, 
          0,   531,   509,   204,   202,     0,   203,     0,   205,     0, 
          0,     0,   539,     0,     0,     0,     0,   207,     0,     0, 
          0,   198,   182,   200,   192,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   211,     0,     0,     0, 
          0,   206,   195,   568,   207,   510,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,   194,     0,     0,     0,     0, 
          0,     0,     0,   211,   198,   182,   200,   192,     0,     0, 
          0,     0,   587,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   193,     0,   208,     0,     0, 
        597,     0,     0,     0,     0,   600,     0,     0,   194,     0, 
        602,     0,     0,     0,     0,   201,   199,   209,   210,   183, 
        184,   185,   186,   188,     0,     0,   196,   197,     0,   180, 
        181,   187,   190,   189,   191,     0,     0,     0,   193,     0, 
        208,     0,   201,   199,   209,   210,   183,   184,   185,   186, 
        188,     0,     0,   196,   197,     0,   180,   181,   187,   190, 
        189,   191,     0,     0,   206,   195,     0,     0,   557,   204, 
        202,     0,   203,     0,   205,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   207,   198,   182,   200, 
        192,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   211,     0,   206,   195,     0, 
          0,   558,   204,   202,     0,   203,     0,   205,     0,     0, 
          0,   194,     0,     0,     0,     0,     0,     0,     0,     0, 
        198,   182,   200,   192,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   193,     0,   208,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   194,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   199,   209,   210,   183,   184, 
        185,   186,   188,   207,     0,   196,   197,     0,   180,   181, 
        187,   190,   189,   191,   193,     0,   208,     0,     0,     0, 
          0,     0,   211,     0,     0,   206,   195,     0,     0,     0, 
        204,   202,     0,   203,     0,   205,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   207,   582,   198,   182, 
        200,   192,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   211,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   194,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,   199,   209,   210,   183,   184,   185,   186,   188, 
          0,     0,   196,   197,     0,   180,   181,   187,   190,   189, 
        191,     0,   193,     0,   208,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   199,   209,   210,   183,   184, 
        185,   186,   188,     0,     0,   196,   197,     0,   180,   181, 
        187,   190,   189,   191,     0,     0,   206,   195,     0,   207, 
          0,   204,   202,     0,   203,     0,   205,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   596,   211,   198, 
        182,   200,   192,   260,   260,     0,     0,   260,   260,   260, 
        260,   260,     0,   260,     0,     0,     0,     0,     0,     0, 
          0,     0,   207,     0,   260,   260,   260,   260,   260,   260, 
          0,     0,     0,   194,     0,     0,     0,     0,     0,     0, 
          0,   211,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   260, 
        260,     0,     0,   193,     0,   208,     0,   201,   199,   209, 
        210,   183,   184,   185,   186,   188,     0,     0,   196,   197, 
          0,   180,   181,   187,   190,   189,   191,     0,     0,     0, 
        260,   260,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        201,   199,   209,   210,   183,   184,   185,   186,   188,     0, 
        207,   196,   197,     0,   180,   181,   187,   190,   189,   191, 
        251,   251,     0,     0,   251,   251,   251,   251,   251,   211, 
        251,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   251,   251,   251,   251,   251,   251,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   252,   252,     0,     0,   252,   252,   252,   252, 
        252,     0,   252,     0,     0,     0,   251,   251,     0,     0, 
          0,     0,     0,   252,   252,   252,   252,   252,   252,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   201,   199, 
        209,   210,   183,   184,   185,   186,   188,   251,   251,   196, 
        197,     0,   180,   181,   187,   190,   189,   191,   252,   252, 
          0,   253,   253,     0,     0,   253,   253,   253,   253,   253, 
          0,   253,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   207,   253,   253,   253,   253,   253,   253,     0,   252, 
        252,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        211,     0,     0,   206,   195,     0,     0,     0,   204,   202, 
          0,   203,     0,   205,     0,     0,     0,   253,   253,     0, 
          0,     0,     0,     0,     0,     0,   198,   182,   200,   192, 
          0,     0,   206,   195,     0,     0,     0,   204,   202,     0, 
        203,     0,   205,     0,     0,     0,     0,     0,   253,   253, 
          0,     0,     0,     0,     0,   198,   182,   200,   192,     0, 
        194,     0,     0,     0,     0,     0,     0,     0,     0,   201, 
        199,   209,   210,   183,   184,   185,   186,   188,     0,     0, 
        196,   197,     0,   180,   181,   187,   190,   189,   191,   194, 
        193,     0,   208,     0,     0,     0,   260,   260,     0,     0, 
        260,   260,   260,   260,   260,     0,     0,   260,   260,     0, 
        260,   260,   260,   260,   260,   260,     0,     0,     0,   193, 
          0,   208,     0,     0,     0,     0,     0,     0,     0,   206, 
        195,     0,     0,     0,   204,   202,     0,   203,     0,   205, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   198,   182,   200,   192,     0,   249,     0,     0, 
        249,     0,   249,   249,   249,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   249,   249,   249, 
        249,   249,   249,     0,     0,     0,   194,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   249,   249,     0,     0,   193,     0,   208,     0, 
          0,     0,     0,   251,   251,     0,     0,   251,   251,   251, 
        251,   251,     0,     0,   251,   251,     0,   251,   251,   251, 
        251,   251,   251,   249,   249,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   252,   252,     0,     0,   252, 
        252,   252,   252,   252,     0,     0,   252,   252,   207,   252, 
        252,   252,   252,   252,   252,     0,     0,     0,     0,   250, 
          0,     0,   250,     0,   250,   250,   250,   211,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   207,     0,   250, 
        250,   250,   250,   250,   250,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   253,   253,   211,     0,   253,   253, 
        253,   253,   253,     0,     0,   253,   253,     0,   253,   253, 
        253,   253,   253,   253,   250,   250,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   201,   199,   209,   210, 
        183,   184,   185,   186,   188,   250,   250,   196,   197,     0, 
        180,   181,   187,   190,   189,   191,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   201,   199,   209,   210,   183, 
        184,   185,   186,   188,   207,     0,   196,   197,     0,     0, 
        181,   187,   190,   189,   191,   241,     0,     0,   241,     0, 
          0,   241,     0,   211,     0,     0,     0,     0,     0,     0, 
          0,   243,     0,     0,   243,   241,   241,   243,   241,     0, 
        241,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   243,   243,     0,   243,     0,   243,   242,     0,     0, 
        242,     0,     0,   242,     0,     0,     0,     0,     0,     0, 
        241,   241,     0,     0,     0,     0,     0,   242,   242,     0, 
        242,     0,   242,     0,     0,     0,   243,   243,     0,     0, 
          0,     0,   201,   199,   209,   210,   183,   184,   185,   186, 
        188,   241,   241,   196,   197,     0,     0,     0,   187,   190, 
        189,   191,   242,   242,     0,     0,     0,   243,   243,   249, 
        249,     0,     0,   249,   249,   249,   249,   249,     0,     0, 
        249,   249,     0,   249,   249,   249,   249,   249,   249,   244, 
          0,     0,   244,   242,   242,   244,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   259,     0,     0,   259,   244, 
        244,   259,   244,     0,   244,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   259,   259,     0,   259,     0, 
        259,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   240,   244,   244,   240,     0,     0,   240, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        259,   259,     0,   240,   240,     0,   240,     0,   240,     0, 
          0,     0,     0,     0,     0,   244,   244,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   259,   259,     0,     0,     0,     0,     0,   240,   240, 
          0,   250,   250,     0,     0,   250,   250,   250,   250,   250, 
          0,     0,   250,   250,     0,   250,   250,   250,   250,   250, 
        250,   258,     0,     0,   258,     0,     0,   258,     0,   240, 
        240,     0,     0,     0,     0,     0,     0,   239,     0,     0, 
        239,   258,   258,   239,   258,     0,   258,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   239,   239,     0, 
        239,     0,   239,     0,     0,     0,   246,     0,     0,   246, 
          0,     0,   246,     0,     0,     0,   258,   258,     0,     0, 
          0,     0,     0,     0,     0,     0,   246,   246,     0,   246, 
          0,   246,   239,   239,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   258,   258,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   246,   246,   239,   239,     0,     0,     0,     0,     0, 
          0,   241,   241,   241,   241,   241,     0,     0,   241,   241, 
          0,   241,   241,   241,   241,   241,   241,   243,   243,   243, 
        243,   243,   246,   246,   243,   243,     0,   243,   243,   243, 
        243,   243,   243,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   242,   242,   242,   242,   242,     0,     0, 
        242,   242,     0,   242,   242,   242,   242,   242,   242,     0, 
          0,     0,     0,   257,     0,     0,   257,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   255, 
        257,   257,   255,   257,     0,   257,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   255,   255,     0,   255, 
          0,   255,     0,     0,     0,     0,     0,   124,     0,   134, 
          0,     0,     0,     0,   133,   257,   257,   122,     0,   123, 
          0,     0,     0,     0,     0,   244,   244,   244,   244,   244, 
          0,   255,   244,   244,   276,   244,   244,   244,   244,   244, 
        244,   259,   259,   259,   259,   259,   257,   257,   259,   259, 
          0,   259,   259,   259,   259,   259,   259,     0,     0,     0, 
          0,     0,   255,   255,     0,    83,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   240, 
        240,   240,   240,   240,     0,     0,   240,   240,     0,   240, 
        240,   240,   240,   240,   240,   196,     0,     0,   196,     0, 
        125,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   196,   196,     0,   196,     0,   196,     0,     0, 
          0,   206,   195,     0,     0,     0,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,     0,     0,     0,   124,     0, 
        134,     0,     0,     0,   198,   133,   200,   196,   122,     0, 
        123,     0,     0,     0,     0,     0,     0,   258,   258,   258, 
        258,   258,     0,   121,   258,   258,     0,   258,   258,   258, 
        258,   258,   258,   239,   239,   239,   239,   239,   194,   196, 
        239,   239,     0,   239,   239,   239,   239,   239,   239,     0, 
          0,     0,     0,     0,     0,     0,    83,     0,     0,     0, 
          0,     0,   246,   246,   246,   246,   246,     0,   193,     0, 
        208,     0,   246,   246,   246,   246,   246,   246,   206,   195, 
          0,     0,     0,   204,   202,     0,   203,     0,   205,     0, 
          0,   125,     0,     0,   164,    85,    86,    87,    88,    89, 
          0,   198,     0,   200,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         10,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   194,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   129,     0,   124, 
          0,   134,     0,     0,     0,     0,   133,     0,     0,   122, 
          0,   123,     0,     0,     0,     0,     0,   208,     0,     0, 
          0,     0,     0,     0,   132,     0,     0,     0,   280,     0, 
        128,     0,     0,     0,     0,     0,   257,   257,   257,   257, 
        257,     0,     0,     0,     0,     0,   257,   257,   257,   257, 
        257,   257,   255,   255,   255,   255,   255,    83,     0,     0, 
          0,     0,   255,   255,   255,   255,   255,   255,     0,     0, 
          0,     0,     0,     0,     0,   130,   131,    86,    87,    88, 
         89,     0,     0,     0,     0,   277,   126,   127,     0,     0, 
          0,     0,   125,   124,     0,   134,     0,     0,     0,     0, 
        133,    10,     0,   122,     0,   123,   207,   124,     0,   134, 
          0,     0,     0,     0,   133,     0,     0,   122,     0,   123, 
          0,   272,     0,     0,     0,   211,     0,     0,   129,     0, 
          0,     0,     0,     0,     0,   274,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    83,   124,     0,   134,   132,     0,     0,     0,   133, 
          0,   128,   122,     0,   123,    83,     0,     0,   196,   196, 
        196,   196,   196,     0,     0,     0,     0,     0,   196,   196, 
        196,   196,   196,   196,     0,     0,   125,     0,     0,     0, 
          0,     0,     0,     0,   201,   199,   209,   210,     0,     0, 
        125,     0,     0,   207,     0,   196,   197,     0,     0,     0, 
         83,     0,     0,     0,     0,     0,     0,   126,   127,     0, 
          0,     0,   211,     0,     0,     0,   164,    85,    86,    87, 
         88,    89,     0,     0,     0,     0,     0,     0,     0,   124, 
          0,   134,   371,     0,     0,   125,   133,     0,     0,   122, 
          0,   123,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,   199,   209,   210,     0,     0,    83,     0,     0, 
          0,     0,   196,   197,     0,     0,   132,     0,     0,     0, 
          0,     0,   128,     0,     0,     0,     0,     0,     0,     0, 
        164,    85,    86,    87,    88,    89,     0,     0,     0,     0, 
          0,     0,   125,     0,   164,    85,    86,    87,    88,    89, 
          0,     0,     0,     0,     0,     0,    10,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         10,     0,     0,     0,     0,     0,   281,     0,   126,   127, 
          0,     0,     0,   129,     0,     0,     0,     0,     0,   164, 
         85,    86,    87,    88,    89,     0,     0,   129,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        132,     0,     0,     0,     0,    10,   128,     0,     0,     0, 
          0,     0,     0,     0,   132,     0,     0,     0,     0,     0, 
        128,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   132, 
          0,     0,   126,   127,     0,   128,   164,    85,    86,    87, 
         88,    89,     0,     0,     0,     0,   126,   127,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
          0,   126,   127,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   132,     0,     0,     0, 
          0,     0,   128,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   126,   127, 
    );
    protected static $yyCheck = array(4,
        115,    46,   124,    46,   125,    61,    62,    63,    93,    41, 
        126,    60,    44,    71,    41,    46,   126,    44,    44,   176, 
        125,    91,    91,   303,    91,    91,    58,    59,    59,    34, 
         35,    58,    59,    59,    41,    40,    91,    44,   219,    95, 
        125,    97,    91,   101,   102,   123,   161,    38,    91,    42, 
         41,    58,    59,    44,    44,    40,    61,    62,    63,   115, 
         94,    93,    40,   160,    69,    70,    93,    58,    59,    59, 
         61,   330,    63,   414,   260,   546,   547,    41,    44,    41, 
         44,   340,    44,    44,   241,   260,    93,   260,   260,    94, 
         95,   248,    97,   125,    58,    59,    58,    59,   125,   125, 
        571,    37,    93,    94,    44,   161,    42,    43,   408,    45, 
        115,    47,   293,   286,   300,   171,    40,   458,   125,    63, 
         44,   155,    59,   157,    60,   300,    62,    93,   300,    93, 
         58,    93,    93,   124,   125,    59,   125,   171,   123,   260, 
         41,   125,    91,    44,   178,    59,    41,    91,    59,   154, 
        155,   207,   157,    93,   100,    44,   161,    58,    59,   125, 
         63,   125,    41,   125,    59,    44,   171,   340,   340,   326, 
         40,   260,   261,   178,    44,   486,   122,   123,   124,   125, 
        126,   127,    59,   129,   484,   125,   123,   133,    91,   364, 
        126,   260,    93,   260,   260,   304,   312,   231,    93,   123, 
        381,   125,   207,   514,    93,   260,   211,    44,    46,   123, 
        245,   260,   123,   370,    93,   331,   313,   286,   340,   286, 
        286,   331,    46,    93,   125,    62,   231,   173,    91,   175, 
        125,   286,    46,   311,   180,   181,   182,   183,   184,   185, 
        186,   187,   188,   189,   190,   191,   192,   193,   194,   195, 
        196,   197,   198,   199,   200,   201,   202,   203,   204,   205, 
        206,    59,   208,   332,    64,   362,   332,   260,   373,   374, 
        340,   320,    41,   219,   340,    44,   260,    41,    44,   314, 
         44,   316,   260,   332,   260,   340,   402,   403,   322,    58, 
         59,   340,   402,   403,    58,    59,    33,    44,    35,   245, 
         46,   336,   286,    40,   461,    46,    43,   300,    45,    59, 
        286,   260,    58,    37,    38,    62,   260,   322,    42,    43, 
        257,    45,   300,    47,    93,   123,   272,    93,   274,    93, 
        276,   277,   260,   261,   280,   281,    60,   286,    62,   397, 
        375,    58,   286,   257,    40,   380,   257,   293,   332,    41, 
         46,    40,    44,    91,    91,    93,   125,    46,   504,   125, 
         40,   125,    33,   509,    35,   410,    58,    59,   314,    40, 
        316,   364,    43,    59,    45,   321,   312,   420,    59,   410, 
         59,   327,   414,   415,   373,   374,   364,   414,   125,   126, 
        336,   340,    60,   398,   429,   331,    61,   260,   310,    39, 
        515,    93,   126,   408,   373,   374,   260,   414,   415,    49, 
         50,    51,   558,   404,   405,   406,   407,   408,   364,    41, 
         91,    41,    44,   414,   415,   416,   417,   418,   419,   375, 
        310,   577,   286,   125,   380,   381,    58,    59,   384,   300, 
        301,   302,   588,   448,   449,    41,   448,   449,    44,    61, 
        414,   415,   414,   415,   125,   126,   311,   320,   310,   515, 
        123,   352,    91,   409,   400,   401,   402,   403,   503,   332, 
         58,    93,   123,   521,   522,   411,   412,   340,   332,   484, 
        344,   345,   487,   429,   430,   487,   491,    33,    91,    35, 
         41,   437,   438,    44,    40,    44,   387,    43,   123,    45, 
        548,    41,    41,   125,    44,    44,    41,    58,    59,    44, 
        515,    58,   260,   414,   415,   123,   572,    91,    58,    59, 
        466,   556,   410,   260,   261,   262,   263,   264,   265,    44, 
         41,    41,   478,    44,    44,   283,   592,    40,   286,    93, 
         44,    41,    93,    46,    44,    91,   260,    58,    59,   286, 
         93,   125,   300,    93,   123,    58,   260,   503,   125,    33, 
        506,    35,   508,    13,    14,    37,    40,   572,   123,    43, 
         42,    45,    40,   123,   125,    47,   313,   123,   218,   257, 
        126,    41,    93,    44,    44,   125,    40,   592,   312,   260, 
        261,   262,   263,   264,   265,    58,   542,   300,   301,   302, 
         49,    50,    51,   340,   341,   342,   343,   331,   260,   346, 
        556,    58,   260,   504,   125,   286,   364,    91,   509,    40, 
         40,   123,    41,   360,   361,   362,   363,    93,   365,   366, 
         40,   125,   578,   370,   371,   372,   373,   374,    61,    40, 
         40,   123,   313,    91,    61,   414,   415,    41,   125,   125, 
        414,   415,   126,    41,   126,   125,   340,   260,   261,   262, 
        263,   264,   265,    40,    40,   402,   403,   558,    40,   340, 
        341,   342,   343,    59,    59,   346,   400,   401,   402,   403, 
         40,   340,    41,    40,    40,    44,   577,   411,   412,   360, 
        361,   362,   363,   430,   365,   366,    59,   588,   260,   370, 
         59,   372,   373,   374,    41,    41,   280,   281,   282,   283, 
        284,   285,   125,   287,   260,   261,   262,   263,   264,   265, 
         37,    38,   414,   415,    41,    42,    43,    44,    45,   303, 
         47,   402,   403,    59,    93,   361,    61,    61,   340,    59, 
        286,    58,    59,    60,    61,    62,    63,    37,    38,    46, 
         41,    41,    42,    43,    44,    45,    46,    47,    44,   430, 
        334,    41,    93,   125,    44,   123,   125,   313,    58,    59, 
         60,    61,    62,    63,    91,    59,    93,    94,    58,    59, 
         41,    91,   125,    44,    40,    44,   260,   261,   262,   263, 
        264,   265,   414,   415,   340,   341,   342,   343,    59,   364, 
        346,    91,   123,    93,    94,   260,   340,   124,   125,   126, 
         41,    41,   286,    93,   360,   361,   362,   363,   340,   365, 
        366,   123,   321,    41,   370,   125,   372,    91,    41,    91, 
         41,    44,    93,    44,   124,   125,   126,   125,    59,   313, 
        312,    91,   371,   125,    37,   125,    59,    58,    59,    42, 
         43,    40,    45,    91,    47,   123,   402,   403,    59,   331, 
        125,   125,   125,   414,   415,    41,   340,   341,   342,   343, 
         58,    37,   346,   125,   414,   415,    42,    43,    41,    45, 
         93,    47,    93,   123,   430,    41,   360,   361,   362,   363, 
        125,   365,   366,    93,   123,   123,   370,    58,   372,   125, 
        125,    37,    38,   414,   415,    41,    42,    43,    44,    45, 
         46,    47,   125,   257,   125,    41,    91,    91,    91,   257, 
        125,    93,    58,    59,    60,    61,    62,    63,   402,   403, 
        402,   403,    59,   126,   125,   125,   123,    59,    41,    59, 
         37,    38,    41,    41,    41,    42,    43,    44,    45,    46, 
         47,    91,   364,    41,    41,    91,   430,    93,    94,     7, 
        126,    58,    59,    60,    61,    62,    63,   125,   125,     6, 
        280,   281,   282,   283,   284,   285,    77,   287,    99,   312, 
         91,    60,   455,   491,   449,   125,    59,    91,   124,   125, 
        126,   104,   211,   303,    91,   312,    93,    94,   260,   261, 
        262,   263,   264,   265,   479,   467,   564,   528,   528,   171, 
        260,   171,   317,   322,   331,   221,   280,   281,   282,   283, 
        284,   285,   312,   287,   334,   217,   157,   124,   125,   126, 
        280,   281,   282,   283,   284,   285,   286,   287,   300,   303, 
         31,   331,   280,   281,   282,   283,   284,   285,    -1,   287, 
         37,    38,    -1,   303,    -1,    42,    43,    44,    45,    -1, 
         47,    -1,   300,   301,   302,    -1,   304,    -1,    -1,    -1, 
        334,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,   332,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,    91,    -1,    93,    94,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   312, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        420,    -1,    -1,    -1,   414,   415,    -1,   124,   331,   126, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,   260, 
        280,   281,   282,   283,   284,   285,   260,   287,    -1,    -1, 
         37,    38,    -1,   303,    -1,    42,    43,    44,    45,    46, 
         47,    -1,    91,   303,    -1,   286,   312,    -1,    -1,    -1, 
         -1,    -1,   286,    60,    61,    62,    63,    -1,    -1,   300, 
        301,   302,    -1,    -1,   334,   331,   300,   301,   302,    38, 
         91,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    91,   312,    93,    94,    -1,    58, 
         59,   332,    61,    -1,    63,    -1,    -1,    -1,   332,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    37,    -1, 
         -1,    -1,    -1,    42,    43,    -1,    45,   124,    47,   126, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    91,    -1,    -1, 
         -1,    60,    -1,    62,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   420,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,    -1,   312,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    40,    41,    42,    43,    44,    45,    -1, 
         47,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,   300,   301,   302,   303,    -1,    -1,    -1,    -1,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,    -1,    93,    94,    -1,   300, 
        301,   302,   303,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,    -1,   312,   123,   124,   125,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,   280,   281,   282,   283, 
        284,   285,    -1,   287,   331,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    40,    41,    42,    43,    44,    45,   303, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,   312,    91,    -1,    93,    94,    58,    59, 
         60,    61,    62,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   331,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,    -1,    -1,   123,   124,   125,   126, 
         -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
        257,    -1,    -1,   260,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   310,   311,   312,    58,    59,    60,    61, 
         62,    63,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   330,   331,   332,    -1,    -1,    -1,    -1, 
         37,    38,    -1,   340,    41,    42,    43,    44,    45,    -1, 
         47,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
        257,    -1,    -1,   260,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,   410,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   310,   311,   312,    -1,   124,   125,   126, 
         -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   330,   331,   332,    -1,    -1,    -1,    -1, 
         37,    38,    -1,   340,    41,    42,    43,    44,    45,    -1, 
         47,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
        330,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,   331, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,   331,    47,    93,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   124,   125,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    37,    38,   312,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    37,    38,    93, 
         94,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    -1,    -1,    93,    94,    -1,    -1, 
        124,   125,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    93,    94,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,   312,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    94,    -1,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,    -1,   126,    -1,    -1, 
         -1,    -1,    94,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   312,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    38,    -1,   312,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    37, 
         38,    -1,   312,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    -1,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    94,    -1,    -1,   124, 
         -1,   126,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,   312,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,   124,    -1,   126,    -1, 
        400,   401,   331,    -1,   404,   405,   406,   407,   408,    -1, 
        371,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   424,    60,    61,    62,    63,    -1,    -1, 
        431,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   124,    -1, 
        126,    -1,    -1,   494,    -1,    -1,    -1,    -1,    37,    38, 
         -1,   502,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,   513,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1, 
         -1,    37,    38,   544,   312,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,   573,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,    -1,   126,    -1,    -1, 
        591,    -1,    -1,    -1,    -1,   596,    -1,    -1,    94,    -1, 
        601,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,   124,    -1, 
        126,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,   312,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   124,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    37,    38,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    37,    38,    -1,   312, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,   331,    60, 
         61,    62,    63,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         94,    -1,    -1,   124,    -1,   126,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
        124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
        312,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,   331, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   124,   125,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    93,    94, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    58,    59,    60,    61,    62,    63,    -1,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,   124,   125, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    94, 
        124,    -1,   126,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,   124, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    38,    -1,    -1, 
         41,    -1,    43,    44,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,   124,    -1,   126,    -1, 
         -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   312,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    -1,    43,    44,    45,   331,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   331,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   124,   125,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   312,    -1,   411,   412,    -1,    -1, 
        415,   416,   417,   418,   419,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    38,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   124,   125,   411,   412,    -1,    -1,    -1,   416,   417, 
        418,   419,    93,    94,    -1,    -1,    -1,   124,   125,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    38, 
         -1,    -1,    41,   124,   125,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    58, 
         59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    38,    93,    94,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    93,    94, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    58,    59,    44,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    38,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41, 
         58,    59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35, 
         -1,    -1,    -1,    -1,    40,    93,    94,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    93,   411,   412,    60,   414,   415,   416,   417,   418, 
        419,   404,   405,   406,   407,   408,   124,   125,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,   124,   125,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    41,    -1,    -1,    44,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1, 
         35,    -1,    -1,    -1,    60,    40,    62,    93,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    58,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   404,   405,   406,   407,   408,    94,   125, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   124,    -1, 
        126,    -1,   414,   415,   416,   417,   418,   419,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,   126,    -1,    -1,   260,   261,   262,   263,   264,   265, 
         -1,    60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    33, 
         -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    62,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416,   417, 
        418,   419,   404,   405,   406,   407,   408,    91,    -1,    -1, 
         -1,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
        265,    -1,    -1,    -1,    -1,   401,   402,   403,    -1,    -1, 
         -1,    -1,   126,    33,    -1,    35,    -1,    -1,    -1,    -1, 
         40,   286,    -1,    43,    -1,    45,   312,    33,    -1,    35, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    61,    -1,    -1,    -1,   331,    -1,    -1,   313,    -1, 
         -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    33,    -1,    35,   340,    -1,    -1,    -1,    40, 
         -1,   346,    43,    -1,    45,    91,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,    -1,    -1, 
        126,    -1,    -1,   312,    -1,   411,   412,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    35,   123,    -1,    -1,   126,    40,    -1,    -1,    43, 
         -1,    45,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,   411,   412,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,   265,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,   260,   261,   262,   263,   264,   265, 
         -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        286,    -1,    -1,    -1,    -1,    -1,   400,    -1,   402,   403, 
         -1,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,   313,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,    -1,    -1,    -1,    -1,   286,   346,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,   402,   403,    -1,   346,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 182 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 194 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 194 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 205 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 206 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 210 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 10:  #line 213 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new NativeImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 11:  #line 216 "grammar/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 12:  #line 219 "grammar/xp.jay"
    {
    $this->error(E_WARNING, 'Deprecated static import form used', array($yyVals[-3+$yyTop].'::'.$yyVals[-1+$yyTop]));
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 16:  #line 232 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 237 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 238 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 244 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 244 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 253 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 253 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 262 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 262 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 273 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 274 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 278 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 279 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 283 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 284 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 288 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 289 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 293 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 294 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 298 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 299 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 300 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 304 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 305 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 306 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 310 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 311 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 315 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 315 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 318 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 318 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 328 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 335 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 342 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 348 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 353 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 354 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 358 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 359 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 363 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 364 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 370 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 370 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 381 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 381 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 392 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 392 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 417 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 417 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 430 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 431 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 435 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 436 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 440 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 443 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 447 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 454 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 459 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 464 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 471 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 472 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 476 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 477 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 81:  #line 481 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 82:  #line 482 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 83:  #line 483 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 84:  #line 487 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 85:  #line 488 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 86:  #line 489 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 87:  #line 493 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 494 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 89:  #line 498 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 499 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 91:  #line 503 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 92:  #line 504 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 93:  #line 505 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 509 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 95:  #line 510 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 96:  #line 514 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 97:  #line 515 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 104:  #line 534 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 106:  #line 539 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 540 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 108:  #line 544 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 109:  #line 544 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 110:  #line 547 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 111:  #line 547 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 112:  #line 552 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 113:  #line 552 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 114:  #line 562 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 115:  #line 562 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 116:  #line 567 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 117:  #line 567 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 119:  #line 571 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 120:  #line 575 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 121:  #line 575 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 122:  #line 579 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 124:  #line 580 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 126:  #line 581 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 127:  #line 581 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 128:  #line 584 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 129:  #line 584 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 130:  #line 589 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 131:  #line 592 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 133:  #line 599 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 134:  #line 600 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 135:  #line 604 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 136:  #line 607 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 137:  #line 614 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 615 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 139:  #line 619 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 140:  #line 625 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 141:  #line 626 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 142:  #line 630 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 635 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 145:  #line 636 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 146:  #line 640 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 147:  #line 640 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 644 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 149:  #line 644 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 650 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 151:  #line 651 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 152:  #line 655 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 153:  #line 656 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 154:  #line 656 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 155:  #line 661 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 156:  #line 662 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 157:  #line 666 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 158:  #line 667 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 159:  #line 671 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 160:  #line 671 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 161:  #line 685 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 162:  #line 686 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 163:  #line 690 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 165:  #line 695 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 166:  #line 695 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 167:  #line 703 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 169:  #line 708 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 170:  #line 709 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 171:  #line 713 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 173:  #line 718 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 174:  #line 724 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 175:  #line 729 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 176:  #line 737 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 177:  #line 740 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 178:  #line 743 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 179:  #line 746 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 180:  #line 752 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 181:  #line 752 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 182:  #line 758 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 183:  #line 764 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 184:  #line 764 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 185:  #line 773 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 186:  #line 773 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 187:  #line 783 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 188:  #line 783 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 189:  #line 792 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 190:  #line 795 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 191:  #line 798 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 192:  #line 801 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 193:  #line 804 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 807 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 195:  #line 810 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 196:  #line 814 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 197:  #line 820 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 198:  #line 826 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 199:  #line 832 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 200:  #line 837 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 201:  #line 837 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 202:  #line 843 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 203:  #line 854 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 204:  #line 857 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 205:  #line 863 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 207:  #line 868 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 208:  #line 869 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 209:  #line 873 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 210:  #line 874 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 211:  #line 878 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 212:  #line 884 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 213:  #line 884 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 214:  #line 885 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 215:  #line 886 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 216:  #line 887 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 888 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 889 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 219:  #line 893 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 220:  #line 896 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 221:  #line 902 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 223:  #line 907 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 908 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 225:  #line 912 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 227:  #line 917 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 918 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 922 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 230:  #line 923 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 231:  #line 924 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 925 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 926 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 927 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 928 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 929 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 930 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 931 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 932 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 240:  #line 933 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 241:  #line 937 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 938 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 939 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 940 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 941 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 942 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 943 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 248:  #line 944 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 249:  #line 948 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 250:  #line 949 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 950 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 951 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 955 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 956 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 957 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 259:  #line 958 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 260:  #line 962 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 963 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 964 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 965 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 966 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 967 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 971 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 267:  #line 972 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 268:  #line 977 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 270:  #line 982 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 271:  #line 983 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 272:  #line 987 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 273:  #line 987 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 274:  #line 990 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 275:  #line 993 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 276:  #line 993 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 277:  #line 996 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 278:  #line 996 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 279:  #line 1002 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 280:  #line 1003 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 287:  #line 1021 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 288:  #line 1022 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 289:  #line 1026 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 290:  #line 1030 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 291:  #line 1034 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 292:  #line 1035 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 294:  #line 1040 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 295:  #line 1044 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 296:  #line 1045 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 297:  #line 1051 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 298:  #line 1052 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 299:  #line 1056 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 300:  #line 1057 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 301:  #line 1061 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 302:  #line 1062 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 303:  #line 1063 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 304:  #line 1064 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 305:  #line 1065 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 306:  #line 1066 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 307:  #line 1067 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 308:  #line 1068 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2801 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
