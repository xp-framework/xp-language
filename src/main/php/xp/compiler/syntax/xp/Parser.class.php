<?php
#line 2 "src/main/jay/grammars/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_EXP= 421;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     7,     7, 
          7,     7,     9,     9,     8,     8,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    53,    53,    54,    54, 
         52,    52,    42,    42,    42,    39,    39,    39,    44,    44, 
         56,    56,    37,    37,    37,    57,    57,    41,    41,    46, 
         46,    46,    46,    46,    46,    26,    26,    58,    58,    61, 
         59,    62,    59,    65,    59,    66,    59,    68,    59,    69, 
         59,    70,    59,    72,    59,    73,    59,    74,    59,    75, 
         59,    59,    59,    59,    77,    77,    79,    79,    78,    78, 
         80,    67,    67,    71,    71,    81,    81,    83,    82,    84, 
         82,    63,    63,    64,    85,    64,    76,    76,    86,    86, 
         90,    89,    91,    91,    87,    87,    92,    88,    55,    55, 
         93,    93,    60,    60,    94,    94,    94,    98,    98,    98, 
         98,   100,    31,    31,   101,    31,   102,    31,   103,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,    31, 
         31,   111,    31,    31,   110,   110,   109,   109,   112,   112, 
        113,   113,    36,   115,    36,    36,    36,    36,    36,    36, 
        114,   114,    97,    97,   116,   116,   118,   118,   117,   117, 
        104,   104,   104,   104,   104,   104,   104,   104,   104,   104, 
        104,   104,   105,   105,   105,   105,   105,   105,   105,   105, 
        106,   106,   106,   106,   106,   106,   106,   106,   106,   106, 
        106,   106,   107,   107,   107,   107,   107,   107,   108,   108, 
         99,    99,   119,   119,   121,   120,   120,   123,   120,   124, 
        120,   122,   122,    10,    10,    10,    32,    32,    32,    12, 
         12,    95,    96,   125,   125,   126,   126,    21,    21,    49, 
         49,   127,   127,   128,   128,   128,   128,   128,   128,   128, 
        128, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     5,     6, 
          6,     6,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     5,     1,     3,     3,     0,     2,     1,     0,     1, 
          1,     3,     3,     3,     4,     1,     2,     0,     2,     1, 
          1,     1,     1,     1,     1,     0,     1,     1,     2,     0, 
          4,     0,     7,     0,    10,     0,     8,     0,     6,     0, 
          8,     0,     8,     0,     3,     0,     3,     0,     4,     0, 
          6,     7,     7,     2,     1,     3,     1,     3,     1,     3, 
          3,     1,     3,     0,     1,     1,     2,     0,     5,     0, 
          4,     1,     3,     0,     0,     3,     2,     1,     1,     2, 
          0,     9,     1,     3,     0,     1,     0,     5,     0,     1, 
          1,     3,     0,     1,     5,     4,     4,     1,     4,     1, 
          1,     0,     3,     2,     0,     4,     0,     5,     0,     6, 
          2,     3,     1,     1,     1,     1,     1,     5,     3,     3, 
          3,     0,     8,     4,     1,     3,     0,     1,     1,     3, 
          1,     2,     1,     0,     4,     1,     1,     1,     1,     1, 
          1,     1,     1,     1,     1,     3,     0,     1,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     3, 
          4,     4,     3,     3,     3,     3,     3,     3,     4,     4, 
          3,     3,     3,     3,     3,     3,     3,     3,     3,     4, 
          4,     3,     2,     2,     2,     2,     2,     2,     2,     2, 
          0,     1,     1,     2,     0,     4,     2,     0,     6,     0, 
          5,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
          4,     3,     4,     1,     3,     1,     3,     1,     3,     0, 
          1,     1,     2,     1,     1,     1,     1,     1,     1,     1, 
          1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,   284,     0,     0,   286,   285,     0,    15,     0,   304, 
        306,   305,   308,   310,   309,   311,   307,     1,     0,    68, 
          0,   302,     8,     0,     0,     4,     0,     0,     0,     0, 
          0,    69,    20,    24,    22,   303,    18,    19,     0,     0, 
          0,    14,     0,     0,     0,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,    13,     0,     0,     9,     0,     0, 
          0,    70,    67,     0,     0,     0,     0,    11,    12,    10, 
         74,    75,   214,     0,     0,   220,   216,   219,   217,   218, 
          0,    81,     0,     0,    77,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    72,     0,    73,     0,     0, 
        287,     0,   288,   289,     0,   294,    27,     0,     0,     0, 
         31,    35,     0,   223,     0,     0,     0,     0,     0,     0, 
        185,     0,     0,     0,   182,     0,     0,     0,     0,     0, 
        221,     0,   222,   193,   194,   195,   196,   197,     0,     0, 
        225,     0,   213,    79,    80,     0,    78,     0,     0,     0, 
          0,   291,    29,    35,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   191,     0,   189,     0,     0, 
          0,     0,   187,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   269,   270,     0,   275,   283,   282,   184, 
        272,     0,     0,     0,   215,     0,     0,   297,     0,   292, 
        295,     0,   299,     0,     0,    25,     0,    34,    36,    37, 
          0,     0,     0,    42,     0,     0,     0,     0,     0,     0, 
          0,     0,   183,     0,   211,     0,     0,     0,   209,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   201,     0,     0,   192,     0, 
        274,   280,     0,   172,     0,     0,   228,   226,    82,   293, 
         21,     0,     0,     0,     0,     0,     0,     0,    23,     0, 
         35,     0,   186,     0,     0,     0,   204,   212,     0,     0, 
          0,   181,   178,     0,     0,     0,     0,     0,     0,     0, 
          0,    97,     0,     0,   278,   110,     0,   128,   114,   118, 
        120,   116,   124,   126,   112,   122,     0,     0,     0,     0, 
        108,     0,    63,     0,     0,     0,     0,     0,     0,    35, 
         45,     0,    43,     0,     0,     0,     0,     0,     0,     0, 
          0,   210,     0,   188,     0,   276,     0,     0,     0,   130, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,    38,   134,   109,     0,     0,    61,    59,   100,   101, 
        102,   103,   104,   105,     0,     0,     0,     0,     0,     0, 
          0,     0,   176,   177,   190,     0,   202,     0,   281,     0, 
          0,     0,     0,     0,   135,     0,     0,     0,     0,   152, 
          0,     0,   125,   127,     0,     0,     0,     0,   139,     0, 
          0,    91,     0,     0,     0,     0,     0,    65,     0,     0, 
         48,     0,     0,    53,    33,     0,   175,   206,     0,   179, 
        279,   111,     0,     0,     0,     0,   129,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    50,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    52, 
         55,     0,    49,    54,    47,   203,     0,     0,   136,     0, 
          0,     0,   153,     0,     0,     0,     0,     0,     0,   140, 
          0,     0,     0,     0,    92,    94,    93,     0,     0,     0, 
          0,     0,   161,   167,   131,     0,   158,   159,     0,     0, 
        119,     0,   143,     0,     0,     0,     0,    95,    99,     0, 
         83,     0,    64,     0,     0,     0,    56,     0,     0,   157, 
        166,   160,   132,     0,     0,     0,   155,   113,   148,   150, 
          0,     0,   146,   133,     0,     0,    62,    60,     0,     0, 
          0,     0,   121,   117,     0,     0,     0,   123,   147,    85, 
         84,    66,   163,     0,     0,     0,   156,     0,     0,     0, 
          0,   168,   115,     0,   151,   164,     0,   149,     0,     0, 
        162, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    28,   138,     4,     7,     8,    17,    53,    18, 
        237,   111,    61,    98,   119,   166,    63,   242,    62,   100, 
        121,   371,   238,   239,   240,   358,   243,   244,   317,   318, 
        359,   298,   418,   369,   463,   140,   452,   464,   496,   457, 
        524,   553,   456,   453,   406,   415,   499,    41,    30,    42, 
         58,    93,    94,    95,   141,   454,   455,   360,   361,   274, 
        389,   399,   441,   568,   393,   396,   483,   394,   395,   400, 
        571,   397,   398,   392,   432,   535,   434,   448,   435,   449, 
        572,   573,   586,   587,   585,   536,   560,   537,   538,   558, 
        594,   559,   142,   247,   113,   114,   143,   334,   220,   180, 
        175,   260,   251,   144,   145,   146,   147,   148,   257,   381, 
        469,   258,   259,   149,   102,   150,   151,   308,   221,   222, 
        300,   223,   388,   344,   115,   116,    31,    32, 
    );
    protected static $yySindex = array(         -294,
          0,     0,  -264,   103,  -215,   307,  -264,     0,    10,    21, 
         69,     0,  -222,  -222,     0,     0,    75,     0,   157,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   228,     0, 
        940,     0,     0,   103,   103,     0,   -42,   121,   -19,  -161, 
         52,     0,     0,     0,     0,     0,     0,     0,   -19,   -19, 
        -19,     0,   148,     0,   165,   182,     0,   240,   157,   940, 
        103,   103,   103,   225,     0,   273,   281,     0,   103,   103, 
        450,     0,     0,   258,    82,   115,    82,     0,     0,     0, 
          0,     0,     0,   103,   299,     0,     0,     0,     0,     0, 
        379,     0,   392,   259,     0,   114,   103,   131,   103,   323, 
        131,  4508,   408,   572,   572,     0,  -156,     0,   147,   407, 
          0,   414,     0,     0,   155,     0,     0,   103,   390,   479, 
          0,     0,   420,     0,  4710,  4710,  4710,  4710,  4710,  4710, 
          0,  4710,   319,   468,     0,  4710,   423,   140,  3082,   -44, 
          0,   507,     0,     0,     0,     0,     0,     0,   460,   510, 
          0,  4710,     0,     0,     0,   299,     0,   103,   256,   463, 
        114,     0,     0,     0,   103,   898,   303,   341,  -116,  -116, 
        104,  -116,  -116,  -116,   256,     0,  4710,     0,  4710,   -44, 
       2063,    35,     0,  4710,  4710,  4710,  4710,  4710,  4710,  4710, 
       4710,  4710,  4710,  4710,  4710,  4710,  4710,  4710,  4710,  4517, 
       4701,  4323,  4710,  4447,  4710,  4710,  4710,  4710,  4710,  4710, 
       4710,   103,  4710,     0,     0,   256,     0,     0,     0,     0, 
          0,   -44,   -22,  4710,     0,   160,   528,     0,   280,     0, 
          0,  1551,     0,   451,   315,     0,    48,     0,     0,     0, 
          0,   453,    29,     0,   543,   414,   -44,   462,   470,  3082, 
       4710,  3082,     0,   -44,     0,   -58,   329,   551,     0,  -177, 
       3301,  3328,  3328,  3328,  3328,  3328,  3328,  3328,  3328,  3328, 
       3328,  3328,  3082,   557,  3199,    60,   296,  4710,   372,  4710, 
        372,  4710,  4710,    87,    87,  4710,  4710,    87,    87,    99, 
         99,  -111,  -111,  -111,   104,     0,  -116,   146,     0,  4710, 
          0,     0,   569,     0,   561,   468,     0,     0,     0,     0, 
          0,   650,   362,   397,   364,   -31,   502,   586,     0,   303, 
          0,  4710,     0,  4710,    90,   587,     0,     0,  4614,    35, 
        589,     0,     0,   -44,  4710,  3328,  3328,    87,    87,    87, 
         87,     0,   545,  4710,     0,     0,    37,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   600,   521,  2191,   650, 
          0,   588,     0,   607,   608,    27,   560,   593,   539,     0, 
          0,  4710,     0,   598,   623,   547,   556,   -44,   650,  3082, 
        563,     0,  4710,     0,   -18,     0,   629,  4710,  4710,     0, 
        346,  4710,   651,   652,   527,   654,   641,   645,   678,   681, 
        382,     0,     0,     0,   337,   208,     0,     0,     0,     0, 
          0,     0,     0,     0,   685,   208,  4710,   667,   472,  1781, 
       2231,   502,     0,     0,     0,   615,     0,   702,     0,   710, 
        693,   650,   692,   403,     0,  2448,  4710,  4710,   650,     0, 
        394,   431,     0,     0,  4710,  4710,   699,   415,     0,   704, 
        719,     0,   737,   739,  -150,   239,   239,     0,   688,  3082, 
          0,    -6,  -108,     0,     0,   502,     0,     0,   -44,     0, 
          0,     0,   659,  4710,   346,   662,     0,   735,  2487,   670, 
        757,   762,   437,  2616,  2643,  4710,   382,   684,     0,   548, 
        488,   208,   474,   593,   208,   774,   739,   780,   208,     0, 
          0,   650,     0,     0,     0,     0,   135,  3082,     0,   650, 
       4710,   527,     0,  4710,   482,  4710,   527,   701,  3082,     0, 
        650,   593,   103,   -33,     0,     0,     0,   739,   488,   488, 
        784,   706,     0,     0,     0,   135,     0,     0,   714,   768, 
          0,  2670,     0,  2783,   458,   112,   716,     0,     0,  4710, 
          0,   650,     0,   -33,   -33,   488,     0,   802,   720,     0, 
          0,     0,     0,  4710,   791,   527,     0,     0,     0,     0, 
        726,   112,     0,     0,  2916,   728,     0,     0,   -33,   103, 
        650,   814,     0,     0,   527,  4710,   798,     0,     0,     0, 
          0,     0,     0,  -112,   732,   527,     0,  3055,   650,   103, 
        817,     0,     0,   650,     0,     0,   736,     0,   650,   738, 
          0, 
    );
    protected static $yyRindex= array(          756,
          0,     0,   781,     0,     0,   237,   840,     0,   879,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        544,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -43,   129,     0,     0,    83,     0,   747, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   906,  -101,   741,  -101,     0,     0,     0, 
          0,     0,     0,     0,   819,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   742,     0,     0, 
        742,   769,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   263,     0,     0,     0,     0,     0,     0,     0,    41, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,  1375,  1606,     0,     0,     0,     0,   514,  1333, 
          0,    22,     0,     0,     0,     0,     0,     0,     0,   -79, 
          0,   820,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   164,   746,   686,  1546,  1763, 
       2746,  1806,  1935,  1995,     0,     0,     0,     0,     0,  1333, 
          0,   609,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   816,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  1508,     0,   942,     0,    47,     0,     0,     0,     0, 
          0,   164,     0,  1853,     0,     0,     0,     0,     0,     0, 
         91,     0,   750,     0,   800,     0,  1333,   803,   804,    50, 
        820,   244,     0,  1333,     0,     0,     0,   643,     0,     0, 
         -9,    -7,   190,   320,   434,   562,   661,   759,   761,  1634, 
       1636,  1845,   456,     0,  4313,  4284,  4198,     0,  4214,     0, 
       4268,     0,     0,  3712,  3780,     0,     0,  3808,  3882,  3385, 
       3630,  3172,  3481,  3586,  2873,     0,  2036,  1307,     0,   805, 
          0,     0,  1071,     0,     0,     0,     0,     0,     0,     0, 
          0,   777,     0,   144,     0,     0,   107,     0,     0,     0, 
          0,   820,     0,   778,     0,     0,     0,     0,     0,     0, 
       1109,     0,     0,  1333,     0,  2073,  2142,  4012,  4028,  4052, 
       4110,     0,     0,   820,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   -46, 
          0,     0,     0,     0,   782,     0,     0,   845,     0,     0, 
          0,     0,     0,   -86,     0,     0,     0,  1333,   777,   783, 
          0,     0,   820,     0,   261,     0,     0,   820,   847,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   868,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   164, 
          0,  1210,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   777,   425,     0,     0,     0,   866,     0,   777,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   886,     0,   887,   887,     0,     0,   723, 
          0,     0,     0,     0,     0,   107,     0,     0,  1333,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   570,     0,     0,     0,     0,     0,     0,     0,     0, 
         74,     0,     0,   143,     0,     0,   892,     0,   868,     0, 
          0,   777,     0,     0,     0,     0,     0,   429,     0,   777, 
        866,     0,     0,     0,     0,     0,     0,     0,   433,     0, 
        777,   143,     0,     0,     0,     0,     0,   894,    74,    74, 
          0,     0,     0,     0,     0,   271,     0,     0,     0,     0, 
          0,     0,     0,     0,   396,   827,     0,     0,     0,     0, 
          0,   777,     0,     0,     0,    74,     0,     0,     0,     0, 
          0,     0,     0,   820,     0,     0,     0,     0,     0,     0, 
          0,   829,     0,     0,     0,     0,     0,     0,     0,     0, 
        777,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   -38,     0, 
          0,     0,     0,   -38,     0,     0,     0,     0,   777,     0, 
          0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   938,   496,   515,    62, 
        949,   -56,     0,   881,   855,  -151,     0,     0,     0,     0, 
       -117,  -284,     0,     0,     0,  1816,     0,   639,     0,     0, 
         66,   386,  -165,     0,     0,   -50,  -327,   497,   504,     0, 
       -371,  -128,     0,   467,     0,     0,     0,     0,   902,   912, 
          0,   413,     0,   867,  -141,  -268,   763,     0,   311,  -163, 
          0,     0,  -273,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   500,   491, 
          0,   409,     0,     0,     0,     0,     0,   444,   446,     0, 
          0,     0,     0,     0,   809,   810,   663,     0,  -172,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   657,     0,     0,     0,   788,     0,   772,     0, 
          0,     0,     0,     0,     0,   834,     0,   975, 
    );
    protected static $yyTable = array(11,
        163,   219,    16,    50,    75,    76,    77,   253,     1,   213, 
        227,   600,   232,   224,   213,    13,   503,   302,   210,   199, 
         92,    26,    52,   208,   206,   551,   207,   103,   209,    47, 
         48,   199,   160,   200,   199,    57,   200,    12,    39,     5, 
        117,   202,   120,   204,    12,   224,   217,   233,   199,   199, 
        200,   200,   501,    92,    92,    34,    74,    74,    74,   160, 
        304,   120,   170,   413,    81,    82,    35,    13,   411,   409, 
         14,   410,   320,   412,   323,   198,   391,    15,   107,    74, 
        170,   327,   331,   199,    15,   200,   106,   321,   459,   552, 
        227,    74,    74,   229,    74,    59,   210,   199,    55,   298, 
         54,   208,   206,   156,   207,   197,   209,   213,   120,   326, 
         65,    54,    54,    74,   170,   199,   502,   200,   245,   202, 
         39,   204,   332,   210,    10,   110,    71,    36,   208,   206, 
         46,   207,    98,   209,    44,   210,   343,   467,   110,   227, 
        208,    16,   229,    91,    60,   209,   170,   124,    16,    44, 
         32,   462,   414,   228,    74,   296,    74,   554,   555,   390, 
         74,   384,   333,   298,   525,    32,    51,   139,    17,   374, 
         74,   227,    17,   300,   229,    71,   109,    74,    56,   493, 
        375,   505,   376,    57,   579,   213,    57,   497,   497,   494, 
        169,   170,   171,   172,   173,   174,    98,   176,   161,   300, 
        212,   181,   387,    17,   110,   425,    68,    74,   342,    26, 
         34,    74,   213,    44,   216,    44,   162,   139,   420,   216, 
         40,    17,    69,   550,   213,   431,   528,   601,   365,   213, 
        231,    32,    74,   231,    17,    57,   160,    12,   541,    70, 
         12,   428,   250,   545,   252,   300,   430,   231,   231,   261, 
        262,   263,   264,   265,   266,   267,   268,   269,   270,   271, 
        272,   273,   275,   276,   277,   279,   281,   284,   285,   288, 
        289,   290,   291,   292,   293,   294,   295,    15,   297,    71, 
         15,   328,   231,    78,   303,   214,   215,   230,   366,   273, 
        214,   215,   584,   212,     9,   478,   506,   298,   110,   108, 
        367,   198,   107,   165,   198,   165,   296,   314,   368,   211, 
        165,   597,   216,   165,   231,   165,   139,    96,   198,   198, 
         10,   198,   603,   198,   296,    74,   107,   107,   527,   110, 
         98,    79,   210,    10,   106,   106,   230,   208,   206,    80, 
        207,    16,   209,   336,    16,   337,   110,   338,   339,   305, 
        306,   340,   341,   198,   450,   202,   548,   204,   178,   104, 
        232,   165,     9,   232,    34,   273,    16,    49,   230,   540, 
        160,   212,   310,     9,   255,   218,   177,   232,   232,   315, 
        178,   205,   203,   214,   215,   198,    34,   139,    10,   139, 
        216,    97,   200,   201,   380,   165,   165,    19,   212,    10, 
        385,    74,   211,    17,   199,   549,   200,   200,   210,   139, 
        212,    74,   232,   208,   206,   212,   207,   216,   209,   305, 
        306,   213,   582,   300,    99,   577,   578,    83,   154,   216, 
        154,   202,   106,   204,   216,   154,   363,   421,   154,   105, 
        154,   118,    34,   476,   232,   122,   475,   152,   139,   300, 
        592,    74,    74,   139,   273,   488,   158,   436,   487,   205, 
        203,   214,   215,    17,   159,   137,   120,     9,   137,   138, 
        200,   201,   138,   141,   233,    17,   141,   233,   533,   534, 
        211,   112,   460,    17,   569,   570,   154,    74,   214,   215, 
         74,   233,   233,    10,    74,   300,   174,   213,     9,   174, 
        214,   215,   139,   479,   160,   214,   215,   211,    37,    38, 
        484,   485,   164,   174,   174,     9,   154,   155,    74,   211, 
        154,   154,   165,   593,    10,   179,   233,    43,    44,    45, 
        165,   165,   165,   165,   165,   165,   300,   300,   300,   508, 
         83,    10,   167,   606,   229,   182,   112,   451,   174,   183, 
        224,   519,   225,   226,   171,   230,   165,   171,   233,   127, 
        246,   137,   241,    64,    66,    67,   136,   256,   309,   125, 
        495,   126,   171,   312,   313,    74,   139,   319,   451,   542, 
        174,   544,   322,   165,   324,   329,    20,    21,    22,    23, 
         24,    25,   325,    26,   330,    74,   153,    86,    87,    88, 
         89,    90,   234,   231,   231,   234,   171,   212,   345,    27, 
        165,   165,   165,   165,   335,   575,   165,    83,   177,   234, 
        234,   362,   316,   364,   370,   372,   216,   378,   383,   139, 
        165,   165,   165,   165,   301,   165,   165,   386,   171,   401, 
        165,   165,   165,   165,   165,   402,   407,   408,   405,   439, 
        416,   598,   128,   417,   234,   154,   154,   154,   154,   154, 
        154,   419,    83,   422,   198,   198,   198,   198,   198,   429, 
        404,   423,   165,   165,   198,   198,   198,   198,   198,   198, 
        424,   154,   127,   212,   137,   433,   234,   427,    19,   136, 
        437,   438,   125,   442,   126,   205,   203,   214,   215,   443, 
        165,   235,   216,   444,   235,   440,   200,   201,   154,    85, 
         86,    87,    88,    89,    90,   256,   211,   445,   235,   235, 
        446,   447,   213,   213,   458,   461,   213,   213,   213,   213, 
        213,   462,   213,   232,   232,   154,   154,   154,   154,   468, 
         83,   154,   470,   213,   213,   213,   213,   213,   213,    91, 
        471,   472,   474,   235,   481,   154,   154,   154,   154,   486, 
        154,   154,   489,    58,   490,   154,    58,   154,   154,   154, 
        482,   205,   203,   214,   215,   128,   213,   491,   213,   213, 
        500,    58,   492,   507,   510,   235,   168,    86,    87,    88, 
         89,    90,   211,   511,   513,    84,   514,   154,   154,   237, 
        516,   236,   237,   301,   236,   515,   521,   522,   523,   213, 
        213,   213,    10,   526,   529,    58,   237,   237,   236,   236, 
        530,   543,   440,   546,   556,   154,   564,   440,   567,   301, 
        557,   153,    86,    87,    88,    89,    90,   300,   563,   132, 
        574,   580,   581,   301,   301,   301,     2,   233,   233,   583, 
        588,   237,   591,   236,   596,   599,   602,   607,   609,   213, 
        169,   169,   611,    30,    28,   207,   135,   346,   347,   348, 
         41,     5,   131,   173,    40,   301,   440,    20,    21,    22, 
        234,    24,    25,   237,    26,   236,   349,   350,   351,   352, 
        287,   353,   354,   288,   289,   440,   355,   173,   356,   208, 
         27,   106,   169,    57,    51,   173,   440,   205,    89,   168, 
         86,    87,    88,    89,    90,    17,    17,    84,    17,    17, 
         17,    17,    17,    17,   169,    17,    90,    86,   129,   130, 
          6,   235,    88,   142,    87,    10,    17,    17,    17,    17, 
         17,    17,   290,   290,    33,   290,   290,   290,   290,   290, 
        290,   144,   290,   145,    29,   123,   357,   101,   373,   504, 
        498,    73,   132,   290,   290,   531,   290,   290,   290,    17, 
         72,    17,    17,   157,   509,   234,   234,   520,   299,   561, 
        589,   562,   173,   248,   249,   173,   382,   377,    19,   135, 
        346,   347,   348,   301,   231,   131,   290,   213,   290,   290, 
        173,    17,    17,    17,    17,    46,   300,     0,     0,   349, 
        350,   351,   352,   307,   353,   354,   213,     0,     0,   355, 
          0,   356,   236,     0,     0,     0,     0,     0,   290,   290, 
        290,   290,   300,     0,   173,     2,     2,     2,     2,     2, 
          2,     0,     2,     0,     0,     0,   300,   300,   300,     0, 
          0,   129,   130,     0,     0,     2,     2,     2,     0,     2, 
          5,     5,     5,     5,     5,     5,   173,     5,     0,     0, 
          0,     0,     0,     0,   235,   235,     0,     0,   300,   357, 
          5,     5,     5,     5,     0,   213,   213,   213,   213,   213, 
        213,   213,   213,   213,     0,    17,   213,   213,     0,   213, 
        213,   213,   213,   213,   213,   213,   213,   277,   277,     0, 
          0,   277,   277,   277,   277,   277,   277,   277,     0,     6, 
          6,     6,     6,     6,     6,     0,     6,     0,   277,   277, 
        277,   277,   277,   277,     0,    17,     0,     0,    17,     6, 
          6,     6,     6,     0,     0,   180,   180,     0,     0,   180, 
        180,   180,   180,   180,   180,   180,     0,     0,     0,     0, 
          0,   277,   290,   277,   277,   290,   180,   180,   180,   180, 
        180,   180,   237,   237,   236,   236,     0,    20,    21,    22, 
        234,    24,    25,     0,    26,     0,     0,     0,    17,    17, 
         17,     0,     0,     0,   277,   277,   277,     0,    17,   180, 
         27,   180,   180,     0,     0,     0,     0,     0,    17,    17, 
         17,     0,     0,     0,     0,   290,   290,   290,    17,    20, 
         21,    22,    23,    24,    25,   290,    26,     0,     0,     0, 
          0,   235,   180,   180,   180,   290,   290,   290,     0,     0, 
          0,     0,    27,     0,     0,   290,    32,    32,     0,     0, 
         32,    32,    32,    32,    32,    32,    32,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    32,    32,    32, 
         32,    32,    32,     0,     0,     0,     0,     0,    17,    17, 
         17,    17,    17,    17,    17,    17,    17,     0,    17,    17, 
         17,     0,    17,    17,    17,    17,    17,    17,     0,    17, 
         32,     0,    32,    32,     0,   290,   290,   290,   290,   290, 
        290,   290,   290,   290,     0,     0,   290,   290,     0,   290, 
        290,   290,   290,   290,   290,     0,   290,     0,     0,     0, 
          0,     0,     0,    32,    32,    32,     0,     0,     0,     0, 
          0,     0,     0,    96,    96,     0,     0,    96,    96,    96, 
         96,    96,     0,    96,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    96,    96,    96,    96,    96,   271, 
        271,     0,     0,   271,   271,   271,   271,   271,     0,   271, 
          0,     0,   277,     0,     0,     0,     0,     0,     0,     0, 
        271,   271,   271,   271,   271,   271,     0,     0,     0,    96, 
         96,   277,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   213,   213,     0,     0,     0,   213,   213,   213,   213, 
        180,   213,     0,     0,     0,   271,   271,     0,     0,     0, 
         96,    96,    96,     0,   213,   213,   213,   213,     0,   180, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   271,   271,   271,     0, 
          0,     0,     0,     0,     0,   213,     0,   213,   213,     0, 
        277,   277,   277,   277,   277,   277,   277,   277,   277,     0, 
          0,   277,   277,     0,   277,   277,   277,   277,   277,   277, 
        277,   277,     0,     0,     0,     0,     0,     0,   213,     0, 
        213,     0,     0,     0,     0,     0,     0,     0,   180,   180, 
        180,   180,   180,   180,   180,   180,   180,     0,     0,   180, 
        180,    32,   180,   180,   180,   180,   180,   180,   180,   180, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         32,     0,     0,     0,   273,   273,     0,     0,   273,   273, 
        273,   273,   273,     0,   273,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   273,   273,   273,   273,   273, 
        273,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   265,   265,     0,     0,   265,   265,   265,   265, 
        265,     0,   265,     0,     0,     0,     0,     0,     0,     0, 
        273,   273,     0,   265,   265,   265,   265,   265,   265,    32, 
         32,    32,    32,    32,    32,    32,    32,    32,    96,     0, 
         32,    32,     0,    32,    32,    32,    32,    32,    32,    32, 
         32,   273,   273,   273,     0,     0,    96,    96,   265,   265, 
          0,    19,   220,   220,   271,     0,    96,   220,   220,   220, 
        220,   220,   220,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   271,     0,   220,   220,   220,   220,   265, 
        265,     0,     0,     0,   238,   311,   239,   238,     0,   239, 
          0,     0,     0,     0,     0,     0,   213,     0,     0,     0, 
          0,   238,   238,   239,   239,     0,   220,     0,   220,   220, 
          0,     0,     0,     0,     0,   213,    96,    96,    96,    96, 
         96,    96,    96,    96,    96,     0,     0,    96,    96,     0, 
         96,    96,    96,    96,    96,    96,   238,    96,   239,   220, 
          0,   220,   271,   271,   271,   271,   271,   271,   271,   271, 
        271,     0,     0,   271,   271,     0,   271,   271,   271,   271, 
        271,   271,     0,   271,     0,     0,     0,     0,   238,     0, 
        239,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   213,   213,   213,   213,   213,   213, 
        213,   213,   213,     0,    17,   213,   213,     0,   213,   213, 
        213,   213,   213,   213,   213,   213,     0,     0,     0,   266, 
        266,     0,     0,   266,   266,   266,   266,   266,     0,   266, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   273, 
        266,   266,   266,   266,   266,   266,     0,     0,     0,     0, 
         20,    21,    22,   234,    24,    25,     0,    26,   273,     0, 
          0,     0,   264,   264,     0,     0,   264,   264,   264,   264, 
        264,     0,   264,    27,     0,   266,   266,   265,     0,     0, 
          0,     0,     0,   264,   264,   264,   264,   264,   264,     0, 
          0,    19,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   235,   240,   266,   266,   240,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   264,   264, 
          0,     0,   240,   240,     0,   465,     0,   273,   273,   273, 
        273,   273,   273,   273,   273,   273,     0,   220,   273,   273, 
          0,   273,   273,   273,   273,   273,   273,     0,   273,   264, 
        264,     0,     0,     0,     0,     0,   220,   240,     0,     0, 
          0,     0,     0,   308,     0,   265,   265,     0,     0,   265, 
        265,   265,   265,   265,     0,     0,   265,   265,     0,   265, 
        265,   265,   265,   265,   265,     0,   265,     0,     0,   240, 
          0,   267,   267,     0,     0,   267,   267,   267,   267,   267, 
          0,   267,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   267,   267,   267,   267,   267,   267,     0,     0, 
          0,     0,     0,     0,     0,   220,   220,   220,   220,   220, 
        220,   220,   220,   220,     0,     0,   220,   220,     0,   220, 
        220,   220,   220,   220,   220,   220,   220,   267,   267,     0, 
          0,   268,   268,     0,     0,   268,   268,   268,   268,   268, 
          0,   268,     0,     0,     0,     0,     0,   238,   238,   239, 
        239,     0,   268,   268,   268,   268,   268,   268,   267,   267, 
         20,    21,    22,   234,    24,    25,     0,    26,     0,     0, 
          0,     0,   256,   256,   266,     0,   256,   256,   256,   256, 
        256,     0,   256,    27,     0,     0,     0,   268,   268,     0, 
          0,     0,     0,   256,   256,   256,   256,   256,   256,   210, 
        199,     0,     0,   254,   208,   206,     0,   207,     0,   209, 
          0,     0,   308,   249,   235,     0,   249,   264,   268,   268, 
          0,     0,   202,   186,   204,   196,     0,     0,   256,   256, 
        249,   249,   308,   308,   308,   308,   308,   308,   308,   308, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   308,   198,     0,     0,   256, 
        256,     0,   266,   266,     0,   249,   266,   266,   266,   266, 
        266,     0,     0,   266,   266,     0,   266,   266,   266,   266, 
        266,   266,   250,   266,   308,   250,   197,     0,   213,     0, 
          0,     0,     0,     0,   426,     0,     0,   249,     0,   250, 
        250,     0,     0,     0,     0,   264,   264,     0,     0,   264, 
        264,   264,   264,   264,     0,     0,   264,   264,     0,   264, 
        264,   264,   264,   264,   264,     0,   264,   210,   199,     0, 
          0,     0,   208,   206,   250,   207,     0,   209,     0,     0, 
          0,     0,     0,     0,     0,     0,   267,   473,     0,   403, 
        202,   186,   204,   196,   480,     0,     0,     0,   240,   240, 
          0,     0,     0,     0,     0,     0,   250,   210,   199,     0, 
          0,   466,   208,   206,     0,   207,     0,   209,     0,     0, 
          0,     0,     0,     0,   198,     0,     0,     0,     0,     0, 
        202,   186,   204,   196,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   268,     0,     0,     0, 
          0,     0,     0,     0,   197,     0,   213,   532,     0,     0, 
          0,     0,     0,     0,   198,   539,     0,     0,     0,     0, 
          0,     0,     0,     0,   267,   267,   547,     0,   267,   267, 
        267,   267,   267,     0,     0,   267,   267,   256,   267,   267, 
        267,   267,   267,   267,   197,   267,   213,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   576,     0,     0, 
          0,     0,     0,     0,   212,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   216,   268,   268,   595,     0,   268,   268, 
        268,   268,   268,     0,     0,   268,   268,     0,   268,   268, 
        268,   268,   268,   268,   605,   268,     0,     0,     0,   608, 
          0,     0,     0,     0,   610,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   256,   256,     0,     0,   256, 
        256,   256,   256,   256,     0,     0,   256,   256,     0,   256, 
        256,   256,   256,   256,   256,     0,   256,     0,     0,     0, 
          0,     0,   205,   203,   214,   215,   187,   188,   189,   190, 
        192,     0,     0,   200,   201,     0,   184,   185,   191,   194, 
        193,   195,     0,   211,   210,   199,   249,   249,     0,   208, 
        206,     0,   207,     0,   209,     0,     0,     0,     0,     0, 
          0,     0,   212,     0,     0,     0,   477,   202,   186,   204, 
        196,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   216,     0,   210,   199,     0,     0,   512,   208,   206, 
          0,   207,     0,   209,     0,     0,     0,     0,     0,     0, 
          0,   198,   212,     0,     0,     0,   202,   186,   204,   196, 
          0,     0,     0,     0,     0,   250,   250,     0,     0,     0, 
          0,   216,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   197,     0,   213,     0,     0,     0,     0,     0,     0, 
        198,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        205,   203,   214,   215,   187,   188,   189,   190,   192,     0, 
          0,   200,   201,     0,   184,   185,   191,   194,   193,   195, 
        197,   211,   213,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        205,   203,   214,   215,   187,   188,   189,   190,   192,     0, 
          0,   200,   201,     0,   184,   185,   191,   194,   193,   195, 
          0,   211,   210,   199,     0,     0,   517,   208,   206,     0, 
        207,     0,   209,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   202,   186,   204,   196,   210, 
        199,     0,     0,   518,   208,   206,     0,   207,     0,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   202,   186,   204,   196,   210,   199,     0,   198, 
        565,   208,   206,     0,   207,     0,   209,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   202, 
        186,   204,   196,     0,     0,     0,   198,     0,     0,   197, 
          0,   213,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   212, 
          0,     0,     0,   198,     0,     0,   197,     0,   213,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   216,     0, 
          0,     0,   263,   263,     0,     0,   263,   263,   263,   263, 
        263,     0,   263,   197,     0,   213,     0,     0,   212,     0, 
          0,     0,     0,   263,   263,   263,   263,   263,   263,     0, 
          0,     0,     0,     0,     0,     0,     0,   216,     0,   210, 
        199,     0,     0,   566,   208,   206,     0,   207,     0,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,   263,   263, 
          0,     0,   202,   186,   204,   196,     0,   205,   203,   214, 
        215,   187,   188,   189,   190,   192,     0,     0,   200,   201, 
          0,   184,   185,   191,   194,   193,   195,     0,   211,   263, 
        263,     0,     0,     0,     0,     0,   198,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   205,   203,   214,   215, 
        187,   188,   189,   190,   192,     0,     0,   200,   201,     0, 
        184,   185,   191,   194,   193,   195,   197,   211,   213,   262, 
        262,     0,     0,   262,   262,   262,   262,   262,     0,   262, 
          0,     0,     0,     0,     0,     0,     0,   212,     0,     0, 
        262,   262,   262,   262,   262,   262,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   216,     0,     0,     0, 
          0,     0,   210,   199,   212,     0,     0,   208,   206,     0, 
        207,     0,   209,     0,     0,   262,   262,     0,     0,     0, 
          0,     0,     0,   216,   590,   202,   186,   204,   196,     0, 
          0,   212,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   262,   262,     0,     0, 
        216,     0,     0,     0,     0,     0,     0,     0,     0,   198, 
          0,     0,     0,     0,     0,   205,   203,   214,   215,   187, 
        188,   189,   190,   192,     0,     0,   200,   201,     0,   184, 
        185,   191,   194,   193,   195,     0,   211,     0,     0,   197, 
          0,   213,   205,   203,   214,   215,   187,   188,   189,   190, 
        192,     0,     0,   200,   201,     0,   184,   185,   191,   194, 
        193,   195,     0,   211,     0,     0,     0,     0,     0,   205, 
        203,   214,   215,   187,   188,   189,   190,   192,     0,     0, 
        200,   201,     0,   184,   185,   191,   194,   193,   195,     0, 
        211,   210,   199,     0,   212,     0,   208,   206,     0,   207, 
          0,   209,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   604,   216,   202,   186,   204,   196,   210,   199, 
          0,     0,     0,   208,   206,     0,   207,     0,   209,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   202,   186,   204,   196,   263,   263,     0,   198,   263, 
        263,   263,   263,   263,     0,     0,   263,   263,     0,   263, 
        263,   263,   263,   263,   263,     0,   263,     0,     0,     0, 
          0,     0,     0,     0,     0,   198,     0,     0,   197,     0, 
        213,     0,   205,   203,   214,   215,   187,   188,   189,   190, 
        192,     0,     0,   200,   201,     0,   184,   185,   191,   194, 
        193,   195,     0,   211,     0,   197,     0,   213,   253,   253, 
          0,     0,   253,   253,   253,   253,   253,     0,   253,     0, 
          0,     0,     0,     0,     0,     0,     0,   212,     0,   253, 
        253,   253,   253,   253,   253,   210,   199,     0,     0,     0, 
        208,   206,     0,   207,     0,   209,   216,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   202,     0, 
        204,     0,     0,     0,   253,   253,     0,     0,     0,     0, 
          0,     0,   262,   262,     0,     0,   262,   262,   262,   262, 
        262,     0,     0,   262,   262,     0,   262,   262,   262,   262, 
        262,   262,   198,   262,     0,   253,   253,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   205,   203,   214,   215,   187, 
        188,   189,   190,   192,   213,     0,   200,   201,     0,   184, 
        185,   191,   194,   193,   195,     0,   211,   210,   199,     0, 
          0,     0,   208,   206,     0,   207,     0,   209,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        202,   186,   204,   196,   210,   199,   212,     0,     0,   208, 
        206,     0,   207,     0,   209,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   216,     0,   202,   186,   204, 
        196,     0,     0,   212,   198,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   216,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,   251,     0,   197,   251,   213,   251,   251,   251, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   251,   251,   251,   251,   251,   251,     0,     0, 
          0,   197,     0,   213,   205,   203,   214,   215,   187,   188, 
        189,   190,   192,     0,     0,   200,   201,     0,   184,   185, 
        191,   194,   193,   195,     0,   211,     0,   251,   251,     0, 
          0,   205,   203,   214,   215,   187,   188,   189,   190,   192, 
          0,     0,   200,   201,     0,   184,   185,   191,   194,   193, 
        195,     0,   211,     0,     0,     0,     0,     0,   251,   251, 
        212,     0,     0,     0,     0,     0,     0,   254,   254,     0, 
          0,   254,   254,   254,   254,   254,     0,   254,     0,   216, 
          0,     0,     0,     0,     0,     0,     0,     0,   254,   254, 
        254,   254,   254,   254,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   253,   253,   254,   254,   253,   253,   253,   253,   253, 
          0,     0,   253,   253,     0,   253,   253,   253,   253,   253, 
        253,     0,     0,     0,     0,     0,     0,     0,   205,   203, 
        214,   215,     0,     0,   254,   254,     0,     0,     0,   200, 
        201,     0,   212,     0,     0,     0,     0,     0,     0,   211, 
          0,     0,   255,   255,     0,     0,   255,   255,   255,   255, 
        255,   216,   255,     0,     0,     0,     0,     0,     0,   212, 
          0,     0,     0,   255,   255,   255,   255,   255,   255,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   216,     0, 
          0,     0,     0,     0,     0,     0,     0,   252,     0,     0, 
        252,     0,   252,   252,   252,     0,     0,     0,   255,   255, 
          0,     0,     0,     0,     0,     0,     0,   252,   252,   252, 
        252,   252,   252,     0,     0,     0,     0,     0,     0,     0, 
        205,   203,   214,   215,   187,   188,   189,   190,   192,   255, 
        255,   200,   201,     0,     0,   185,   191,   194,   193,   195, 
          0,   211,   252,   252,     0,     0,     0,   205,   203,   214, 
        215,   187,   188,   189,   190,   192,     0,     0,   200,   201, 
          0,     0,     0,   191,   194,   193,   195,     0,   211,   243, 
          0,     0,   243,   252,   252,   243,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   243, 
        243,     0,   243,     0,   243,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   251,   251,     0,     0,   251,   251, 
        251,   251,   251,     0,     0,   251,   251,     0,   251,   251, 
        251,   251,   251,   251,   243,   243,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   245,     0,     0, 
        245,     0,     0,   245,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   243,   243,   245,   245,     0, 
        245,     0,   245,     0,     0,   244,     0,     0,   244,     0, 
          0,   244,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   244,   244,     0,   244,     0, 
        244,     0,   245,   245,     0,     0,     0,     0,     0,     0, 
        254,   254,     0,     0,   254,   254,   254,   254,   254,     0, 
          0,   254,   254,     0,   254,   254,   254,   254,   254,   254, 
        244,   244,     0,   245,   245,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   246, 
          0,     0,   246,     0,     0,   246,     0,     0,     0,     0, 
          0,   244,   244,     0,     0,     0,     0,     0,     0,   246, 
        246,     0,   246,     0,   246,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   246,   246,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   255,   255,     0,     0,   255, 
        255,   255,   255,   255,     0,     0,   255,   255,     0,   255, 
        255,   255,   255,   255,   255,   246,   246,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   252, 
        252,     0,     0,   252,   252,   252,   252,   252,     0,     0, 
        252,   252,     0,   252,   252,   252,   252,   252,   252,   261, 
          0,     0,   261,     0,     0,   261,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   242,     0,     0,   242,   261, 
        261,   242,   261,     0,   261,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   242,   242,     0,   242,   260, 
        242,     0,   260,     0,     0,   260,     0,     0,     0,     0, 
          0,     0,     0,     0,   261,   261,     0,     0,     0,   260, 
        260,     0,   260,     0,   260,   243,   243,   243,   243,   243, 
        242,   242,   243,   243,     0,   243,   243,   243,   243,   243, 
        243,     0,     0,     0,     0,   261,   261,     0,     0,     0, 
          0,     0,     0,     0,   260,   260,     0,   241,     0,     0, 
        241,   242,   242,   241,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   241,   241,     0, 
        241,     0,   241,     0,     0,   260,   260,     0,     0,     0, 
          0,     0,     0,   245,   245,   245,   245,   245,     0,     0, 
        245,   245,     0,   245,   245,   245,   245,   245,   245,     0, 
          0,     0,   241,   241,     0,     0,     0,     0,     0,     0, 
          0,   244,   244,   244,   244,   244,     0,     0,   244,   244, 
          0,   244,   244,   244,   244,   244,   244,     0,     0,     0, 
          0,     0,     0,   241,   241,   258,     0,     0,   258,     0, 
          0,   258,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   247,     0,     0,   247,   258,   258,   247,   258,     0, 
        258,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   247,   247,     0,   247,     0,   247,     0,     0,     0, 
          0,     0,     0,     0,     0,   246,   246,   246,   246,   246, 
        258,   258,   246,   246,     0,   246,   246,   246,   246,   246, 
        246,     0,     0,     0,     0,   248,   247,   247,   248,     0, 
          0,   248,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   258,   258,     0,   259,   248,   248,   259,   248,     0, 
        248,     0,     0,     0,     0,     0,     0,   247,   247,     0, 
          0,   259,   259,     0,   259,     0,   259,     0,     0,     0, 
          0,     0,     0,   257,     0,   127,   257,   137,     0,     0, 
        248,   248,   136,     0,     0,   125,     0,   126,     0,     0, 
        257,   257,     0,   257,     0,   257,   259,   259,     0,     0, 
          0,     0,   282,     0,     0,     0,     0,     0,     0,     0, 
          0,   248,   248,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   257,     0,   259,   259,     0, 
          0,     0,     0,    83,     0,   261,   261,   261,   261,   261, 
          0,     0,   261,   261,     0,   261,   261,   261,   261,   261, 
        261,   242,   242,   242,   242,   242,   257,   257,   242,   242, 
          0,   242,   242,   242,   242,   242,   242,     0,   128,     0, 
          0,     0,     0,     0,     0,   260,   260,   260,   260,   260, 
          0,     0,   260,   260,     0,   260,   260,   260,   260,   260, 
        260,     0,     0,     0,     0,     0,     0,     0,     0,   127, 
          0,   137,     0,     0,     0,     0,   136,     0,     0,   125, 
          0,   126,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   286,     0, 
          0,     0,     0,   241,   241,   241,   241,   241,     0,     0, 
        241,   241,     0,   241,   241,   241,   241,   241,   241,     0, 
          0,     0,     0,     0,     0,     0,     0,    83,     0,     0, 
        127,     0,   137,     0,     0,     0,     0,   136,     0,   127, 
        125,   137,   126,     0,     0,     0,   136,     0,     0,   125, 
          0,   126,     0,     0,     0,   124,     0,     0,     0,     0, 
          0,     0,   128,     0,     0,     0,     0,   278,     0,     0, 
          0,     0,   168,    86,    87,    88,    89,    90,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    83,     0, 
          0,   258,   258,   258,   258,   258,     0,    83,    10,     0, 
          0,   258,   258,   258,   258,   258,   258,   247,   247,   247, 
        247,   247,     0,     0,     0,     0,     0,   247,   247,   247, 
        247,   247,   247,   128,     0,   132,     0,     0,     0,     0, 
          0,     0,   128,     0,     0,     0,   127,     0,   137,     0, 
          0,     0,     0,   136,     0,     0,   125,     0,   126,     0, 
          0,     0,   135,     0,     0,     0,     0,     0,   131,     0, 
          0,   248,   248,   248,   248,   248,     0,     0,     0,     0, 
          0,   248,   248,   248,   248,   248,   248,   259,   259,   259, 
        259,   259,     0,     0,     0,     0,     0,   259,   259,   259, 
        259,   259,   259,     0,    83,     0,   168,    86,    87,    88, 
         89,    90,     0,     0,     0,     0,   257,   257,   257,   257, 
        257,     0,     0,   283,   129,   130,   257,   257,   257,   257, 
        257,   257,    10,   127,     0,   137,   379,     0,     0,   128, 
        136,     0,   127,   125,   137,   126,     0,     0,     0,   136, 
          0,     0,   125,     0,   126,     0,     0,     0,     0,   132, 
          0,   280,     0,     0,     0,     0,     0,   133,   134,    87, 
         88,    89,    90,     0,     0,     0,   168,    86,    87,    88, 
         89,    90,     0,     0,     0,     0,   135,     0,     0,     0, 
          0,    83,   131,    10,     0,     0,     0,     0,     0,     0, 
         83,     0,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        132,     0,     0,     0,     0,     0,   128,     0,     0,   132, 
          0,     0,     0,     0,     0,   128,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   287,   135,   129,   130, 
          0,     0,     0,   131,     0,     0,   135,     0,     0,     0, 
          0,     0,   131,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   168,    86,    87,    88,    89,    90,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    10, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
        130,     0,     0,     0,     0,     0,     0,     0,   129,   130, 
          0,     0,     0,     0,     0,     0,   132,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   135,     0,     0,     0,     0,     0,   131, 
        168,    86,    87,    88,    89,    90,     0,     0,     0,   168, 
         86,    87,    88,    89,    90,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    10,     0,     0,     0, 
          0,     0,     0,     0,     0,    10,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   132,     0,   129,   130,     0,     0,     0, 
          0,     0,   132,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        135,     0,     0,     0,     0,     0,   131,     0,     0,   135, 
          0,     0,     0,     0,     0,   131,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   129,   130,     0,     0,     0,     0,     0,     0, 
          0,   129,   130, 
    );
    protected static $yyCheck = array(4,
        118,    46,    46,    46,    61,    62,    63,   180,   303,   126, 
        152,   124,   164,    93,   126,    59,   125,    40,    37,    38, 
         71,   123,    42,    42,    43,    59,    45,    84,    47,    34, 
         35,    41,    91,    41,    44,    40,    44,   260,   125,   304, 
         97,    60,    99,    62,   260,   125,    91,   165,    58,    59, 
         58,    59,    59,   104,   105,    46,    61,    62,    63,    91, 
        224,   118,    41,    37,    69,    70,    46,   283,    42,    43, 
        286,    45,    44,    47,   247,    94,    40,   300,   125,    84, 
         59,   254,   260,    93,   300,    93,   125,    59,   416,   123, 
         44,    96,    97,    44,    99,    44,    37,    38,   260,    59, 
         39,    42,    43,   260,    45,   124,    47,   126,   165,   251, 
         49,    50,    51,   118,    93,   125,   123,   125,   175,    60, 
         46,    62,   300,    37,   286,    91,    44,    59,    42,    43, 
         40,    45,    59,    47,    44,    37,   300,   422,    91,    93, 
         42,   364,    93,   300,    93,    47,   125,    58,   364,    59, 
         44,   260,   126,   158,   159,   212,   161,   529,   530,   123, 
        165,   334,   340,   123,   492,    59,    46,   102,    40,   321, 
        175,   125,    44,   260,   125,    93,    63,   182,   340,   330, 
        322,   466,   324,    41,   556,   126,    44,   456,   457,   340, 
        125,   126,   127,   128,   129,   130,   123,   132,    44,   286, 
        312,   136,   344,    60,    91,   378,    59,   212,    63,   311, 
         46,   216,   126,   123,   331,   125,    62,   152,   370,   331, 
         64,    93,    58,   257,   126,   389,   495,   340,   260,   126, 
         41,   125,   237,    44,    91,    93,    91,   260,   512,    58, 
        260,   383,   177,   517,   179,   332,   388,    58,    59,   184, 
        185,   186,   187,   188,   189,   190,   191,   192,   193,   194, 
        195,   196,   197,   198,   199,   200,   201,   202,   203,   204, 
        205,   206,   207,   208,   209,   210,   211,   300,   213,    40, 
        300,   340,    93,    59,   223,   402,   403,    44,   320,   224, 
        402,   403,   566,   312,   260,   437,   469,   257,    91,    41, 
        332,    41,    44,    33,    44,    35,    44,   260,   340,   421, 
         40,   585,   331,    43,   125,    45,   251,    60,    58,    59, 
        286,    61,   596,    63,    62,   330,   373,   374,   494,    91, 
        257,    59,    37,   286,   373,   374,    93,    42,    43,    59, 
         45,   364,    47,   278,   364,   280,    91,   282,   283,   260, 
        261,   286,   287,    93,   405,    60,   522,    62,    40,    61, 
         41,    91,   260,    44,    46,   300,   410,   410,   125,   511, 
         91,   312,    93,   260,   340,   420,    58,    58,    59,   332, 
         40,   400,   401,   402,   403,   125,    46,   322,   286,   324, 
        331,   310,   411,   412,   329,   125,   126,    91,   312,   286, 
        335,   406,   421,   260,   414,   523,   414,   415,    37,   344, 
        312,   416,    93,    42,    43,   312,    45,   331,    47,   260, 
        261,   126,   564,   260,   310,   554,   555,    91,    33,   331, 
         35,    60,    41,    62,   331,    40,    40,   372,    43,    61, 
         45,   311,    46,    41,   125,   123,    44,    40,   383,   286, 
        579,   456,   457,   388,   389,    41,   310,   392,    44,   400, 
        401,   402,   403,   320,    58,    41,   523,   260,    44,    41, 
        411,   412,    44,    41,    41,   332,    44,    44,   344,   345, 
        421,    96,   417,   340,   373,   374,    91,   492,   402,   403, 
        495,    58,    59,   286,   499,   332,    41,   126,   260,    44, 
        402,   403,   437,   438,    91,   402,   403,   421,    13,    14, 
        445,   446,   123,    58,    59,   260,   104,   105,   523,   421, 
        125,   126,    44,   580,   286,    58,    93,   300,   301,   302, 
        260,   261,   262,   263,   264,   265,   300,   301,   302,   474, 
         91,   286,   123,   600,   159,   123,   161,   340,    93,   410, 
         44,   486,    93,    44,    41,    93,   286,    44,   125,    33, 
        175,    35,   260,    49,    50,    51,    40,   182,    41,    43, 
        332,    45,    59,   123,   260,   580,   511,   125,   340,   514, 
        125,   516,    40,   313,   123,   257,   280,   281,   282,   283, 
        284,   285,   123,   287,    44,   600,   260,   261,   262,   263, 
        264,   265,    41,   414,   415,    44,    93,   312,    40,   303, 
        340,   341,   342,   343,    58,   550,   346,    91,    58,    58, 
         59,   260,   237,   260,   123,    40,   331,    41,    40,   564, 
        360,   361,   362,   363,    91,   365,   366,    93,   125,    40, 
        370,   371,   372,   373,   374,   125,    40,    40,    61,   123, 
         91,   586,   126,    61,    93,   260,   261,   262,   263,   264, 
        265,   123,    91,    41,   404,   405,   406,   407,   408,    41, 
        360,   125,   402,   403,   414,   415,   416,   417,   418,   419, 
        125,   286,    33,   312,    35,   340,   125,   125,    91,    40, 
         40,    40,    43,    40,    45,   400,   401,   402,   403,    59, 
        430,    41,   331,    59,    44,   395,   411,   412,   313,   260, 
        261,   262,   263,   264,   265,   330,   421,    40,    58,    59, 
         40,   340,    37,    38,    40,    59,    41,    42,    43,    44, 
         45,   260,    47,   414,   415,   340,   341,   342,   343,   125, 
         91,   346,    41,    58,    59,    60,    61,    62,    63,   300, 
         41,    59,    61,    93,   361,   360,   361,   362,   363,    61, 
        365,   366,    59,    41,    46,   370,    44,   372,   373,   374, 
        340,   400,   401,   402,   403,   126,    91,    41,    93,    94, 
         93,    59,    44,   125,   123,   125,   260,   261,   262,   263, 
        264,   265,   421,    59,   125,   346,    40,   402,   403,    41, 
        364,    41,    44,   260,    44,    44,   123,   260,   321,   124, 
        125,   126,   286,   340,    41,    93,    58,    59,    58,    59, 
         41,   340,   512,   123,    41,   430,    59,   517,   371,   286, 
        125,   260,   261,   262,   263,   264,   265,    91,   125,   313, 
        125,    40,   123,   300,   301,   302,    91,   414,   415,    59, 
        125,    93,   125,    93,    41,    58,   125,    41,   123,    41, 
         41,    93,   125,   123,   123,   257,   340,   341,   342,   343, 
        125,    91,   346,    58,   125,   332,   566,   280,   281,   282, 
        283,   284,   285,   125,   287,   125,   360,   361,   362,   363, 
         91,   365,   366,    91,    91,   585,   370,    93,   372,   257, 
        303,   125,   125,    59,   123,    59,   596,   125,    41,   260, 
        261,   262,   263,   264,   265,    37,    38,   346,    40,    41, 
         42,    43,    44,    45,    59,    47,    41,    41,   402,   403, 
         91,   334,    41,   364,    41,   286,    58,    59,    60,    61, 
         62,    63,    37,    38,     7,    40,    41,    42,    43,    44, 
         45,   125,    47,   125,     6,   101,   430,    77,   320,   463, 
        457,    60,   313,    58,    59,   499,    61,    62,    63,    91, 
         59,    93,    94,   107,   475,   414,   415,   487,   216,   536, 
        572,   536,    41,   175,   175,    44,   330,   325,    91,   340, 
        341,   342,   343,   222,   161,   346,    91,   312,    93,    94, 
         59,   123,   124,   125,   126,    31,   260,    -1,    -1,   360, 
        361,   362,   363,   226,   365,   366,   331,    -1,    -1,   370, 
         -1,   372,   125,    -1,    -1,    -1,    -1,    -1,   123,   124, 
        125,   126,   286,    -1,    93,   280,   281,   282,   283,   284, 
        285,    -1,   287,    -1,    -1,    -1,   300,   301,   302,    -1, 
         -1,   402,   403,    -1,    -1,   300,   301,   302,    -1,   304, 
        280,   281,   282,   283,   284,   285,   125,   287,    -1,    -1, 
         -1,    -1,    -1,    -1,   414,   415,    -1,    -1,   332,   430, 
        300,   301,   302,   303,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   410,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   421,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    46,    47,    -1,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    58,    59, 
         60,    61,    62,    63,    -1,   257,    -1,    -1,   260,   300, 
        301,   302,   303,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1, 
         -1,    91,   257,    93,    94,   260,    58,    59,    60,    61, 
         62,    63,   414,   415,   414,   415,    -1,   280,   281,   282, 
        283,   284,   285,    -1,   287,    -1,    -1,    -1,   310,   311, 
        312,    -1,    -1,    -1,   124,   125,   126,    -1,   320,    91, 
        303,    93,    94,    -1,    -1,    -1,    -1,    -1,   330,   331, 
        332,    -1,    -1,    -1,    -1,   310,   311,   312,   340,   280, 
        281,   282,   283,   284,   285,   320,   287,    -1,    -1,    -1, 
         -1,   334,   124,   125,   126,   330,   331,   332,    -1,    -1, 
         -1,    -1,   303,    -1,    -1,   340,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    46,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,   410,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,   421, 
         91,    -1,    93,    94,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,   125,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    93, 
         94,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    -1,    42,    43,    44,    45, 
        312,    47,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1, 
        124,   125,   126,    -1,    60,    61,    62,    63,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    91,    -1,    93,    94,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        420,   421,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   312,   414,   415,   416,   417,   418,   419,   420,   421, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    58,    59,    60,    61,    62,    63,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,   420, 
        421,   124,   125,   126,    -1,    -1,   330,   331,    93,    94, 
         -1,    91,    37,    38,   312,    -1,   340,    42,    43,    44, 
         45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    60,    61,    62,    63,   124, 
        125,    -1,    -1,    -1,    41,   125,    41,    44,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    58,    59,    58,    59,    -1,    91,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,   331,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    93,   421,    93,   124, 
         -1,   126,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,    -1,    -1,    -1,   125,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,   410,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   420,   421,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
        280,   281,   282,   283,   284,   285,    -1,   287,   331,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,   303,    -1,    93,    94,   312,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   334,    41,   124,   125,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    58,    59,    -1,   125,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   312,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   421,   124, 
        125,    -1,    -1,    -1,    -1,    -1,   331,    93,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,   125, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   421,    93,    94,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,   414,   415,   414, 
        415,    -1,    58,    59,    60,    61,    62,    63,   124,   125, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,    -1, 
         -1,    -1,    37,    38,   312,    -1,    41,    42,    43,    44, 
         45,    -1,    47,   303,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    37, 
         38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,   260,    41,   334,    -1,    44,   312,   124,   125, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    93,    94, 
         58,    59,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   303,    94,    -1,    -1,   124, 
        125,    -1,   400,   401,    -1,    93,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    41,   421,   332,    44,   124,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,   379,    -1,    -1,   125,    -1,    58, 
         59,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    37,    38,    -1, 
         -1,    -1,    42,    43,    93,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,   432,    -1,    59, 
         60,    61,    62,    63,   439,    -1,    -1,    -1,   414,   415, 
         -1,    -1,    -1,    -1,    -1,    -1,   125,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,    -1,   126,   502,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,   510,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   521,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   312,   414,   415, 
        416,   417,   418,   419,   124,   421,   126,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1, 
         -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,   400,   401,   581,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   599,   421,    -1,    -1,    -1,   604, 
         -1,    -1,    -1,    -1,   609,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    37,    38,   414,   415,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,    -1,    -1,    -1,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    94,   312,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,   414,   415,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        124,   421,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,   421,    37,    38,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    37, 
         38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    37,    38,    -1,    94, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    94,    -1,    -1,   124, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    94,    -1,    -1,   124,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,   124,    -1,   126,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    60,    61,    62,    63,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   421,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   124,   421,   126,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1, 
         -1,    -1,    37,    38,   312,    -1,    -1,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    59,    60,    61,    62,    63,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,   124, 
         -1,   126,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,    37,    38,    -1,   312,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,   331,    60,    61,    62,    63,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,   400,   401,    -1,    94,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,   124,    -1, 
        126,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,   124,    -1,   126,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    58, 
         59,    60,    61,    62,    63,    37,    38,    -1,    -1,    -1, 
         42,    43,    -1,    45,    -1,    47,   331,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1, 
         62,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    94,   421,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   126,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    37,    38,    -1, 
         -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    37,    38,   312,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    60,    61,    62, 
         63,    -1,    -1,   312,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    94,    38,    -1,   124,    41,   126,    43,    44,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,   124,    -1,   126,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    93,    94,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   124,   125, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    93,    94,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,    -1,    -1,   124,   125,    -1,    -1,    -1,   411, 
        412,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,   421, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,   331,    47,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    -1,    43,    44,    45,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   124, 
        125,   411,   412,    -1,    -1,   415,   416,   417,   418,   419, 
         -1,   421,    93,    94,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,    -1,    -1,   416,   417,   418,   419,    -1,   421,    38, 
         -1,    -1,    41,   124,   125,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         93,    94,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    58, 
         59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    38, 
         63,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,   404,   405,   406,   407,   408, 
         93,    94,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    38,    -1,    -1, 
         41,   124,   125,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,   125,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         93,    94,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    38,    93,    94,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    41,    -1,    33,    44,    35,    -1,    -1, 
         93,    94,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    93,    94,    -1,    -1, 
         -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    93,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    91,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   404,   405,   406,   407,   408,   124,   125,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33, 
         -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         33,    -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    33, 
         43,    35,    45,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         -1,    45,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    -1,    61,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    91,   286,    -1, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416, 
        417,   418,   419,   126,    -1,   313,    -1,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,    -1,    33,    -1,    35,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    91,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   401,   402,   403,   414,   415,   416,   417, 
        418,   419,   286,    33,    -1,    35,   123,    -1,    -1,   126, 
         40,    -1,    33,    43,    35,    45,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,   313, 
         -1,    61,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    91,   346,   286,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        313,    -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,   313, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   340,   402,   403, 
         -1,    -1,    -1,   346,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,   265,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346, 
        260,   261,   262,   263,   264,   265,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   313,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        340,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', 'T_EXP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 184 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 196 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 196 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 207 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 208 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 212 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 10:  #line 215 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new NativeImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 11:  #line 218 "src/main/jay/grammars/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 12:  #line 221 "src/main/jay/grammars/xp.jay"
    {
    $this->error(E_WARNING, 'Deprecated static import form used', array($yyVals[-3+$yyTop].'::'.$yyVals[-1+$yyTop]));
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 16:  #line 234 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 239 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 240 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 246 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 246 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 255 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 255 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 264 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 264 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 275 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 276 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 280 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 281 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 285 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 286 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 290 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 291 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 295 "src/main/jay/grammars/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 296 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 36:  #line 300 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 301 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 302 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 306 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 307 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 308 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 312 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 313 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 317 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 317 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 320 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 320 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 330 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 337 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 344 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 350 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 351 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 355 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 356 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 360 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 361 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 365 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 366 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 372 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 372 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 383 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 383 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 394 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 394 "src/main/jay/grammars/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 419 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 419 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 432 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 433 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 437 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 438 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 442 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 445 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 449 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 456 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 461 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 466 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 473 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 474 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 478 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 479 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 82:  #line 484 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->parameters= $yyVals[-1+$yyTop];
      $yyVal->body= NULL;
    } break;

    case 83:  #line 493 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 84:  #line 494 "src/main/jay/grammars/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 85:  #line 495 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 86:  #line 499 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 87:  #line 500 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 88:  #line 501 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 89:  #line 505 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 90:  #line 506 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 91:  #line 510 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 92:  #line 511 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 93:  #line 515 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 516 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 95:  #line 517 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 96:  #line 521 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 97:  #line 522 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 98:  #line 526 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 99:  #line 527 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 106:  #line 546 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 108:  #line 551 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 109:  #line 552 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 110:  #line 556 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 111:  #line 556 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 112:  #line 559 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 113:  #line 559 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 114:  #line 564 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 115:  #line 564 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 116:  #line 574 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 117:  #line 574 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 579 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 119:  #line 579 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 120:  #line 583 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 121:  #line 583 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 122:  #line 587 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 123:  #line 587 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 124:  #line 591 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 126:  #line 592 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 128:  #line 593 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 129:  #line 593 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 130:  #line 596 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 131:  #line 596 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 132:  #line 601 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 133:  #line 604 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 135:  #line 611 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 136:  #line 612 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 137:  #line 616 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 138:  #line 619 "src/main/jay/grammars/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 139:  #line 626 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 140:  #line 627 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 141:  #line 631 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 142:  #line 637 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 143:  #line 638 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 144:  #line 642 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 146:  #line 647 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 147:  #line 648 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 148:  #line 652 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 149:  #line 652 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 656 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 151:  #line 656 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 152:  #line 662 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 153:  #line 663 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 154:  #line 667 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 155:  #line 668 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 156:  #line 668 "src/main/jay/grammars/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 157:  #line 673 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 158:  #line 674 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 159:  #line 678 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 160:  #line 679 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 161:  #line 683 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 162:  #line 683 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 163:  #line 697 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 164:  #line 698 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 165:  #line 702 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 167:  #line 707 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 168:  #line 707 "src/main/jay/grammars/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 169:  #line 715 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 171:  #line 720 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 172:  #line 721 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 173:  #line 725 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 175:  #line 730 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 176:  #line 736 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 177:  #line 741 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 178:  #line 749 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 179:  #line 752 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 180:  #line 755 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 181:  #line 758 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 182:  #line 764 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 183:  #line 764 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 184:  #line 770 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 185:  #line 776 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 186:  #line 776 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 187:  #line 785 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 188:  #line 785 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 189:  #line 795 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 190:  #line 795 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 191:  #line 804 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 192:  #line 807 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 193:  #line 810 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 813 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 195:  #line 816 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 196:  #line 819 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 197:  #line 822 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 198:  #line 826 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 199:  #line 832 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 200:  #line 838 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 201:  #line 844 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 202:  #line 849 "src/main/jay/grammars/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 203:  #line 849 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 204:  #line 855 "src/main/jay/grammars/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 205:  #line 866 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 206:  #line 869 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 207:  #line 875 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 209:  #line 880 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 210:  #line 881 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 211:  #line 885 "src/main/jay/grammars/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 212:  #line 886 "src/main/jay/grammars/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 213:  #line 890 "src/main/jay/grammars/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 214:  #line 896 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 215:  #line 896 "src/main/jay/grammars/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 216:  #line 897 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 898 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 899 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 219:  #line 900 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 220:  #line 901 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 221:  #line 905 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 222:  #line 908 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 223:  #line 914 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 225:  #line 919 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 226:  #line 920 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 227:  #line 924 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 229:  #line 929 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 230:  #line 930 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 231:  #line 934 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 935 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 936 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 937 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 938 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 939 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 940 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 941 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 942 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 240:  #line 943 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 241:  #line 944 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 242:  #line 945 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 243:  #line 949 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 950 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 951 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 952 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 953 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 248:  #line 954 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 249:  #line 955 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 250:  #line 956 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 251:  #line 960 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 961 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 962 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 963 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 964 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 965 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 966 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 967 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 259:  #line 968 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 260:  #line 969 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 261:  #line 970 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 262:  #line 971 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 975 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 976 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 977 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 978 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 267:  #line 979 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 268:  #line 980 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 269:  #line 984 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 270:  #line 985 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 271:  #line 990 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 273:  #line 995 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 274:  #line 996 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 275:  #line 1000 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 276:  #line 1000 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 277:  #line 1003 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 278:  #line 1006 "src/main/jay/grammars/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 279:  #line 1006 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 280:  #line 1009 "src/main/jay/grammars/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 281:  #line 1009 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 282:  #line 1015 "src/main/jay/grammars/xp.jay"
    { $yyVal= FALSE; } break;

    case 283:  #line 1016 "src/main/jay/grammars/xp.jay"
    { $yyVal= TRUE; } break;

    case 290:  #line 1034 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 291:  #line 1035 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 292:  #line 1039 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 293:  #line 1043 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 294:  #line 1047 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 295:  #line 1048 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 297:  #line 1053 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 298:  #line 1057 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 299:  #line 1058 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 300:  #line 1064 "src/main/jay/grammars/xp.jay"
    { $yyVal= 0; } break;

    case 301:  #line 1065 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 302:  #line 1069 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 303:  #line 1070 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 304:  #line 1074 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 305:  #line 1075 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 306:  #line 1076 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 307:  #line 1077 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 308:  #line 1078 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 309:  #line 1079 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 310:  #line 1080 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 311:  #line 1081 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2824 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
