<?php
#line 2 "src/main/jay/grammars/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_ARROW= 257;
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_EXP= 421;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     7,     7, 
          7,     7,     9,     9,     8,     8,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    53,    53,    54,    54, 
         52,    52,    52,    52,    42,    42,    42,    39,    39,    39, 
         44,    44,    56,    56,    37,    37,    37,    37,    57,    57, 
         41,    41,    46,    46,    46,    46,    46,    46,    26,    26, 
         58,    58,    61,    59,    62,    59,    65,    59,    66,    59, 
         68,    59,    69,    59,    70,    59,    72,    59,    73,    59, 
         74,    59,    75,    59,    59,    59,    59,    77,    77,    79, 
         79,    78,    78,    80,    67,    67,    71,    71,    81,    81, 
         83,    82,    84,    82,    63,    63,    64,    85,    64,    76, 
         76,    86,    86,    90,    89,    91,    91,    87,    87,    92, 
         88,    55,    55,    93,    93,    60,    60,    94,    94,    94, 
         98,    98,    98,    98,   100,    31,   102,    31,    31,    31, 
         31,   104,    31,   105,    31,   106,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,   112,    31, 
        101,   101,   103,   103,   113,   113,   114,   114,    36,   116, 
         36,    36,    36,    36,    36,    36,   115,   115,    97,    97, 
        117,   117,   119,   119,   118,   118,   107,   107,   107,   107, 
        107,   107,   107,   107,   107,   107,   107,   107,   108,   108, 
        108,   108,   108,   108,   108,   108,   109,   109,   109,   109, 
        109,   109,   109,   109,   109,   109,   109,   109,   110,   110, 
        110,   110,   110,   110,   111,   111,    99,    99,   120,   120, 
        122,   121,   121,   124,   121,   125,   121,   123,   123,    10, 
         10,    10,    32,    32,    32,    12,    12,    95,    96,   126, 
        126,   127,   127,    21,    21,    49,    49,   128,   128,   129, 
        129,   129,   129,   129,   129,   129,   129, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     5,     6, 
          6,     6,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     5,     3,     3,     1,     3,     3,     0,     2,     1, 
          0,     1,     1,     3,     3,     3,     4,     2,     1,     2, 
          0,     2,     1,     1,     1,     1,     1,     1,     0,     1, 
          1,     2,     0,     4,     0,     7,     0,    10,     0,     8, 
          0,     6,     0,     8,     0,     8,     0,     3,     0,     3, 
          0,     4,     0,     6,     7,     7,     2,     1,     3,     1, 
          3,     1,     3,     3,     1,     3,     0,     1,     1,     2, 
          0,     5,     0,     4,     1,     3,     0,     0,     3,     2, 
          1,     1,     2,     0,     9,     1,     3,     0,     1,     0, 
          5,     0,     1,     1,     3,     0,     1,     5,     4,     4, 
          1,     4,     1,     1,     0,     3,     0,     3,     4,     4, 
          2,     0,     4,     0,     5,     0,     6,     2,     3,     1, 
          1,     1,     1,     1,     5,     3,     3,     3,     0,     7, 
          2,     4,     0,     1,     1,     3,     1,     2,     1,     0, 
          4,     1,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     3,     0,     1,     3,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     4,     4,     3,     3, 
          3,     3,     3,     3,     4,     4,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     4,     4,     3,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     1,     2, 
          0,     4,     2,     0,     6,     0,     5,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     4,     3,     4,     1, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,   290,     0,     0,   292,   291,     0,    15,     0,   310, 
        312,   311,   314,   316,   315,   317,   313,     1,     0,    68, 
          0,   308,     8,     0,     0,     4,     0,     0,     0,     0, 
          0,    69,    20,    24,    22,   309,    18,    19,     0,     0, 
          0,    14,     0,     0,     0,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,    13,     0,     0,     9,     0,     0, 
          0,    70,    67,     0,     0,     0,     0,    11,    12,    10, 
         74,    75,   220,     0,     0,   226,   222,   225,   223,   224, 
          0,     0,    81,     0,     0,    77,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    72,     0,    73, 
          0,     0,   293,     0,   294,   295,     0,   300,    27,     0, 
          0,     0,    31,    35,     0,   229,     0,     0,     0,     0, 
          0,     0,   192,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   227,     0,   228,   200,   201,   202,   203,   204, 
          0,     0,   231,     0,     0,    79,    80,    83,    84,     0, 
         78,     0,     0,     0,     0,   297,    29,    35,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   198, 
          0,   196,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   215,     0,   194,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   275,   276,     0,   281,   289, 
        288,   191,   278,     0,     0,     0,   221,     0,     0,   303, 
          0,   298,   301,     0,   305,     0,     0,    25,     0,    34, 
         36,    37,     0,     0,     0,    42,     0,     0,     0,     0, 
          0,     0,     0,     0,   186,     0,   188,     0,   218,     0, 
          0,   217,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   208, 
          0,     0,   199,     0,   280,   286,     0,   175,     0,     0, 
        234,   232,    82,   299,    21,     0,     0,     0,     0,     0, 
          0,     0,    23,     0,    35,     0,   193,     0,     0,     0, 
          0,     0,   189,   190,   216,     0,     0,   184,   181,     0, 
          0,     0,     0,     0,     0,     0,     0,   100,     0,     0, 
        284,   113,     0,   131,   117,   121,   123,   119,   127,   129, 
        115,   125,     0,     0,     0,     0,   111,     0,    63,     0, 
          0,     0,     0,     0,     0,    35,    45,     0,    43,     0, 
          0,     0,     0,     0,     0,   209,     0,   195,     0,   282, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    38,   137,   112,     0,     0, 
         61,    59,   103,   104,   105,   106,   107,   108,     0,     0, 
          0,     0,     0,     0,     0,     0,   179,   180,   197,   212, 
          0,     0,   287,     0,     0,     0,     0,     0,   138,     0, 
          0,     0,     0,   155,     0,     0,   128,   130,     0,     0, 
          0,     0,   142,   219,     0,     0,    93,     0,     0,     0, 
          0,     0,    65,     0,     0,    48,     0,     0,    53,    33, 
          0,   178,   210,   182,   285,   114,     0,     0,     0,     0, 
        132,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    50,     0,    98,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    52,    55,     0,    49,    54,    47, 
          0,     0,   139,     0,     0,     0,   156,     0,     0,     0, 
          0,     0,     0,   143,     0,     0,     0,     0,    94,    96, 
         95,     0,     0,     0,     0,     0,   164,   170,   134,     0, 
        161,   162,     0,     0,   122,     0,   146,     0,     0,     0, 
          0,    97,   102,     0,    85,     0,    64,     0,     0,     0, 
         56,     0,     0,   160,   169,   163,   135,     0,     0,     0, 
        158,   116,   151,   153,     0,     0,   149,   136,     0,     0, 
         62,    60,     0,     0,     0,     0,   124,   120,     0,     0, 
          0,   126,   150,    87,    86,    66,   166,     0,     0,     0, 
        159,     0,     0,     0,     0,   171,   118,     0,   154,   167, 
          0,   152,     0,     0,   165, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    28,   140,     4,     7,     8,    17,    53,    18, 
        249,   113,    61,    99,   121,   170,    63,   254,    62,   101, 
        123,   387,   250,   251,   252,   374,   255,   256,   331,   332, 
        375,   312,   432,   385,   478,   142,   467,   479,   511,   472, 
        538,   567,   471,   468,   420,   429,   514,    41,    30,    42, 
         58,    94,    95,    96,   143,   469,   470,   376,   377,   288, 
        403,   413,   455,   582,   407,   410,   497,   408,   409,   414, 
        585,   411,   412,   406,   446,   549,   448,   462,   449,   463, 
        586,   587,   600,   601,   599,   550,   574,   551,   552,   572, 
        608,   573,   144,   259,   115,   116,   145,   350,   232,   184, 
        267,   185,   191,   179,   274,   263,   146,   147,   148,   149, 
        150,   441,   192,   193,   151,   103,   152,   153,   322,   233, 
        234,   314,   235,   402,   360,   117,   118,    31,    32, 
    );
    protected static $yySindex = array(         -229,
          0,     0,  -172,   173,   175,  1275,  -172,     0,   137,   201, 
        181,     0,  -223,  -223,     0,     0,   205,     0,   280,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   224,     0, 
        304,     0,     0,   173,   173,     0,   -31,   312,    43,  -155, 
        100,     0,     0,     0,     0,     0,     0,     0,    43,    43, 
         43,     0,   332,     0,   426,   362,     0,   423,   280,   304, 
        173,   173,   173,   417,     0,   421,   433,     0,   173,   173, 
         65,     0,     0,   436,   203,   208,   203,     0,     0,     0, 
          0,     0,     0,   173,    75,     0,     0,     0,     0,     0, 
        484,   112,     0,   496,   388,     0,   -45,   173,   236,   173, 
        443,   236,  4652,   516,   538,   538,  -237,     0,   170,     0, 
        249,   517,     0,   492,     0,     0,   187,     0,     0,   173, 
        473,   554,     0,     0,   482,     0,  4988,  4988,  4988,  4988, 
       4988,  4988,     0,  4988,   202,   550,     0,  5028,   489,   206, 
       3427,   -40,     0,   576,     0,     0,     0,     0,     0,     0, 
        535,   590,     0,  4988,   137,     0,     0,     0,     0,   574, 
          0,   173,   -64,   552,   -45,     0,     0,     0,   173,   570, 
        381,   123,   -98,   -98,   -62,   -98,   -98,   -98,   -64,     0, 
       4988,     0,  4988,   -40,   391,   517,     0,   -49,  2478,   -77, 
        611,   612,     0,    46,     0,  4988,  4988,  4988,  4988,  4988, 
       4988,  4988,  4988,  4988,  4988,  4988,  4988,  4988,  4988,  4988, 
       4988,  4740,  4918,  4609,  4988,  4643,  4988,  4988,  4988,  4988, 
       4988,  4988,  4988,   173,  4988,     0,     0,   -64,     0,     0, 
          0,     0,     0,   -40,     2,  4988,     0,    93,   621,     0, 
        294,     0,     0,   744,     0,   541,   405,     0,    49,     0, 
          0,     0,     0,   543,   194,     0,   631,   492,   -40,   549, 
        569,  3427,  4988,  3427,     0,  4933,     0,   -40,     0,   391, 
         46,     0,   391,   122,  3463,  3588,  3588,  3588,  3588,  3588, 
       3588,  3588,  3588,  3588,  3588,  3588,  3427,   615,   129,   355, 
        732,  4988,   192,  4988,   192,  4988,  4988,     7,     7,  4988, 
       4988,     7,     7,    36,    36,   -87,   -87,   -87,   -62,     0, 
        -98,    21,     0,  4988,     0,     0,   635,     0,   636,   550, 
          0,     0,     0,     0,     0,   520,   438,   271,   439,   -74, 
        582,   653,     0,   381,     0,  4988,     0,  4988,    53,   665, 
        520,  3427,     0,     0,     0,   583,   669,     0,     0,   -40, 
       4988,  3588,  3588,     7,     7,     7,     7,     0,   620,  4988, 
          0,     0,    -5,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   674,   600,  2610,   520,     0,   667,     0,   689, 
        690,   501,   641,   682,   622,     0,     0,  4988,     0,  1049, 
        703,   623,   626,   -40,   627,     0,  4988,     0,    44,     0, 
        705,  4988,  4988,     0,   413,  4988,   714,   719,   476,   720, 
        702,   706,   728,   730,   431,     0,     0,     0,   308,   209, 
          0,     0,     0,     0,     0,     0,     0,     0,   733,   209, 
       4988,   713,   518,  1059,  2707,   582,     0,     0,     0,     0, 
        -40,   745,     0,   747,   731,   520,   734,   430,     0,  2734, 
       4988,  4988,   520,     0,   446,   457,     0,     0,  4988,  4988, 
        748,   444,     0,     0,   749,   261,     0,   771,   770,  -180, 
        180,   180,     0,   722,  3427,     0,    71,  -103,     0,     0, 
        582,     0,     0,     0,     0,     0,   695,  4988,   413,   698, 
          0,   764,  2774,   700,   786,   787,   466,  2871,  2906,  4988, 
        431,   709,     0,   580,     0,   513,   209,   503,   682,   209, 
        803,   770,   806,   209,     0,     0,   520,     0,     0,     0, 
        109,  3427,     0,   520,  4988,   476,     0,  4988,   509,  4988, 
        476,   741,  3427,     0,   520,   682,   173,    88,     0,     0, 
          0,   770,   513,   513,   815,   740,     0,     0,     0,   109, 
          0,     0,   742,   809,     0,  3007,     0,  3035,   499,   178, 
        746,     0,     0,  4988,     0,   520,     0,    88,    88,   513, 
          0,   832,   751,     0,     0,     0,     0,  4988,   816,   476, 
          0,     0,     0,     0,   762,   178,     0,     0,  3167,   763, 
          0,     0,    88,   173,   520,   835,     0,     0,   476,  4988, 
        831,     0,     0,     0,     0,     0,     0,  -114,   766,   476, 
          0,  3202,   520,   173,   852,     0,     0,   520,     0,     0, 
        785,     0,   520,   784,     0, 
    );
    protected static $yyRindex= array(         1477,
          0,     0,  1841,     0,     0,   337,  2249,     0,   858,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        410,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -39,    95,     0,     0,   172,     0,   527, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   895,   -94,   790,   -94,     0,     0,     0, 
          0,     0,     0,     0,   -32,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   791,     0, 
          0,   791,   822,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   287,     0,     0,     0,     0,     0,     0, 
          0,    89,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  1978,  2014,   996,   885,     0,     0, 
        449,  1574,     0,    20,     0,     0,     0,     0,     0,     0, 
          0,   -17,     0,   886,   -36,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -105, 
        804,  1023,  2054,  2092,  3292,  2162,  2206,  2276,     0,     0, 
          0,     0,     0,  1574,     0,  4973,  1756,   -16,     0,     0, 
          0,   -29,     0,   671,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   872,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  1877,     0,   625,     0,    -1,     0,     0, 
          0,     0,     0,  -105,     0,  1489,     0,     0,     0,     0, 
          0,     0,    55,     0,   818,     0,   840,     0,  1574,   843, 
        850,    27,   886,   107,     0,     0,     0,  1574,     0,     0, 
          0,     0,     0,     0,   -25,     4,    84,   143,   390,   752, 
        866,  1033,  1066,  1087,  1158,  1495,   853,     0,   592,  4526, 
       4408,     0,  4432,     0,  4483,     0,     0,  1116,  3970,     0, 
          0,  3994,  4010,  3877,  3919,  3725,  3762,  3851,  3336,     0, 
       2314,  1548,     0,   851,     0,     0,  1327,     0,     0,     0, 
          0,     0,     0,     0,     0,   820,     0,    63,     0,     0, 
        -18,     0,     0,     0,     0,   886,     0,   823,     0,     0, 
        820,  1198,     0,     0,     0,     0,  1424,     0,     0,  1574, 
          0,  1585,  1612,  4147,  4186,  4310,  4392,     0,     0,   886, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   -53,     0,     0,     0,     0, 
        824,     0,     0,   896,     0,     0,     0,     0,     0,    73, 
          0,     0,     0,  1574,     0,     0,   886,     0,   556,     0, 
          0,   886,   906,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   925, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -105,     0,  1451,     0,     0,     0,     0, 
       1574,     0,     0,     0,     0,   820,   450,     0,     0,     0, 
        908,     0,   820,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   177,     0,     0,   927,     0, 
        928,   928,     0,     0,   656,     0,     0,     0,     0,     0, 
        -18,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   613,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    90,     0,     0,   177,     0, 
          0,   935,     0,   925,     0,     0,   820,     0,     0,     0, 
          0,   456,     0,   820,   908,     0,     0,     0,     0,     0, 
          0,     0,   461,     0,   820,   177,     0,     0,     0,     0, 
          0,   938,    90,    90,     0,     0,     0,     0,     0,   317, 
          0,     0,     0,     0,     0,     0,     0,     0,   361,   855, 
          0,     0,     0,     0,     0,   820,     0,     0,     0,    90, 
          0,     0,     0,     0,     0,     0,     0,   886,     0,     0, 
          0,     0,     0,     0,     0,   860,     0,     0,     0,     0, 
          0,     0,     0,     0,   820,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   -37,     0,     0,     0,     0,   -37,     0,     0, 
          0,     0,   820,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   980,   548,   593,   374, 
        984,   -60,     0,   915,   891,  -143,     0,     0,     0,     0, 
       -116,  -366,     0,     0,     0,  1470,     0,   660,     0,     0, 
         76,  1312,  -419,     0,     0,   -50,  -361,   523,   530,     0, 
       -417,  -205,     0,   481,     0,     0,     0,     0,   943,   945, 
          0,   526,     0,   903,  -141,   -21,   777,     0,   795,  -204, 
          0,     0,   562,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   524,   514, 
          0,   428,     0,     0,     0,     0,     0,   467,   472,     0, 
          0,     0,     0,     0,   837,   844,   691,     0,   -86,     0, 
        244,     0,   838,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   765,     0,     0,     0,   797,     0,   811, 
          0,     0,     0,     0,     0,     0,   881,     0,  1017, 
    );
    protected static $yyTable = array(11,
         75,    76,    77,   167,   219,   231,    16,   219,   219,   614, 
         97,   214,   239,   164,    50,   206,   164,   111,   206,    13, 
         93,   518,   158,   104,   244,    32,   112,   225,    26,    47, 
         48,   318,   206,   206,   405,    57,    12,   119,   225,   122, 
         32,   316,   233,   222,   207,   112,   505,   207,   220,   218, 
        229,   219,   245,   221,    93,    93,    74,    74,    74,   122, 
        173,   207,   207,   225,    81,    82,    92,   206,   474,   482, 
        235,   110,   222,     1,   296,   230,    15,   220,   173,    74, 
        222,   211,   221,   358,    52,   220,   218,   109,   219,   541, 
        221,   233,    74,    74,    46,    74,   207,   265,    44,   206, 
         92,    92,   159,   214,    55,   216,    32,   230,   122,   359, 
        126,   164,   173,    44,   520,    74,   562,   404,   257,   235, 
         34,   340,    17,   233,   237,   568,   569,   237,   207,   516, 
         10,     5,   225,   188,    17,   105,   112,   210,    17,   112, 
         16,   237,   237,    59,   173,   539,   565,   304,   101,   508, 
        236,   235,   593,    17,   306,    83,   477,   240,    74,   509, 
         74,   225,   182,   310,    74,   222,   211,   209,    34,   225, 
        220,   218,   337,   219,    74,   221,   237,    44,   141,    44, 
        306,   343,    34,   238,    56,   381,   238,    17,   214,    74, 
        216,   390,    60,   517,   391,     9,   392,    39,   445,   236, 
        238,   238,   173,   174,   175,   176,   177,   178,   237,   180, 
        566,   304,   101,   189,     9,    71,    26,    57,   401,    74, 
         57,    10,   210,    74,   224,   615,   306,   214,   222,   141, 
        165,   236,   228,   220,   218,   238,   219,   334,   221,    36, 
         10,   182,   434,   228,    74,   382,    35,    34,   166,   224, 
         39,   214,   335,   216,   225,   442,   262,   383,   264,   181, 
        444,    12,   269,   398,    71,   384,    74,   238,   228,    57, 
        112,   275,   276,   277,   278,   279,   280,   281,   282,   283, 
        284,   285,   286,   287,   289,   290,   291,   293,   295,   298, 
        299,   302,   303,   304,   305,   306,   307,   308,   309,   112, 
        311,    15,    12,   226,   227,     9,   504,   439,   328,   492, 
        379,   287,   319,   320,   226,   227,    34,   225,   224,   110, 
        110,   431,    17,   296,    85,    86,    87,    88,    89,    90, 
        302,    10,   306,   223,    10,   109,   109,   228,   141,   226, 
        227,   342,    15,    40,   564,   304,   101,   224,   302,   168, 
         10,   168,   319,   320,   483,   224,   168,    51,   306,   168, 
        195,   168,   591,   592,    91,    16,   228,   352,   465,   353, 
         16,   354,   355,    17,   228,   356,   357,    17,    49,   230, 
        329,   347,    17,   554,   164,   272,   324,   606,   206,   287, 
         68,   222,   211,   157,    17,   157,   220,   218,    83,   219, 
        157,   221,    17,   157,   306,   157,    16,   168,   226,   227, 
         84,   141,    54,   141,   214,    74,   216,   207,   207,    70, 
        563,   348,    65,    54,    54,    74,   399,   223,   110,   160, 
        239,   109,     9,   239,    12,   141,   596,   226,   227,     9, 
        224,   168,   168,   217,   215,   226,   227,   239,   239,   512, 
        512,   157,   547,   548,   212,   213,   223,    13,    10,   228, 
         14,   349,    71,   435,   223,    10,    74,    74,     9,    91, 
        490,    34,   141,   489,    15,    78,   122,   141,   287,    79, 
        225,   450,   239,    69,   502,   157,   157,   501,   542,   174, 
        140,    80,   174,   140,    10,    97,   141,   237,   237,   141, 
        307,   144,    74,   224,   144,    74,   475,   174,   129,    74, 
        139,   510,    98,   344,   239,   138,   346,   100,   127,   466, 
        128,   107,   228,    43,    44,    45,   141,   493,   217,   215, 
        226,   227,    74,   607,   498,   499,   108,   427,    16,   212, 
        213,   174,   425,   423,   106,   424,   120,   426,   466,   223, 
        583,   584,   129,   620,   139,   154,   238,   238,   162,   138, 
         37,    38,   127,   522,   128,   124,    83,   464,    86,    87, 
         88,    89,    90,   174,   163,   533,   168,   168,   168,   168, 
        168,   168,   164,    20,    21,    22,    23,    24,    25,    74, 
         26,   217,   215,   226,   227,   168,   205,   169,   453,   205, 
        141,   130,   168,   556,   171,   558,    27,   183,   317,    74, 
         83,   194,   223,   205,   205,   195,   205,   306,   205,   236, 
        157,   157,   157,   157,   157,   157,   428,   237,    83,   168, 
        156,   157,   263,   238,   105,   263,   306,   306,   306,   589, 
        253,    64,    66,    67,   242,   130,   157,   266,   205,   263, 
        263,   270,   263,   141,   263,   271,   168,   168,   168,   168, 
         19,   323,   168,   326,   327,   176,   224,   333,   176,   307, 
        336,   338,   351,   157,   361,   612,   168,   168,   168,   168, 
        205,   168,   168,   176,   263,   228,   168,   168,   168,   168, 
        168,   339,   388,   181,   248,   307,    58,   378,   380,    58, 
        157,   157,   157,   157,   386,   394,   157,   396,   397,   307, 
        307,   307,   400,   415,    58,   263,   263,   176,   168,   168, 
        157,   157,   157,   157,   416,   157,   157,   419,   421,   422, 
        157,   430,   157,   157,   157,   172,    86,    87,    88,    89, 
         90,   307,   431,   436,   433,   443,   168,   437,    58,   176, 
        438,   440,   447,   451,   217,   215,   226,   227,   452,   456, 
        457,    10,   157,   157,   458,   212,   213,   459,   222,   460, 
        461,   476,   473,   220,   218,   223,   219,   477,   221,   172, 
         86,    87,    88,    89,    90,   484,   306,   485,   134,   486, 
        157,   214,   240,   216,   488,   240,   496,   155,    86,    87, 
         88,    89,    90,   239,   239,    10,   495,   503,   500,   240, 
        240,   506,   306,   507,   515,   137,   362,   363,   364,   521, 
        524,   133,   525,    10,   527,   528,   306,   306,   306,   530, 
        529,   535,   134,   537,    19,   365,   366,   367,   368,   536, 
        369,   370,   540,   543,   240,   371,   544,   372,   557,    20, 
         21,    22,   246,    24,    25,   570,    26,   225,   306,   137, 
        362,   363,   364,   560,   571,   133,   577,   578,   325,   581, 
        588,   594,    27,   595,   597,   610,   240,   131,   132,   365, 
        366,   367,   368,    84,   369,   370,   602,   605,   613,   371, 
        616,   372,   621,   177,    17,    17,   177,    17,    17,    17, 
         17,    17,    17,   247,    17,   373,   241,   623,   625,   241, 
        177,   177,    30,    28,   172,    17,    17,    17,    17,    17, 
         17,   131,   132,   241,   241,   213,   172,   213,    41,   176, 
        293,   296,   296,   294,   296,   296,   296,   296,   296,   296, 
        295,   296,    40,   176,   109,   177,    51,   172,    17,   373, 
         17,    17,   296,   296,    57,   296,   296,   296,   241,   205, 
        205,   205,   205,   205,   176,    91,   172,    92,    88,   205, 
        205,   205,   205,   205,   205,    90,   145,   177,    89,   147, 
         17,    17,    17,    17,   148,   296,    33,   296,   296,    29, 
        241,   102,   125,   389,   545,   263,   263,   263,   263,   263, 
        519,   513,    73,    72,   313,   263,   263,   263,   263,   263, 
        263,   161,   523,   603,   534,   260,   575,   296,   296,   296, 
        296,   576,   261,    20,    21,    22,   246,    24,    25,   393, 
         26,   273,   185,   185,   321,   345,   185,   185,   185,   185, 
        185,   185,   185,   224,   315,   243,    27,    46,     0,     0, 
          0,     0,     0,   185,   185,   185,   185,   185,   185,   219, 
        219,     0,   228,   219,   219,   219,   219,   219,     0,   219, 
          0,     0,     0,   243,     0,     0,   243,   247,     0,     0, 
        219,   219,    17,   219,   219,   219,   185,   555,   185,   185, 
        243,   243,   559,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   242,     0,     0,   242, 
          0,     0,     0,    17,    17,   219,   219,    17,     0,   185, 
        185,   185,     0,   242,   242,   243,     0,   244,     0,     0, 
        244,   217,   215,   226,   227,     0,     0,     0,     0,    19, 
          0,   598,   212,   213,   244,   244,   219,   219,   219,    19, 
          0,   296,   223,   249,   296,     0,   249,   243,   242,   249, 
        611,     0,     0,     0,     0,   240,   240,    17,    17,    17, 
        418,   617,     0,   249,   249,     0,   249,    17,   249,   244, 
          0,     0,     0,   480,     0,     0,     0,    17,    17,    17, 
        242,     0,     0,     0,     0,     0,     0,    17,   245,     0, 
          0,   245,     0,   454,   296,   296,   296,     0,   249,   249, 
          0,   244,     0,     0,   296,   245,   245,     0,     0,     0, 
          0,     0,     0,     0,   296,   296,   296,     0,     0,     0, 
          0,     0,     0,     0,   296,     0,     0,     0,   211,   249, 
        249,   211,     0,     0,     0,     0,     0,     0,     0,     0, 
        245,     0,   187,     0,     0,   211,   211,    17,    17,    17, 
         17,    17,    17,    17,    17,    17,     0,    17,    17,    17, 
          0,    17,    17,    17,    17,    17,    17,     0,    17,   241, 
        241,     0,   245,     0,     0,     0,     0,     0,     0,     0, 
        211,     0,     0,     0,   296,   296,   296,   296,   296,   296, 
        296,   296,   296,     0,     0,   296,   296,   185,   296,   296, 
        296,   296,   296,   296,     0,   296,     0,     0,     0,     0, 
        454,     0,   211,     0,     0,   454,   185,     0,    20,    21, 
         22,   246,    24,    25,   219,    26,     0,     0,    20,    21, 
         22,   246,    24,    25,     0,    26,     0,     0,     0,     0, 
          0,    27,     0,   219,     0,     0,     0,     0,     0,     0, 
          0,    27,    17,   283,   283,    19,     0,   283,   283,   283, 
        283,   283,   283,   283,   454,     0,     0,     0,     0,     0, 
          0,     0,   247,     0,   283,   283,   283,   283,   283,   283, 
          0,     0,   247,   454,     0,   185,   185,   185,   185,   185, 
        185,   185,   185,   185,   454,     0,   185,   185,   114,   185, 
        185,   185,   185,   185,   185,   185,   185,   283,     0,   283, 
        283,     0,   219,   219,   219,   219,   219,   219,   219,   219, 
        219,     0,    17,   219,   219,     0,   219,   219,   219,   219, 
        219,   219,   219,   219,     0,     0,   243,   243,     0,   190, 
        283,   283,   283,     0,     0,     0,     0,     0,     0,     0, 
        183,   183,     0,     0,   183,   183,   183,   183,   183,   183, 
        183,     0,     0,     0,   241,     0,   114,     0,     0,   242, 
        242,   183,   183,   183,   183,   183,   183,    32,    32,     0, 
        258,    32,    32,    32,    32,    32,    32,    32,     0,     0, 
        244,   244,     0,     0,     0,   190,     0,     0,    32,    32, 
         32,    32,    32,    32,   183,     0,   183,   183,     0,   249, 
        249,   249,   249,   249,     0,     0,   249,   249,     0,   249, 
        249,   249,   249,   249,   249,   246,     0,     0,   246,     0, 
          0,    32,     0,    32,    32,     0,     0,   183,   183,   183, 
          0,     0,   246,   246,    20,    21,    22,    23,    24,    25, 
        330,    26,     0,     0,     0,     0,     0,     2,     0,     0, 
          0,   245,   245,     0,    32,    32,    32,    27,     0,   314, 
          0,     0,   190,     0,    99,    99,     0,   246,    99,    99, 
         99,    99,    99,     0,    99,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    99,    99,    99,    99,    99, 
        277,   277,     0,     0,   277,   277,   277,   277,   277,   246, 
        277,     0,     0,     0,     0,   255,     0,     0,   255,     0, 
          0,   277,   277,   277,   277,   277,   277,     0,   283,     0, 
         99,    99,   255,   255,     0,     0,     0,     0,     0,     0, 
          0,     0,   256,     0,     0,   256,     0,   283,     0,     0, 
          0,     0,     0,     0,     0,     0,   277,   277,     0,   256, 
        256,    99,    99,    99,     0,     0,     0,   255,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   277,   277,   277, 
          0,     0,     0,     0,   256,     0,     0,     0,     0,   255, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   283,   283,   283,   283, 
        283,   283,   283,   283,   283,   183,   256,   283,   283,     0, 
        283,   283,   283,   283,   283,   283,   283,   283,   314,     0, 
          0,     0,     0,     0,   183,     0,     2,     2,     2,     2, 
          2,     2,    32,     2,     0,     0,     0,     0,   314,   314, 
        314,   314,   314,   314,   314,   314,     2,     2,     2,     0, 
          2,    32,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   314,   185,   185,     0,     0,   185,   185,   185,   217, 
        185,   185,   185,     0,     0,     0,     0,     0,     0,     0, 
        395,     0,     0,     0,     0,   185,   185,   185,   185,     0, 
        314,     0,     0,   183,   183,   183,   183,   183,   183,   183, 
        183,   183,     0,     0,   183,   183,     0,   183,   183,   183, 
        183,   183,   183,   183,   183,     0,   185,     0,     0,   185, 
         32,    32,    32,    32,    32,    32,    32,    32,    32,    99, 
          0,    32,    32,     0,    32,    32,    32,    32,    32,    32, 
         32,    32,     0,     0,     0,     0,     0,    99,    99,   185, 
          0,   185,     0,     0,     0,   277,     0,    99,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   277,     0,     0,     0,   246,   246, 
          0,     0,     0,   279,   279,   487,     0,   279,   279,   279, 
        279,   279,   494,   279,     0,     0,     0,     0,     0,     0, 
          0,     5,     0,     0,   279,   279,   279,   279,   279,   279, 
          0,     0,     0,     0,     0,     0,     0,    99,    99,    99, 
         99,    99,    99,    99,    99,    99,     0,     0,    99,    99, 
          0,    99,    99,    99,    99,    99,    99,     0,    99,   279, 
        279,     0,     0,   277,   277,   277,   277,   277,   277,   277, 
        277,   277,     0,     0,   277,   277,   546,   277,   277,   277, 
        277,   277,   277,   553,   277,     0,     0,     0,   255,   255, 
        279,   279,   279,     0,   561,     0,     0,     0,     0,     0, 
          0,     0,   187,     0,   219,   219,     0,     0,     0,   219, 
        219,   219,   219,     0,   219,   256,   256,     0,     0,     0, 
          0,     0,     0,     0,     0,   590,     0,   219,   219,   219, 
        219,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        226,   226,     0,     0,     0,   226,   226,   226,   226,   226, 
        226,     0,     0,     0,   609,     0,     0,   185,   219,     0, 
        219,   219,     0,   226,   226,   226,   226,     0,     0,     0, 
          0,     0,   619,     0,     0,     0,   185,   622,     0,     0, 
        271,   271,   624,     0,   271,   271,   271,   271,   271,     0, 
        271,   219,     0,   219,   226,     0,   226,   226,     0,     0, 
          0,   271,   271,   271,   271,   271,   271,     0,     0,     0, 
          5,     5,     5,     5,     5,     5,     0,     5,   272,   272, 
          0,     0,   272,   272,   272,   272,   272,   226,   272,   226, 
          5,     5,     5,     5,     0,     0,   271,   271,     0,   272, 
        272,   272,   272,   272,   272,   185,   185,   185,   185,   185, 
        185,   185,   185,   185,     0,     0,   185,   185,     0,   185, 
        185,   185,   185,   185,   185,   185,   185,   271,   271,     0, 
          0,     0,     0,     0,   272,   272,     0,     0,   279,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   270,   270, 
          0,     0,   270,   270,   270,   270,   270,   279,   270,     0, 
          0,     0,     0,     0,     0,   272,   272,     0,     0,   270, 
        270,   270,   270,   270,   270,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   273,   273,     0,     0,   273,   273,   273,   273, 
        273,     0,   273,     0,   270,   270,     0,     0,     0,     0, 
          0,     0,     0,   273,   273,   273,   273,   273,   273,     0, 
          0,     0,     0,     0,     0,     0,   279,   279,   279,   279, 
        279,   279,   279,   279,   279,   270,   270,   279,   279,   219, 
        279,   279,   279,   279,   279,   279,     0,   279,   273,   273, 
          0,     0,     0,     0,     0,     0,     0,     0,   219,     0, 
          0,     0,   274,   274,     0,     0,   274,   274,   274,   274, 
        274,     0,   274,     0,     0,   226,     0,     0,     0,   273, 
        273,     0,     0,   274,   274,   274,   274,   274,   274,     6, 
          0,     0,     0,     0,   226,     0,     0,     0,     0,     0, 
        262,   262,     0,     0,   262,   262,   262,   262,   262,     0, 
        262,     0,     0,     0,     0,   271,     0,     0,   274,   274, 
          0,   262,   262,   262,   262,   262,   262,   219,   219,   219, 
        219,   219,   219,   219,   219,   219,     0,    17,   219,   219, 
          0,   219,   219,   219,   219,   219,   219,   219,   219,   274, 
        274,     0,     0,   272,     0,     0,   262,   262,     0,     0, 
          0,     0,     0,   226,   226,   226,   226,   226,   226,   226, 
        226,   226,     0,     0,   226,   226,     0,   226,   226,   226, 
        226,   226,   226,   226,   226,     0,     0,   262,   262,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   271,   271,     0,     0,   271,   271,   271, 
        271,   271,     0,     0,   271,   271,     0,   271,   271,   271, 
        271,   271,   271,   270,   271,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   272,   272,     0,     0,   272,   272,   272,   272,   272, 
          0,     0,   272,   272,     0,   272,   272,   272,   272,   272, 
        272,     0,   272,     0,   222,   211,     0,   273,   268,   220, 
        218,     0,   219,     0,   221,     0,     0,     0,     6,     6, 
          6,     6,     6,     6,     0,     6,     0,   214,   198,   216, 
        208,     0,     0,     0,     0,     0,     0,     0,     6,     6, 
          6,     6,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   270,   270,     0,     0,   270,   270,   270,   270,   270, 
          0,   210,   270,   270,     0,   270,   270,   270,   270,   270, 
        270,     0,   270,     0,     0,     0,     0,   274,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   209,     0,   225,     0,   273,   273,     0,     0,   273, 
        273,   273,   273,   273,     0,     0,   273,   273,     0,   273, 
        273,   273,   273,   273,   273,   262,   273,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   222,   211,     0,     0, 
          0,   220,   218,     0,   219,     0,   221,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   417,   214, 
        198,   216,   208,     0,     0,   274,   274,     0,     0,   274, 
        274,   274,   274,   274,     0,     0,   274,   274,     0,   274, 
        274,   274,   274,   274,   274,     0,   274,     0,     0,     0, 
          0,     0,     0,   210,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   262,   262,     0,     0,   262,   262,   262, 
        262,   262,     0,     0,   262,   262,     0,   262,   262,   262, 
        262,   262,   262,   209,   262,   225,     0,     0,     0,     0, 
          0,     0,     0,   222,   211,     0,     0,   481,   220,   218, 
          0,   219,     0,   221,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   214,   198,   216,   208, 
        222,   211,     0,     0,     0,   220,   218,     0,   219,     0, 
        221,     0,     0,     0,     0,     0,     0,     0,     0,   224, 
          0,     0,   491,   214,   198,   216,   208,     0,     0,     0, 
        210,     0,     0,     0,     0,     0,     0,     0,   228,     0, 
        222,   211,     0,     0,   526,   220,   218,     0,   219,     0, 
        221,     0,     0,     0,     0,     0,     0,   210,     0,     0, 
        209,     0,   225,   214,   198,   216,   208,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   209,     0,   225, 
          0,     0,     0,     0,     0,     0,     0,   210,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   217,   215,   226, 
        227,   199,   200,   201,   202,   204,     0,     0,   212,   213, 
          0,   196,   197,   203,   206,   205,   207,   209,   223,   225, 
          0,     0,     0,     0,     0,     0,     0,   222,   211,     0, 
          0,   531,   220,   218,     0,   219,     0,   221,     0,     0, 
          0,   224,     0,     0,     0,     0,     0,     0,     0,     0, 
        214,   198,   216,   208,     0,     0,     0,     0,     0,     0, 
        228,     0,   222,   211,     0,     0,   532,   220,   218,     0, 
        219,     0,   221,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   210,   214,   198,   216,   208,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   209,     0,   225,     0,     0,   210, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   217, 
        215,   226,   227,   199,   200,   201,   202,   204,   224,     0, 
        212,   213,     0,   196,   197,   203,   206,   205,   207,   209, 
        223,   225,     0,     0,     0,     0,     0,   228,     0,     0, 
          0,     0,     0,   222,   211,   224,     0,   579,   220,   218, 
          0,   219,     0,   221,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   228,     0,   214,   198,   216,   208, 
          0,   222,   211,     0,     0,   580,   220,   218,     0,   219, 
          0,   221,     0,     0,     0,   224,     0,     0,     0,     0, 
          0,     0,     0,     0,   214,   198,   216,   208,     0,     0, 
        210,     0,     0,     0,   228,     0,   217,   215,   226,   227, 
        199,   200,   201,   202,   204,     0,     0,   212,   213,     0, 
        196,   197,   203,   206,   205,   207,     0,   223,   210,     0, 
        209,     0,   225,   217,   215,   226,   227,   199,   200,   201, 
        202,   204,     0,     0,   212,   213,     0,   196,   197,   203, 
        206,   205,   207,     0,   223,     0,     0,     0,   209,     0, 
        225,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   217,   215,   226,   227,   199,   200,   201, 
        202,   204,   224,     0,   212,   213,     0,   196,   197,   203, 
        206,   205,   207,     0,   223,     0,     0,     0,     0,     0, 
          0,   228,     0,   222,   211,     0,     0,     0,   220,   218, 
          0,   219,     0,   221,     0,     0,     0,   224,     0,     0, 
          0,     0,     0,     0,     0,   604,   214,   198,   216,   208, 
          0,     0,     0,     0,     0,     0,   228,     0,   222,   211, 
          0,     0,     0,   220,   218,     0,   219,     0,   221,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   618, 
        210,   214,   198,   216,   208,     0,     0,     0,     0,     0, 
        217,   215,   226,   227,   199,   200,   201,   202,   204,     0, 
          0,   212,   213,     0,   196,   197,   203,   206,   205,   207, 
        209,   223,   225,     0,     0,   210,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   217,   215,   226,   227,   199, 
        200,   201,   202,   204,     0,     0,   212,   213,   224,   196, 
        197,   203,   206,   205,   207,   209,   223,   225,   269,   269, 
          0,     0,   269,   269,   269,   269,   269,   228,   269,     0, 
          0,     0,     0,     0,     0,     0,   224,     0,     0,   269, 
        269,   269,   269,   269,   269,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   228,     0,     0,     0,     0, 
          0,     0,   268,   268,     0,     0,   268,   268,   268,   268, 
        268,     0,   268,     0,   269,   269,     0,     0,     0,     0, 
          0,     0,     0,   268,   268,   268,   268,   268,   268,     0, 
          0,     0,     0,     0,     0,     0,   217,   215,   226,   227, 
        199,   200,   201,   202,   204,   269,   269,   212,   213,     0, 
        196,   197,   203,   206,   205,   207,     0,   223,   268,   268, 
          0,     0,     0,     0,   217,   215,   226,   227,   199,   200, 
        201,   202,   204,     0,     0,   212,   213,     0,   196,   197, 
        203,   206,   205,   207,     0,   223,     0,     0,     0,   268, 
        268,     0,     0,   222,   211,     0,     0,     0,   220,   218, 
          0,   219,     0,   221,     0,     0,     0,     0,   224,     0, 
          0,     0,     0,     0,     0,     0,   214,   198,   216,   208, 
          0,     0,     0,     0,     0,     0,     0,   228,     0,   222, 
        211,     0,     0,     0,   220,   218,     0,   219,     0,   221, 
          0,     0,     0,   224,     0,     0,     0,     0,     0,     0, 
        210,     0,   214,   198,   216,   208,     0,     0,     0,     0, 
          0,     0,   228,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        209,     0,   225,     0,     0,     0,   210,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   217,   215,   226,   227, 
        199,   200,   201,   202,   204,     0,     0,   212,   213,     0, 
        196,   197,   203,   206,   205,   207,   209,   223,   225,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   217,   215,   226,   227,   199,   200,   201,   202,   204, 
          0,     0,   212,   213,     0,   196,   197,   203,   206,   205, 
        207,     0,   223,     0,   222,   211,     0,     0,     0,   220, 
        218,     0,   219,     0,   221,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   214,   198,   216, 
        208,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   210,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   269,   269,     0,     0,   269,   269,   269,   269,   269, 
          0,     0,   269,   269,     0,   269,   269,   269,   269,   269, 
        269,   209,   269,   225,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   268,   268,     0,   224,   268, 
        268,   268,   268,   268,     0,     0,   268,   268,     0,   268, 
        268,   268,   268,   268,   268,     0,   268,   228,     0,     0, 
          0,   259,   259,     0,     0,   259,   259,   259,   259,   259, 
          0,   259,     0,     0,   224,     0,     0,     0,     0,     0, 
          0,     0,   259,   259,   259,   259,   259,   259,     0,     0, 
          0,     0,     0,   228,     0,     0,     0,     0,   260,   260, 
          0,     0,   260,   260,   260,   260,   260,     0,   260,     0, 
          0,     0,     0,     0,     0,     0,     0,   259,   259,   260, 
        260,   260,   260,   260,   260,     0,   217,   215,   226,   227, 
        199,   200,   201,   202,   204,     0,     0,   212,   213,     0, 
        196,   197,   203,   206,   205,   207,     0,   223,   259,   259, 
          0,     0,     0,     0,   260,   260,     0,     0,     0,     0, 
          0,     0,   217,   215,   226,   227,   199,   200,   201,   202, 
        204,     0,     0,   212,   213,     0,     0,   197,   203,   206, 
        205,   207,     0,   223,     0,   260,   260,   261,   261,     0, 
          0,   261,   261,   261,   261,   261,     0,   261,     0,   224, 
          0,     0,     0,     0,     0,     0,     0,     0,   261,   261, 
        261,   261,   261,   261,   257,     0,     0,   257,   228,   257, 
        257,   257,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   257,   257,   257,   257,   257,   257, 
          0,     0,     0,   261,   261,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   258,     0,     0,   258, 
          0,   258,   258,   258,     0,     0,     0,     0,     0,   257, 
        257,     0,     0,     0,   261,   261,   258,   258,   258,   258, 
        258,   258,     0,     0,     0,     0,     0,   217,   215,   226, 
        227,   199,   200,   201,   202,   204,     0,     0,   212,   213, 
        257,   257,     0,   203,   206,   205,   207,   251,   223,     0, 
        251,   258,   258,   251,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   251,   251,     0, 
        251,   250,   251,     0,   250,     0,     0,   250,     0,     0, 
          0,     0,   258,   258,     0,     0,     0,   252,     0,     0, 
        252,   250,   250,   252,   250,     0,   250,     0,     0,     0, 
          0,     0,   251,   251,     0,     0,     0,   252,   252,     0, 
        252,     0,   252,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   250,   250,     0,     0, 
          0,     0,     0,   251,   251,     0,     0,     0,     0,     0, 
          0,     0,   252,   252,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   250,   250,     0, 
          0,     0,     0,     0,   259,   259,     0,     0,   259,   259, 
        259,   259,   259,   252,   252,   259,   259,     0,   259,   259, 
        259,   259,   259,   259,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   260,   260,     0,     0,   260,   260,   260,   260,   260, 
          0,     0,   260,   260,     0,   260,   260,   260,   260,   260, 
        260,     0,     0,     0,   267,     0,     0,   267,     0,     0, 
        267,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   267,   267,     0,   267,     0,   267, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   248,     0,     0,   248,     0,     0,   248, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   267, 
        267,     0,     0,   248,   248,     0,   248,     0,   248,     0, 
        261,   261,     0,     0,   261,   261,   261,   261,   261,     0, 
          0,   261,   261,     0,   261,   261,   261,   261,   261,   261, 
        267,   267,     0,     0,     0,     0,   257,   257,   248,   248, 
        257,   257,   257,   257,   257,     0,     0,   257,   257,     0, 
        257,   257,   257,   257,   257,   257,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   248, 
        248,     0,     0,     0,     0,     0,     0,     0,   258,   258, 
          0,     0,   258,   258,   258,   258,   258,     0,     0,   258, 
        258,     0,   258,   258,   258,   258,   258,   258,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   266,     0,     0, 
        266,     0,     0,   266,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   266,   266,     0, 
        266,     0,   266,   251,   251,   251,   251,   251,     0,     0, 
        251,   251,     0,   251,   251,   251,   251,   251,   251,     0, 
          0,     0,     0,     0,     0,     0,     0,   250,   250,   250, 
        250,   250,   266,   266,   250,   250,     0,   250,   250,   250, 
        250,   250,   250,   252,   252,   252,   252,   252,     0,     0, 
        252,   252,     0,   252,   252,   252,   252,   252,   252,   247, 
          0,     0,   247,   266,   266,   247,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   264,     0,     0,   264,   247, 
        247,   264,   247,     0,   247,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   264,   264,     0,   264,   253, 
        264,     0,   253,     0,     0,   253,     0,     0,     0,     0, 
          0,     0,     0,     0,   247,   247,     0,     0,     0,   253, 
        253,     0,   253,     0,   253,     0,     0,     0,     0,     0, 
        264,   264,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   247,   247,     0,     0,     0, 
        254,     0,     0,   254,   253,   253,   254,     0,     0,     0, 
          0,   264,   264,     0,     0,     0,     0,     0,     0,     0, 
        254,   254,     0,   254,     0,   254,     0,     0,     0,     0, 
        267,   267,   267,   267,   267,   253,   253,   267,   267,     0, 
        267,   267,   267,   267,   267,   267,   265,     0,     0,   265, 
          0,     0,     0,     0,     0,   254,   254,     0,     0,     0, 
          0,     0,     0,   265,   265,     0,   265,     0,   265,   248, 
        248,   248,   248,   248,     0,     0,   248,   248,     0,   248, 
        248,   248,   248,   248,   248,     0,   254,   254,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   265,   265, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   129,     0,   139,     0,     0,     0,     0,   138,   265, 
        265,   127,     0,   128,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   296,     0, 
          0,     0,     0,     0,     0,   129,     0,   139,     0,     0, 
          0,     0,   138,     0,   129,   127,   139,   128,     0,     0, 
          0,   138,     0,     0,   127,     0,   128,     0,     0,    83, 
          0,     0,     0,     0,   300,     0,     0,     0,     0,   126, 
          0,     0,     0,   266,   266,   266,   266,   266,     0,     0, 
        266,   266,     0,   266,   266,   266,   266,   266,   266,     0, 
          0,     0,     0,    83,   130,     0,     0,     0,     0,     0, 
          0,     0,    83,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   130,     0, 
          0,     0,   129,     0,   139,     0,     0,   130,     0,   138, 
          0,     0,   127,     0,   128,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   247,   247,   247,   247,   247, 
        292,     0,   247,   247,     0,   247,   247,   247,   247,   247, 
        247,   264,   264,   264,   264,   264,     0,     0,     0,     0, 
          0,   264,   264,   264,   264,   264,   264,     0,     0,     0, 
         83,     0,     0,     0,     0,   253,   253,   253,   253,   253, 
          0,     0,     0,     0,     0,   253,   253,   253,   253,   253, 
        253,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   130,     0,     0,   172,    86, 
         87,    88,    89,    90,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   254,   254,   254,   254, 
        254,     0,     0,     0,    10,     0,   254,   254,   254,   254, 
        254,   254,   172,    86,    87,    88,    89,    90,     0,     0, 
          0,   135,   136,    87,    88,    89,    90,     0,     0,     0, 
          0,   134,     0,     0,     0,     0,     0,     0,    10,   265, 
        265,   265,   265,   265,     0,     0,     0,    10,     0,   265, 
        265,   265,   265,   265,   265,     0,     0,     0,   137,     0, 
        129,     0,   139,     0,   133,   134,     0,   138,     0,     0, 
        127,     0,   128,     0,   134,   129,     0,   139,     0,     0, 
          0,     0,   138,     0,     0,   127,     0,   128,   294,     0, 
          0,     0,   137,     0,     0,     0,     0,     0,   133,     0, 
          0,   137,     0,     0,     0,     0,     0,   133,     0,   172, 
         86,    87,    88,    89,    90,   220,     0,   220,    83,   297, 
        131,   132,   220,     0,     0,   220,     0,   220,     0,     0, 
        129,     0,   139,    83,     0,    10,     0,   138,     0,     0, 
        127,     0,   128,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   301,   130,   131,   132,     0,     0,     0,     0, 
          0,     0,   134,   131,   132,   341,     0,     0,   130,     0, 
        129,     0,   139,   220,     0,   220,     0,   138,     0,     0, 
        127,     0,   128,     0,     0,     0,     0,     0,    83,   137, 
          0,     0,     0,     0,     0,   133,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   220,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,     0,     0,     0,     0,   186,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   131,   132,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   130,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   172,    86,    87, 
         88,    89,    90,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   172,    86,    87,    88,    89,    90,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    10,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        134,     0,   220,   220,   220,   220,   220,   220,     0,     0, 
          0,     0,     0,     0,     0,   134,     0,   172,    86,    87, 
         88,    89,    90,     0,     0,     0,     0,   137,   220,     0, 
          0,     0,     0,   133,     0,     0,     0,     0,     0,     0, 
          0,     0,   137,    10,     0,     0,     0,     0,   133,     0, 
          0,     0,     0,     0,     0,   220,     0,   172,    86,    87, 
         88,    89,    90,     0,     0,     0,     0,     0,     0,     0, 
        134,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   220,    10,     0,     0,     0,     0,   220,   131, 
        132,     0,     0,     0,     0,     0,     0,   137,     0,     0, 
          0,     0,     0,   133,   131,   132,     0,     0,     0,     0, 
        134,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   187,     0,     0, 
          0,     0,     0,   133,   220,   220,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   131, 
        132,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   131, 
        132, 
    );
    protected static $yyCheck = array(4,
         61,    62,    63,   120,    41,    46,    46,    44,    41,   124, 
         60,    41,   154,    91,    46,    41,    91,    63,    44,    59, 
         71,   125,   260,    84,   168,    44,    91,   126,   123,    34, 
         35,   236,    58,    59,    40,    40,   260,    98,   126,   100, 
         59,    40,    44,    37,    41,    91,   466,    44,    42,    43, 
         91,    45,   169,    47,   105,   106,    61,    62,    63,   120, 
         41,    58,    59,   126,    69,    70,    71,    93,   430,   436, 
         44,   125,    37,   303,    91,    93,   300,    42,    59,    84, 
         37,    38,    47,    63,    42,    42,    43,   125,    45,   509, 
         47,    93,    97,    98,    40,   100,    93,   184,    44,   125, 
        105,   106,   340,    60,   260,    62,   125,   125,   169,   314, 
         58,    91,    93,    59,   481,   120,   536,   123,   179,    93, 
         46,   263,    60,   125,    41,   543,   544,    44,   125,    59, 
        286,   304,   126,   138,    40,    61,    91,    94,    44,    91, 
        364,    58,    59,    44,   125,   507,    59,    59,    59,   330, 
         44,   125,   570,    91,   260,    91,   260,   162,   163,   340, 
        165,   126,    40,   224,   169,    37,    38,   124,    46,   126, 
         42,    43,   259,    45,   179,    47,    93,   123,   103,   125, 
        286,   268,    46,    41,   340,   260,    44,    93,    60,   194, 
         62,   335,    93,   123,   336,   260,   338,   125,   403,    93, 
         58,    59,   127,   128,   129,   130,   131,   132,   125,   134, 
        123,   123,   123,   138,   260,    44,   311,    41,   360,   224, 
         44,   286,    94,   228,   312,   340,   332,   257,    37,   154, 
         44,   125,   331,    42,    43,    93,    45,    44,    47,    59, 
        286,    40,   386,   331,   249,   320,    46,    46,    62,   312, 
         46,    60,    59,    62,   126,   397,   181,   332,   183,    58, 
        402,   260,   340,   350,    93,   340,   271,   125,   331,    93, 
         91,   196,   197,   198,   199,   200,   201,   202,   203,   204, 
        205,   206,   207,   208,   209,   210,   211,   212,   213,   214, 
        215,   216,   217,   218,   219,   220,   221,   222,   223,    91, 
        225,   300,   260,   402,   403,   260,    46,   394,   260,   451, 
         40,   236,   260,   261,   402,   403,    46,   126,   312,   373, 
        374,    61,   260,   340,   260,   261,   262,   263,   264,   265, 
         44,   286,   260,   421,   286,   373,   374,   331,   263,   402, 
        403,   266,   300,    64,   257,   257,   257,   312,    62,    33, 
        286,    35,   260,   261,   441,   312,    40,    46,   286,    43, 
        410,    45,   568,   569,   300,   364,   331,   292,   419,   294, 
        410,   296,   297,   410,   331,   300,   301,   410,   410,   420, 
        332,   260,   320,   525,    91,   340,    93,   593,   414,   314, 
         59,    37,    38,    33,   332,    35,    42,    43,    91,    45, 
         40,    47,   340,    43,   332,    45,   364,    91,   402,   403, 
        346,   336,    39,   338,    60,   420,    62,   414,   415,    58, 
        537,   300,    49,    50,    51,   430,   351,   421,    41,   260, 
         41,    44,   260,    44,   260,   360,   578,   402,   403,   260, 
        312,   125,   126,   400,   401,   402,   403,    58,    59,   471, 
        472,    91,   344,   345,   411,   412,   421,   283,   286,   331, 
        286,   340,    40,   388,   421,   286,   471,   472,   260,   300, 
         41,    46,   397,    44,   300,    59,   537,   402,   403,    59, 
        126,   406,    93,    58,    41,   125,   126,    44,   510,    41, 
         41,    59,    44,    44,   286,    60,    41,   414,   415,    44, 
         91,    41,   507,   312,    44,   510,   431,    59,    33,   514, 
         35,   332,   310,   270,   125,    40,   273,   310,    43,   340, 
         45,   410,   331,   300,   301,   302,   451,   452,   400,   401, 
        402,   403,   537,   594,   459,   460,    41,    37,   364,   411, 
        412,    93,    42,    43,    61,    45,   311,    47,   340,   421, 
        373,   374,    33,   614,    35,    40,   414,   415,   310,    40, 
         13,    14,    43,   488,    45,   123,    91,   260,   261,   262, 
        263,   264,   265,   125,    58,   500,   260,   261,   262,   263, 
        264,   265,    91,   280,   281,   282,   283,   284,   285,   594, 
        287,   400,   401,   402,   403,   123,    41,    44,   123,    44, 
        525,   126,   286,   528,   123,   530,   303,    58,   235,   614, 
         91,   123,   421,    58,    59,   410,    61,    91,    63,    44, 
        260,   261,   262,   263,   264,   265,   126,    93,    91,   313, 
        105,   106,    41,    44,    61,    44,   300,   301,   302,   564, 
        260,    49,    50,    51,    93,   126,   286,   257,    93,    58, 
         59,    41,    61,   578,    63,    44,   340,   341,   342,   343, 
         91,    41,   346,   123,   260,    41,   312,   125,    44,   260, 
         40,   123,    58,   313,    40,   600,   360,   361,   362,   363, 
        125,   365,   366,    59,    93,   331,   370,   371,   372,   373, 
        374,   123,    40,    58,   125,   286,    41,   260,   260,    44, 
        340,   341,   342,   343,   123,    41,   346,   125,    40,   300, 
        301,   302,    93,    40,    59,   124,   125,    93,   402,   403, 
        360,   361,   362,   363,   125,   365,   366,    61,    40,    40, 
        370,    91,   372,   373,   374,   260,   261,   262,   263,   264, 
        265,   332,    61,    41,   123,    41,   430,   125,    93,   125, 
        125,   125,   340,    40,   400,   401,   402,   403,    40,    40, 
         59,   286,   402,   403,    59,   411,   412,    40,    37,    40, 
        340,    59,    40,    42,    43,   421,    45,   260,    47,   260, 
        261,   262,   263,   264,   265,    41,   260,    41,   313,    59, 
        430,    60,    41,    62,    61,    44,   340,   260,   261,   262, 
        263,   264,   265,   414,   415,   286,   361,    59,    61,    58, 
         59,    41,   286,    44,    93,   340,   341,   342,   343,   125, 
        123,   346,    59,   286,   125,    40,   300,   301,   302,   364, 
         44,   123,   313,   321,    91,   360,   361,   362,   363,   260, 
        365,   366,   340,    41,    93,   370,    41,   372,   340,   280, 
        281,   282,   283,   284,   285,    41,   287,   126,   332,   340, 
        341,   342,   343,   123,   125,   346,   125,    59,   125,   371, 
        125,    40,   303,   123,    59,    41,   125,   402,   403,   360, 
        361,   362,   363,   346,   365,   366,   125,   125,    58,   370, 
        125,   372,    41,    41,    37,    38,    44,    40,    41,    42, 
         43,    44,    45,   334,    47,   430,    41,   123,   125,    44, 
         58,    59,   123,   123,    93,    58,    59,    60,    61,    62, 
         63,   402,   403,    58,    59,    41,    41,   257,   125,    58, 
         91,    37,    38,    91,    40,    41,    42,    43,    44,    45, 
         91,    47,   125,    93,   125,    93,   123,   125,    91,   430, 
         93,    94,    58,    59,    59,    61,    62,    63,    93,   404, 
        405,   406,   407,   408,    59,    41,    59,    41,    41,   414, 
        415,   416,   417,   418,   419,    41,   364,   125,    41,   125, 
        123,   124,   125,   126,   125,    91,     7,    93,    94,     6, 
        125,    77,   102,   334,   514,   404,   405,   406,   407,   408, 
        478,   472,    60,    59,   228,   414,   415,   416,   417,   418, 
        419,   109,   489,   586,   501,   179,   550,   123,   124,   125, 
        126,   550,   179,   280,   281,   282,   283,   284,   285,   339, 
        287,   194,    37,    38,   238,   271,    41,    42,    43,    44, 
         45,    46,    47,   312,   234,   165,   303,    31,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    37, 
         38,    -1,   331,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    41,    -1,    -1,    44,   334,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    91,   526,    93,    94, 
         58,    59,   531,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    91,   257,    93,    94,   260,    -1,   124, 
        125,   126,    -1,    58,    59,    93,    -1,    41,    -1,    -1, 
         44,   400,   401,   402,   403,    -1,    -1,    -1,    -1,    91, 
         -1,   580,   411,   412,    58,    59,   124,   125,   126,    91, 
         -1,   257,   421,    38,   260,    -1,    41,   125,    93,    44, 
        599,    -1,    -1,    -1,    -1,   414,   415,   310,   311,   312, 
        376,   610,    -1,    58,    59,    -1,    61,   320,    63,    93, 
         -1,    -1,    -1,   125,    -1,    -1,    -1,   330,   331,   332, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,   340,    41,    -1, 
         -1,    44,    -1,   409,   310,   311,   312,    -1,    93,    94, 
         -1,   125,    -1,    -1,   320,    58,    59,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   330,   331,   332,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    41,   124, 
        125,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,   257,    -1,    -1,    58,    59,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   410,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   421,   414, 
        415,    -1,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,   312,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1, 
        526,    -1,   125,    -1,    -1,   531,   331,    -1,   280,   281, 
        282,   283,   284,   285,   312,   287,    -1,    -1,   280,   281, 
        282,   283,   284,   285,    -1,   287,    -1,    -1,    -1,    -1, 
         -1,   303,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   303,   340,    37,    38,    91,    -1,    41,    42,    43, 
         44,    45,    46,    47,   580,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   334,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,   334,   599,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   610,    -1,   411,   412,    97,   414, 
        415,   416,   417,   418,   419,   420,   421,    91,    -1,    93, 
         94,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   420,   421,    -1,    -1,   414,   415,    -1,   138, 
        124,   125,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    46, 
         47,    -1,    -1,    -1,   163,    -1,   165,    -1,    -1,   414, 
        415,    58,    59,    60,    61,    62,    63,    37,    38,    -1, 
        179,    41,    42,    43,    44,    45,    46,    47,    -1,    -1, 
        414,   415,    -1,    -1,    -1,   194,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    91,    -1,    93,    94,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    41,    -1,    -1,    44,    -1, 
         -1,    91,    -1,    93,    94,    -1,    -1,   124,   125,   126, 
         -1,    -1,    58,    59,   280,   281,   282,   283,   284,   285, 
        249,   287,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,   414,   415,    -1,   124,   125,   126,   303,    -1,    91, 
         -1,    -1,   271,    -1,    37,    38,    -1,    93,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,   125, 
         47,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,   312,    -1, 
         93,    94,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    41,    -1,    -1,    44,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    58, 
         59,   124,   125,   126,    -1,    -1,    -1,    93,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126, 
         -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   312,   125,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   420,   421,   260,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,   280,   281,   282,   283, 
        284,   285,   312,   287,    -1,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,   286,   287,   300,   301,   302,    -1, 
        304,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   303,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        341,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1, 
        332,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,   421,    -1,    91,    -1,    -1,    94, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   312, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        420,   421,    -1,    -1,    -1,    -1,    -1,   330,   331,   124, 
         -1,   126,    -1,    -1,    -1,   312,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,   414,   415, 
         -1,    -1,    -1,    37,    38,   446,    -1,    41,    42,    43, 
         44,    45,   453,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   421,    93, 
         94,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,   517,   414,   415,   416, 
        417,   418,   419,   524,   421,    -1,    -1,    -1,   414,   415, 
        124,   125,   126,    -1,   535,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   257,    -1,    37,    38,    -1,    -1,    -1,    42, 
         43,    44,    45,    -1,    47,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   566,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    -1,    42,    43,    44,    45,    46, 
         47,    -1,    -1,    -1,   595,    -1,    -1,   312,    91,    -1, 
         93,    94,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,   613,    -1,    -1,    -1,   331,   618,    -1,    -1, 
         37,    38,   623,    -1,    41,    42,    43,    44,    45,    -1, 
         47,   124,    -1,   126,    91,    -1,    93,    94,    -1,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
        280,   281,   282,   283,   284,   285,    -1,   287,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,   124,    47,   126, 
        300,   301,   302,   303,    -1,    -1,    93,    94,    -1,    58, 
         59,    60,    61,    62,    63,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   421,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,   331,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   124,   125,   411,   412,   312, 
        414,   415,   416,   417,   418,   419,    -1,   421,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,   312,    -1,    -1,    -1,   124, 
        125,    -1,    -1,    58,    59,    60,    61,    62,    63,    91, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    93,    94, 
         -1,    58,    59,    60,    61,    62,    63,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   410,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   420,   421,   124, 
        125,    -1,    -1,   312,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,   421,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   312,   421,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    37,    38,    -1,   312,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,    -1,   287,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,   301, 
        302,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    94,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,    -1,   126,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   312,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1, 
         -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60, 
         61,    62,    63,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   124,   421,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         37,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1, 
        124,    -1,   126,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   124,   421,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,    37,    38,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,    -1,   126,    -1,    -1,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,   312,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,   124, 
        421,   126,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,    37,    38,   312,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    60,    61,    62,    63, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         94,    -1,    -1,    -1,   331,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,   421,    94,    -1, 
        124,    -1,   126,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   312,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    37,    38,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         94,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        124,   421,   126,    -1,    -1,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,   312,   414, 
        415,   416,   417,   418,   419,   124,   421,   126,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,   331,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   124,   125,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,   421,    93,    94, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,   124, 
        125,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    37, 
         38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         94,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,    -1,   126,    -1,    -1,    -1,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   124,   421,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    37,    38,    -1,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   124,   421,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,   312,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,   331,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    58, 
         59,    60,    61,    62,    63,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,   421,   124,   125, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,    -1,   415,   416,   417, 
        418,   419,    -1,   421,    -1,   124,   125,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,   312, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         60,    61,    62,    63,    38,    -1,    -1,    41,   331,    43, 
         44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41, 
         -1,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    -1,   124,   125,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
        124,   125,    -1,   416,   417,   418,   419,    38,   421,    -1, 
         41,    93,    94,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    38,    63,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,   124,   125,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    58,    59,    44,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,   124,   125,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1, 
         44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        124,   125,    -1,    -1,    -1,    -1,   400,   401,    93,    94, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    93,    94,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    38, 
         -1,    -1,    41,   124,   125,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    58, 
         59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    38, 
         63,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         38,    -1,    -1,    41,    93,    94,    44,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,   124,   125,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   124,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    33,    -1,    35,    -1,    -1,    -1,    -1,    40,   124, 
        125,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    35,    -1,    -1, 
         -1,    -1,    40,    -1,    33,    43,    35,    45,    -1,    -1, 
         -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    62,    -1,    -1,    -1,    -1,    58, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    91,   126,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    33,    -1,    35,    -1,    -1,   126,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         61,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,   260,   261, 
        262,   263,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,   286,    -1,   414,   415,   416,   417, 
        418,   419,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,   260,   261,   262,   263,   264,   265,    -1,    -1,    -1, 
         -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,   286,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,   286,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,   340,    -1, 
         33,    -1,    35,    -1,   346,   313,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,   313,    33,    -1,    35,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    61,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1,   260, 
        261,   262,   263,   264,   265,    33,    -1,    35,    91,   401, 
        402,   403,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         33,    -1,    35,    91,    -1,   286,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   126,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,   313,   402,   403,   123,    -1,    -1,   126,    -1, 
         33,    -1,    35,    91,    -1,    93,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    91,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    91,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        313,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,    -1,   340,   286,    -1, 
         -1,    -1,    -1,   346,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   286,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,   286,    -1,    -1,    -1,    -1,   346,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,   346,   402,   403,    -1,    -1,    -1,    -1, 
        313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,   346,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', 'T_EXP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 184 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 196 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 196 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 207 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 208 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 212 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 10:  #line 215 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new NativeImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 11:  #line 218 "src/main/jay/grammars/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 12:  #line 221 "src/main/jay/grammars/xp.jay"
    {
    $this->error(E_WARNING, 'Deprecated static import form used', array($yyVals[-3+$yyTop].'::'.$yyVals[-1+$yyTop]));
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 16:  #line 234 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 239 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 240 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 246 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 246 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 255 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 255 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 264 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 264 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 275 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 276 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 280 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 281 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 285 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 286 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 290 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 291 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 295 "src/main/jay/grammars/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 296 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 36:  #line 300 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 301 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 302 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 306 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 307 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 308 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 312 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 313 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 317 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 317 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 320 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 320 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 330 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 337 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 344 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 350 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 351 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 355 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 356 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 360 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 361 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 365 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 366 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 372 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 372 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 383 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 383 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 394 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 394 "src/main/jay/grammars/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 419 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 419 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 432 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 433 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 437 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 438 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 442 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 445 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 449 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 456 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 461 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 466 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 473 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 474 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 478 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 479 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 82:  #line 484 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceCreationNode());
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->parameters= $yyVals[-1+$yyTop];
      $yyVal->body= NULL;
    } break;

    case 83:  #line 490 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ConstantAccessNode(new TypeName($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]));
    } break;

    case 84:  #line 493 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new StaticMemberAccessNode(new TypeName($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]));
    } break;

    case 85:  #line 499 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 86:  #line 500 "src/main/jay/grammars/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 87:  #line 501 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 88:  #line 505 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 89:  #line 506 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 90:  #line 507 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 91:  #line 511 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 92:  #line 512 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 93:  #line 516 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 94:  #line 517 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 95:  #line 521 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 96:  #line 522 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 97:  #line 523 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 98:  #line 524 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('name' => $yyVals[-1+$yyTop], 'type' => TypeName::$VAR, 'check' => FALSE); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 99:  #line 528 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 100:  #line 529 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 101:  #line 533 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 102:  #line 534 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 109:  #line 553 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 111:  #line 558 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 112:  #line 559 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 113:  #line 563 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 114:  #line 563 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 115:  #line 566 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 116:  #line 566 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 117:  #line 571 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 118:  #line 571 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 119:  #line 581 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 120:  #line 581 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 586 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 122:  #line 586 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 590 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 124:  #line 590 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 125:  #line 594 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 126:  #line 594 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 127:  #line 598 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 129:  #line 599 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 131:  #line 600 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 132:  #line 600 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 133:  #line 603 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 134:  #line 603 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 135:  #line 608 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 136:  #line 611 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 138:  #line 618 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 139:  #line 619 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 140:  #line 623 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 141:  #line 626 "src/main/jay/grammars/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 142:  #line 633 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 143:  #line 634 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 144:  #line 638 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 145:  #line 644 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 146:  #line 645 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 147:  #line 649 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 149:  #line 654 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 150:  #line 655 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 151:  #line 659 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 152:  #line 659 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 153:  #line 663 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 154:  #line 663 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 155:  #line 669 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 156:  #line 670 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 157:  #line 674 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 158:  #line 675 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 159:  #line 675 "src/main/jay/grammars/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 160:  #line 680 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 161:  #line 681 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 162:  #line 685 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 163:  #line 686 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 164:  #line 690 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 165:  #line 690 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 166:  #line 704 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 167:  #line 705 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 168:  #line 709 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 170:  #line 714 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 171:  #line 714 "src/main/jay/grammars/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 172:  #line 722 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 174:  #line 727 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 175:  #line 728 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 176:  #line 732 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 178:  #line 737 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 179:  #line 743 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 180:  #line 748 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 181:  #line 756 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 182:  #line 759 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 183:  #line 762 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 184:  #line 765 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 185:  #line 771 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 186:  #line 771 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 187:  #line 777 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 188:  #line 777 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new LambdaNode(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]));
    } break;

    case 189:  #line 780 "src/main/jay/grammars/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 190:  #line 788 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new LambdaNode($yyVals[-2+$yyTop], $yyVals[0+$yyTop]));
    } break;

    case 191:  #line 791 "src/main/jay/grammars/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 192:  #line 797 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 193:  #line 797 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 194:  #line 806 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 195:  #line 806 "src/main/jay/grammars/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 196:  #line 816 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 197:  #line 816 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 198:  #line 825 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 199:  #line 828 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 200:  #line 831 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 201:  #line 834 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 202:  #line 837 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 203:  #line 840 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 204:  #line 843 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 205:  #line 847 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 206:  #line 853 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 207:  #line 859 "src/main/jay/grammars/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 208:  #line 865 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 209:  #line 870 "src/main/jay/grammars/xp.jay"
    { $yyVals[-4+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-2+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 210:  #line 870 "src/main/jay/grammars/xp.jay"
    {
      $this->error(E_WARNING, 'Deprecated lambda syntax used', array('#{ ... }'));
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-6+$yyTop];
      }
    } break;

    case 211:  #line 880 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 212:  #line 883 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 213:  #line 889 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(); } break;

    case 215:  #line 894 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 216:  #line 895 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 217:  #line 899 "src/main/jay/grammars/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 218:  #line 900 "src/main/jay/grammars/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 219:  #line 904 "src/main/jay/grammars/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 220:  #line 910 "src/main/jay/grammars/xp.jay"
    { $p= $yyLex->position; } break;

    case 221:  #line 910 "src/main/jay/grammars/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 222:  #line 911 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 223:  #line 912 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 224:  #line 913 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 225:  #line 914 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 226:  #line 915 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 227:  #line 919 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 228:  #line 922 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 229:  #line 928 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 231:  #line 933 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 232:  #line 934 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 233:  #line 938 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 235:  #line 943 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 236:  #line 944 "src/main/jay/grammars/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 237:  #line 948 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 949 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 950 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 240:  #line 951 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 241:  #line 952 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 953 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 954 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 955 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 956 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 957 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 958 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 248:  #line 959 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 249:  #line 963 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 250:  #line 964 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 965 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 966 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 967 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 968 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 969 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 256:  #line 970 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 257:  #line 974 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 975 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 259:  #line 976 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 260:  #line 977 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 978 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 979 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 980 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 981 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 982 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 983 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 267:  #line 984 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 268:  #line 985 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 269:  #line 989 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 270:  #line 990 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 271:  #line 991 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 272:  #line 992 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 273:  #line 993 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 274:  #line 994 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 275:  #line 998 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 276:  #line 999 "src/main/jay/grammars/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 277:  #line 1004 "src/main/jay/grammars/xp.jay"
    { $yyVal= NULL; } break;

    case 279:  #line 1009 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 280:  #line 1010 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 281:  #line 1014 "src/main/jay/grammars/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 282:  #line 1014 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 283:  #line 1017 "src/main/jay/grammars/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 284:  #line 1020 "src/main/jay/grammars/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 285:  #line 1020 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 286:  #line 1023 "src/main/jay/grammars/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 287:  #line 1023 "src/main/jay/grammars/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 288:  #line 1029 "src/main/jay/grammars/xp.jay"
    { $yyVal= FALSE; } break;

    case 289:  #line 1030 "src/main/jay/grammars/xp.jay"
    { $yyVal= TRUE; } break;

    case 296:  #line 1048 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 297:  #line 1049 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 298:  #line 1053 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 299:  #line 1057 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 300:  #line 1061 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 301:  #line 1062 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 303:  #line 1067 "src/main/jay/grammars/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 304:  #line 1071 "src/main/jay/grammars/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 305:  #line 1072 "src/main/jay/grammars/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 306:  #line 1078 "src/main/jay/grammars/xp.jay"
    { $yyVal= 0; } break;

    case 307:  #line 1079 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 308:  #line 1083 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 309:  #line 1084 "src/main/jay/grammars/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 310:  #line 1088 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 311:  #line 1089 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 312:  #line 1090 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 313:  #line 1091 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 314:  #line 1092 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 315:  #line 1093 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 316:  #line 1094 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 317:  #line 1095 "src/main/jay/grammars/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2918 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
